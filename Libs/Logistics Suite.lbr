{
Do not edit this file as its contents may be updated by Incontrol in future versions.
If you want to add functionality (like registering additional editfields, menu's, functions or loading additional atoms at startup, use the '.usr' file or define your own)
}

ProgressBar(1, 20, 3, [Loading System Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [SYSTEM]);
Last(Library);ExecFile(PDir([Atoms\Atom Versions.atm]));
Set(t, PDir([Atoms\3DIcons.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\AtomLabels.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\AutoFit Support.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Basic Icon Library.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\EditFields.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Goods Icon Library.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Graphs.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\History.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Statuslist.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Experiment Support.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Search.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Gui.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Attribute.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\MoveAtom3D.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 20, 4, [Loading Basic Modeling Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [BASIC MODELING]);
Set(t, PDir([Atoms\Product.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Source.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Queue.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Server.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Sink.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Node.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Container.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 5, [Loading Availability Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [AVAILABILITY]);
Set(t, PDir([Atoms\Availability Control.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Switch Availability.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Mtbf Mttr Availability.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Time Schedule Availability.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 6, [Loading Data Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [DATA]);
Set(t, PDir([Atoms\Table.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Export Table.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Word.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Excel.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\ExcelTableRead.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\ExcelTableWrite.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Database Connection.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Socket Listen.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Socket Send.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\ExcelActiveX.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 7, [Loading Transport Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [TRANSPORT]);

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [CONVEYORS]);
Set(t, PDir([Atoms\General Conveyor Functions.atm]));Last(Library);ExecFile(t);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [ACCUMULATING]);
Set(t, PDir([Atoms\Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Fast Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Accumulating Conveyor Straight.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Speed Changing Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Left Curved Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Right Curved Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Accumulating Conveyor Curved.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([CONVEYORS], Library));
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [NONACCUMULATING]);
Set(t, PDir([Atoms\Non Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Fast Non Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Non Accumulating Conveyor Straight.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Buffer Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Left Curved Non Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Right Curved Non Accumulating Conveyor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Non Accumulating Conveyor Curved.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([CONVEYORS], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [INTERSECTIONS]);
Set(t, PDir([Atoms\TurnTable Unit.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Corner Transfer Unit.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Corner Transfer Lifter.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([CONVEYORS], Library));
SetRank(content(AtomByName([CONVEYORS], Library)), AtomByName([General Conveyor Functions], Library));
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [FLOORBOUND]);
Set(t, PDir([Atoms\Transporter.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Transporter.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Battery Charging Station.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Dispatcher.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Destinator.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\speedometer.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\RFID-Gate.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [RAILBOUND]);
Set(t, PDir([Atoms\Transfer Car.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [ELEVATION]);
Set(t, PDir([Atoms\Elevator.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [ROBOTS]);
Set(t, PDir([Atoms\Robot.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Scara Robot.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Linear Robot.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Advanced Vertical Articulated Robot.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [CRANES]);
Set(t, PDir([Atoms\Portal Crane.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([TRANSPORT], Library));

ProgressBar(1, 20, 8, [Loading Optimization Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [OPTIMIZATION]);
Set(t, PDir([Atoms\Optimizer.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Variable.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Objective.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Requirement.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 9, [Loading Network Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [NETWORK]);
Set(t, PDir([Atoms\Network Node.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Node Manipulator.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Network Controller.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 10, [Loading Flow Control Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [FLOW CONTROL]);
Set(t, PDir([Atoms\Condition Control.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Notify Router.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Lock.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Unlock.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 11, [Loading Process Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [PROCESSES]);
Set(t, PDir([Atoms\Fast Server.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\MultiService.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Carousel Server.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Assembler.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Splitter.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Unpack.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Assembler with Inventory.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Stacker.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\SingleTransform.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\MultiTransform.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 12, [Loading Results Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [RESULTS]);

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [STATUS]);
Set(t, PDir([Atoms\StatusIndicator.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusMonitor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusHistogram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusMonitorStackedBar.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([RESULTS], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [GANTT]);
Set(t, PDir([Atoms\Gantt Initialize.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Gantt Chart.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([RESULTS], Library));

Set(t, PDir([Atoms\CircleDiagram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Histogram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Scatterplot.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Data Recorder.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Graph.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\History Viewer.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Model Documentation.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Generic Monitor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Report.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 13, [Loading Storage Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [STORAGE]);

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [AUTOMATED]);
Set(t, PDir([Atoms\Advanced ASRS.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([STORAGE], Library));

Set(t, PDir([Atoms\Fast Queue FIFO.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Kanban Bin.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Reservoir.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Warehouse.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Ground Storage.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 14, [Loading Time Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [TIME]);
Set(t, PDir([Atoms\ShowDateTime.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\User Events.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\ArrivalList.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 15, [Loading Tools Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [TOOLS]);
Set(t, PDir([Atoms\Composition Container.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Empirical Distribution.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Function Editor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Initialize.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 20, 16, [Loading Operator Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [OPERATORS]);
Set(t, PDir([Atoms\Team.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Operator.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Call Operators.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Free Operators.atm]));Last(Library);ExecFile(t);
{Set(t, PDir([Atoms\Advanced Team.atm]));Last(Library);ExecFile(t);}
{Set(t, PDir([Atoms\Advanced Operator.atm]));Last(Library);ExecFile(t);}

ProgressBar(1, 20, 17, [Loading Virtual Reality Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [VIRTUAL REALITY]);
Set(t, PDir([Atoms\VR Box.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Cylinder.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Flexbox.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Plane.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Sphere.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Wall.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\VR Building.atm]));Last(Library);ExecFile(t);
{Set(t, PDir([Atoms\VR Textbox.atm]));Last(Library);ExecFile(t);}

ProgressBar(1, 20, 18, [Loading Visualization Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [VISUALIZATION]);
Set(t, PDir([Atoms\Animation Recorder.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\MovieCreator.atm])); Last(Library); if(FileExists(t),ExecFile(t));
Set(t, PDir([Atoms\Bitmap.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Camera.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Color Glasses.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Omni Light.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Textbox.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Movie Director.atm]));Last(Library);ExecFile(t);

SetRank(1,AtomByName([BASIC MODELING], Library));
SetRank(2,AtomByName([TRANSPORT], Library));
SetRank(3,AtomByName([STORAGE], Library));
SetRank(4,AtomByName([PROCESSES], Library));
SetRank(5,AtomByName([OPERATORS], Library));
SetRank(6,AtomByName([NETWORK], Library));
SetRank(7,AtomByName([AVAILABILITY], Library));
SetRank(8,AtomByName([FLOW CONTROL], Library));
SetRank(9,AtomByName([TIME], Library));
SetRank(10,AtomByName([DATA], Library));
SetRank(11,AtomByName([TOOLS], Library));
SetRank(12,AtomByName([RESULTS], Library));
SetRank(13,AtomByName([OPTIMIZATION], Library));
SetRank(14,AtomByName([VISUALIZATION], Library));
SetRank(15,AtomByName([VIRTUAL REALITY], Library));
SetRank(16,AtomByName([SYSTEM], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [AUTOLOADED]);