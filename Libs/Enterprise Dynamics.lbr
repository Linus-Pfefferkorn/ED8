{
Do not edit this file as its contents may be updated by Incontrol in future versions. 
If you want to add functionality (like registering additional editfields, menu's, functions or loading additional atoms at startup, use the '.usr' file or define your own)
}

ProgressBar(1, 17, 3, [Loading System Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [SYSTEM]);
Last(Library); ExecFile(PDir([Atoms\Atom Versions.atm]));
Set(t, PDir([Atoms\3DIcons.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\AtomLabels.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\AutoFit Support.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Basic Icon Library.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\EditFields.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Goods Icon Library.atm])); Last(Library); ExecFile(t); 
Set(t, PDir([Atoms\Graphs.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\History.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Statuslist.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Experiment Support.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Search.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Gui.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Attribute.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\MoveAtom3D.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 4, [Loading Basic Modeling Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [BASIC MODELING]);
Set(t, PDir([Atoms\Product.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Source.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Queue.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Server.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Sink.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Node.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Container.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 5, [Loading Transport Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [TRANSPORT]);
Set(t, PDir([Atoms\Fast Accumulating Conveyor.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Fast Non Accumulating Conveyor.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Transporter.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 6, [Loading Processes Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [PROCESSES]);
Set(t, PDir([Atoms\MultiService.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Assembler.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Splitter.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Unpack.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\SingleTransform.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\MultiTransform.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 7, [Loading Availability Atoms...]); 
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [AVAILABILITY]);
Set(t, PDir([Atoms\Availability Control.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Mtbf Mttr Availability.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Switch Availability.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Time Schedule Availability.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 8, [Loading Flow Control Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [FLOW CONTROL]);
Set(t, PDir([Atoms\Condition Control.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Notify Router.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Lock.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Unlock.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 9, [Loading Time Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [TIME]);
Set(t, PDir([Atoms\ShowDateTime.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\User Events.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\ArrivalList.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 10, [Loading Data Atoms...]); 
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [DATA]); 
Set(t, PDir([Atoms\Table.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Export Table.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Word.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Excel.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\ExcelTableRead.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\ExcelTableWrite.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Database Connection.atm])); Last(Library); ExecFile(t); 
Set(t, PDir([Atoms\Socket Listen.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Socket Send.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\ExcelActiveX.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 11, [Loading Tools Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [TOOLS]);
Set(t, PDir([Atoms\Composition Container.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Empirical Distribution.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Function Editor.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Initialize.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 20, 12, [Loading Results Atoms...]);
Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [RESULTS]);

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [STATUS]);
Set(t, PDir([Atoms\StatusIndicator.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusMonitor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusHistogram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\StatusMonitorStackedBar.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([RESULTS], Library));

Library;ExecFile(PDir([Atoms\Group.atm]));Set(Name(Last(Library)), [GANTT]);
Set(t, PDir([Atoms\Gantt Initialize.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Gantt Chart.atm]));Last(Library);ExecFile(t);
MoveAtom(Last(Library),AtomByName([RESULTS], Library));

Set(t, PDir([Atoms\CircleDiagram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Histogram.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Scatterplot.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Data Recorder.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Graph.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\History Viewer.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Model Documentation.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Generic Monitor.atm]));Last(Library);ExecFile(t);
Set(t, PDir([Atoms\Report.atm]));Last(Library);ExecFile(t);

ProgressBar(1, 17, 13, [Loading Optimization Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [OPTIMIZATION]);
Set(t, PDir([Atoms\Optimizer.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Variable.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Objective.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Requirement.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 14, [Loading Visualization Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [VISUALIZATION]);
Set(t, PDir([Atoms\Animation Recorder.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\MovieCreator.atm])); Last(Library); if(FileExists(t),ExecFile(t));
Set(t, PDir([Atoms\Bitmap.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Camera.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Color Glasses.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Omni Light.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Textbox.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\Movie Director.atm])); Last(Library); ExecFile(t);

ProgressBar(1, 17, 15, [Loading Virtual Reality Atoms...]);
Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [VIRTUAL REALITY]);
Set(t, PDir([Atoms\VR Box.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Cylinder.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Flexbox.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Plane.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Sphere.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Wall.atm])); Last(Library); ExecFile(t);
Set(t, PDir([Atoms\VR Building.atm])); Last(Library); ExecFile(t);

SetRank(13, Rank(1, Library));

Library; ExecFile(PDir([Atoms\Group.atm])); Set(Name(Last(Library)), [AUTOLOADED]);