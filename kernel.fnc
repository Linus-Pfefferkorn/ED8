{
Do not edit this file as its contents may be updated by Incontrol in future versions. 
If you want to add functionality (like registering additional editfields, menu's, functions or loading additional atoms at startup, use the '.usr' file or define your own).
}

{
This file contains various chunks of functionality (procudures) only executed when called.
These are not loaded into the system memory.

They are organised in sections, you can execute these 
sections by calling execfile(filename,sectionname).

Table of contents:
-  new model
-  load new model dialog
-  close all windows
-  new application
-  new application Dialog
-  save model
-  save model under same name
-  save model dialog
-  before close dialog
-  load model dialog
-  exit application dialog
-  save atom dialog
-  create model
-  save library
-  summary report
-  merge model dialog 
-  show model in 2d
-  destroy and recreate model atom
-  destroy and recreate library atom
-  graph of queue per atom
-  add to library
-  replace library by new library
-  show submodel in 2d
-  queue graph
-  status pie chart
-  status bar graph
-  queue histogram
-  waittime histogram
-  load sound dialog
-  load tvr dialog
-  new model create
-  save atom
-  upload files to internet
-  vr model with create
-  show atom editor
-  load dxf dialog
-  load cadimportwizard dialog
-  show sublayout
-  create backup file
-  save tree atom
-  display library tree
-  display model tree
-  create atom in model
-  setup 2d3d window
-  show model in vr
-  execonuser
-  open new model
-  show experiment wizard
-  analyze experiment results
-  load model
-  create preregister file
-  viewer create model
-  load new viewer model dialog
-  show viewer model in 2d
-  show viewer model in 3d
}

{**************************************************************************}
{{new model}}
{Closes the model and creates a new one}
do(
 KernelFnc([before close dialog]),
 if(
  <>(v,2),
  do(
   { Close and clear model related windows }
   Close(editwin),
   CloseInfoWindows,
   TraceClear,
   Close(ErrorTracer),
   
   { reset experiment settings }
   ExperimentReset,
   KernelFnc([destroy and recreate model atom]),
   
   { clear all layers }
   RemoveLayers,
   KernelFnc([display library tree]),
   
   { reset viewing coordinates of 2d }
   set(viewx, -2),
   set(viewy, -1),
   set(scale, 15),
   
   { remove background }
   Set2DBackground(False),
   
   { update gui's }
   UpdatemodelLayouts,
   a := model,
   AtomTreeRefresh(1)
  )
 )
);

{**************************************************************************}
{{load new model dialog}}
{Displays the new model dialog and returns t}
do(
 KernelFnc([before close dialog]),
 if(
  <>(v,2),
  do(
   var([strFile], vbString),
   set(t,makefilename(getfileopen(moddir([*.mod]),[model files (*.mod)|*.mod|All files (*.*)|*.*]),[.mod])),
   strFile := t,
   if(
    not(fileexists(t)),
    if(
     >(stringlength(t),0),
     msg([File does not exist],2)
    ),
    { else }
    do(
     KernelFnc([destroy and recreate model atom]),
     KernelFnc([display model tree]),
     t := strFile,
     if(
      v <> 2,
      KernelFnc([load model])
     )
    )
   )
  )
 )
);

{**************************************************************************}
{{close all windows}}
{Closes all windows}
do(
 close(interactivelanguage),
 close(database),
 loopuntil(2d3d=0, Do( ClosemodelView, ClosemodelLayout, Close3DmodelView, close(0))),
 close(treeview),
 close(errortracer),
 close(clock),
 close(tracer),
 close(4dscript),
 close(iconbrowser),
 close(runcontrol),
 close(settings),
 close(editor),
 close(graph),
 close(editwin),
 closeinfowindows,
 CloseAllAtomTrees
);

{**************************************************************************}
{{new application}}
{closes and unregisters all and executes t}
{you should set variable t in advance with an .app file}
do(
 waitcursor,
 KernelFnc([close all windows]),
 foratomlayerunder(main,destroyatom),
 sleep(4000),
 fileclose,
 unregistericons,
 unregistereditfields,
 unregister4dscript,
 newmenu([Help]),
 normalcursor,
 execfile(t)
);

{**************************************************************************}
{{new application Dialog}}
{opens a file open dialog and sets t with an .app file}
if(
 confirm(concat([Do you want to quit ],applicationname)),
 do(
  kernelfnc([before close dialog]),
  if(
   <>(v,2),
   do(
    set(t,getfileopen(pdir([apps\*.app]),[E.D. Applications (*.app)|*.app])),
    if(
     fileexists(t),
     kernelfnc([new application])
    )
   )
  )
 )
);

{**************************************************************************}
{{save model}}
{Saves a model with preset string t}
{you should set variable t in advance}
if(
 license,
 do(
  { begin saving }
  waitcursor,
  if(
   GetPreference([CreateBakFile]),
   { create backup file}
   kernelfnc([create backup file])
  ),
  reset,
  fileopen(t, GetPreference([SaveBinary])),
  fileclear,
  { save model information }
  savemodel,
  { finish saving }
  savewait,
  savefinish,
  fileclose,
  updatemodelname(t),
  normalcursor
 ),
 msg([No license to save])
);

{**************************************************************************}
{{save model under same name}}
{quicksave a model (ctrl-s)}
do(
 set(t,textatt([model Name],model)),
 if(
  comparetext(t,[Untitled]),
  kernelfnc([save model dialog]),
  kernelfnc([save model])
 )
);

{**************************************************************************}
{{save model dialog}}
{opens a file open dialog and sets t with a .mod file}
do(
 set(
  t,
  makefilename(
   getfilesave(
    if(
     comparetext(textatt([model Name],model),[Untitled]),
     workdir([*.mod]),
     textatt([model Name],model)
    ),
    [model files (*.mod)|*.mod]
   ),
   [.mod]
  )
 ),
 if(
  and(
   not(comparetext(t,[])),
   or(
    not(fileexists(t)),
    do(
     set(v,confirmync([Overwrite file])),
     =(v,1)
    )
   )
  ),
  kernelfnc([save model]),
  {set savedialog to cancel}
  v:=2
 )
);

{**************************************************************************}
{{before close dialog}}
{confirmation of save routine}
do(
 set(
  v,
  if(
   {empty model so close now}
   =(content(model),0),
   0,
   if(
    {there is a model but never saved under a name}
    or(comparetext(textatt([model Name],model),[Untitled]), Time > 0),
    {ask the user to save it}
    confirmync(LocalStr(9902){Save current model?}),
    
    {else there is a model name}
    do(
     var([temp_t], vbString),
     {check if it is changed}
     {set t_temp with modelname and rename t to the model name with .~mod extension and save it}
     WaitCursor,
     temp_t := textatt([model Name],model),
     t := StringReplace(temp_t, [.mod], [.~mod]),
     kernelfnc([save model]),
     {set t back, change temp_t to temoporary file and update model name}
     t := temp_t,
     temp_t := StringReplace(t, [.mod], [.~mod]),
     updatemodelname(t),
     {compare the two models and if different, ask to save}
     if(
      not(CompareFiles(temp_t, t)),
      do(
       {different, ask user input}
      DeleteFile(temp_t),
       NormalCursor,
       confirmync(LocalStr(9902){Save current model?})
      ),
      {files are identical, set to 0}
      do(
       DeleteFile(temp_t),
       NormalCursor,
       0
      )
     )
    )
   )
  )
 ),
 if(
  =(v,1),
  kernelfnc([save model dialog])
 )
);

{**************************************************************************}
{{load model dialog}}
{opens a file open dialog and sets t with a .mod file and executes t}
do(
 set(t, MakeFileName(GetFileOpen(WorkDir([*.mod]),[model files (*.mod)|*.mod]),[.mod])),
 if(
  fileexists(t),
  do(
   waitcursor,
   DisplayLayers(0),
   progressbarforopen(1, t),
   execfile(t),
   updatemodelname(t),
   progressbarforopen(0),
   normalcursor
  ),
  if(
   >(stringlength(t),0),
   msg([File does not exist],2)
  )
 )
);

{**************************************************************************}
{{exit application dialog}}
{exit application}
do(
 if(
  not(=(getlicensetype,15)),
   Do(
    kernelfnc([before close dialog]),
    if(
     <>(v,2),
     exit
    )
   ),
   Do(
    exit
   )
  )
);

{**************************************************************************}
{{save atom dialog}}
{Opens a dialog and saves the atom}
if(
 license,
 if(
  =(selectatom(main,treeatom,[Select an atom to be saved]),1),
  do(  
   sets,
   var([atmSaveAtomDialog], vbAtom, s),
   set(t,makefilename(getfilesave(workdir(concat(name(s),[.atm])),[Atom files (*.atm)|*.atm]),[.atm])),
   if(
    and(
     not(comparetext(t,[])),
     or(
      not(fileexists(t)),
      do(
       set(v,confirmync([Overwrite file])),
       =(v,1)
      )
     )
    ),
    Do(
     atmSaveAtomDialog, { *** Restore the reference to the TreeAtom *** }
     sets,
     kernelfnc([save atom])
    )
   )
  )
 ),
 msg([No license to save])
);

{**************************************************************************}
{{create model}}
{creates the model layout}
do(
 createmodelLayout(model)
);

{**************************************************************************}
{{save library}}
{Saves the library to the selected .lbr file}
if(
 license,
 do(
  var([strPathFunction], vbString),
  var([valCounter], vbValue),
  var([valGroupCounter], vbValue, 0),
  var([atmGroup], vbAtom),
  var([atmSubGroup], vbAtom),
  var([strSubGroup], vbString),
  var([strFileName], vbString),
  var([strLibGroup], vbString),
  var([strDir], vbString),
  var([valEDAtoms], vbValue),
  var([atmTable], vbAtom),
  var([valBool], vbValue),
  var([atmC], vbAtom),
  var([valStop], vbValue),
  var([strLibName], vbString),
  var([valGroup], vbValue),
  var([valRankSystem], vbValue),

  {**Show message box to get library name**}  
  if(
    CompareText(WorkDir, pdir([Work\])) = 0,
    strLibName := StrSeparate(WorkDir, [\], SubstrCount(WorkDir, [\])),
    strLibName := []
  ),
  
  strLibName := InputText(strLibName, [Name of the library:], 1, 50),
  
  if(
    StringLength(strLibName) > 1,
    do(    
  
      CreateProgressTask([SavingLibrary], [Creating Library File]),
      SetTaskProgress([SavingLibrary], 1, [Creating Library File]),
      
      if(
        CompareText(WorkDir, pdir([Work\])),
        do(
          strPathFunction := [PDir],
          strFileName := pDir(Concat([Libs\], strLibName, [.lbr]))
        ),
        do(
          strPathFunction := [WorkDir],
          strFileName := WorkDir(Concat([Libs\], strLibName, [.lbr]))
        )
      ),
      strLibGroup := [Library], {**Update this to specific name to only save a part of the library**}
    
      {**Create directory**}
      strDir := Concat(ExtractDir(strFileName), [\]),
      if( 
        not(DirectoryExists(strDir)),        
        do( 
          CreateDirectory(strDir)
        )
      ),      
    
      FileOpen(strFileName),
      FileClear,
      
      PushAtomPointer(s),
      
      {**Move system to front**}
      valRankSystem,
      LoopUntil(
        valRankSystem > 0,
        if(
          InList(Name(rank(Content(Library) - Count + 1, Library)), [SYSTEM]) = 1,
          do(
            valRankSystem := Content(Library) - Count + 1,      
            rank(Rank(Content(Library) - Count + 1, Library)) := 1
          )
        ),
        Content(Library)
      ),
      
      {**Count number of atoms**}
      valGroupCounter := 0,
      Repeat(
        Content(Library),
        if(
          do(
            valBool := False,
            valStop := False,
            atmC := rank(Count, Library),
            LoopUntil(
              valStop,
              do(
                if(       
                  or(       
                    CompareText(Name(up(atmC)), strLibGroup),
                    CompareText(Name(atmC), strLibGroup)
                  ),
                  do(
                    if(
                      CompareText(Name(atmC), [AUTOLOADED]) = False,
                      valBool := true
                    ),
                    valStop := True
                  ),
                  if(
                    up(atmC) = Main,
                    valStop := True
                  )
                ),
                atmC := up(atmC)
              ),
              1000
            ),
            valBool
          ),
          do(
            atmGroup := rank(Count, Library),
            ForAtomTreeUnder(
              atmGroup,
              do(
                Sets,     
                if(
                  Or(
                    SubstrCount(Info(s), [Used to group atoms in a library]) = True,
                    CompareText(Name(up(s)), [Library])
                  ),
                  inc(valGroupCounter)           
                )
              ),
              1
            )
          )
        )
      ),
      
      FileTextWrite(
       concat(
        [CreateProgressTask(],
         sbo, [EDLoadAtomsGroupTask], sbc, [, ], 
         sbo, [Loading ], strLibName, [ Library Atoms], sbc, [, ],
         string(valGroupCounter), [, 1);]
       )
      ),
      
      valGroupCounter := 0,
      valCounter := 0,
      
      {**Create lib file**}
      Repeat(
        Content(Library),
        if(
          do(
            valBool := False,
            valStop := False,
            atmC := rank(Count, Library),
            LoopUntil(
              valStop,
              do(
                if(       
                  or(       
                    CompareText(Name(up(atmC)), strLibGroup),
                    CompareText(Name(atmC), strLibGroup)
                  ),
                  do(
                    if(
                      CompareText(Name(atmC), [AUTOLOADED]) = False,
                      valBool := True
                    ),
                    valStop := True
                  ),
                  if(
                    up(atmC) = Main,
                    valStop := True
                  )
                ),
                atmC := up(atmC)
              ),
              1000
            ),
            valBool
          ),
          do(
            atmGroup := rank(Count, Library),
            atmSubGroup := atmGroup,   
            strSubGroup := Name(atmGroup),     
            valGroup := SubstrCount(Info(atmGroup), [Used to group atoms in a library]) = True,
           
            if(
              And(
                Not(CompareText(strLibGroup, Name(atmGroup))),
                valGroup 
              ),
              
              {**Not at group level**}
              strDir := ExecString(Concat(strPathFunction, [(], sbo,  [Atoms\], strSubGroup, [\], sbc, [)])),
              strDir := ExecString(Concat(strPathFunction, [(], sbo,  [Atoms\], sbc, [)]))
            ),
            
            if(      
              or(      
                CompareText(WorkDir, pdir([Work\])),
                Not(DirectoryExists(strDir))             
              ),
              
              {**Standard ED files**}
              do(
                valEDAtoms := True,
                strDir := [Pdir]
              ),
              do(
                strDir := strPathFunction,
                valEDAtoms := False
              )
            ),
            
            inc(valGroupCounter),
            FileTextWrite([]),
            FileTextWrite([]),
            FileTextWrite(
              concat(
                [SetTaskProgress(],
                sbo, [EDLoadAtomsGroupTask], sbc, [, ], 
                string(valGroupCounter), [, ],
                sbo, [Group: ], strSubGroup, sbc, [);]
              )
            ),      
            if(
              valGroup = True,
              do(           
                FileTextWrite(Concat([Library; ExecFile(Pdir(], sbo, [Atoms\Group.atm], sbc, [));], 
                 [ Set(Name(Last(Library)), ], sbo, strSubGroup, sbc, [);])),   
                 
                {**Count number atoms to load**}            
                
                valCounter := 0,
                ForAtomTreeUnder(
                  atmGroup,
                  do(
                    Sets,     
                    if(
                      and(
                        SubstrCount(Info(s), [Used to group atoms in a library]) = False,
                        SubstrCount(Info(up(s)), [Used to group atoms in a library]) = True,
                        CompareText(Name(s), [Kernel Functions]) = False
                      ),
                      inc(valCounter)           
                    )
                  )
                ),
                if(
                  valCounter > 0,
                  do(
                    FileTextWrite(
                     concat(
                      [CreateProgressTask(],
                       sbo, [EDLoadAtomsTask], sbc, [, ], 
                       sbo, [Loading ], strSubGroup, [ Atoms], sbc, [, ],
                       string(valCounter), [, 0);]
                     )
                    )
                  )
                ),         
                valCounter := 0,
                  
                {**Use each atom without content separately**}
                ForAtomTreeUnder(
                  atmGroup,
                  do(
                    Sets,     
                    Case(
                      WhichIsTrue(
                        CompareText(Name(s), [Kernel Functions]) = True,
                        SubstrCount(Info(s), [Used to group atoms in a library]) = True,        {**Group atom**}                        
                        SubstrCount(Info(up(s)), [Used to group atoms in a library]) = True     {**Up is group atom this atom not**}
                      ),
                      do(
                        [Nothing]
                      ),
                      do(                               
                        atmSubGroup := s,
                        strSubGroup := Name(atmSubGroup), 
                        LoopUntil(
                          atmSubGroup = atmGroup,
                          do(
                            atmSubGroup := up(atmSubGroup),
                            strSubGroup := Concat(Name(atmSubGroup), [\], strSubGroup)                    
                          )
                        ),   
                        atmSubGroup := s,             
                         
                        FileTextWrite([]),    
                        inc(valGroupCounter),        
                        FileTextWrite(
                          concat(
                            [SetTaskProgress(],
                            sbo, [EDLoadAtomsGroupTask], sbc, [, ], 
                            string(valGroupCounter), [, ],
                            sbo, [Group: ], strSubGroup, sbc, [);]
                          )
                        ),                            
                        FileTextWrite(Concat([atomByName(], sbo, name(up(s)), sbc, [, library); ExecFile(Pdir(], sbo, [Atoms\Group.atm], sbc, [));], 
                         [ Set(Name(Last(atomByName(], sbo, name(up(s)), sbc, [, library))), ], sbo, Name(s), sbc, [);]))
                      ),                  
                      do(     
                        if(       
                          up(s) <> atmSubGroup,
                          
                          {**Atom in other subgroup**}
                          do(              
                            atmSubGroup := up(s),
                            strSubGroup := Name(atmSubGroup), 
                            LoopUntil(
                              atmSubGroup = atmGroup,
                              do(
                                atmSubGroup := up(atmSubGroup),
                                strSubGroup := Concat(Name(atmSubGroup), [\], strSubGroup)                    
                              )
                            ),                    
                            FileTextWrite(
                              concat(
                                [SetTaskProgress(],
                                sbo, [EDLoadAtomsGroupTask], sbc, [, ], 
                                string(valGroupCounter), [, ],
                                sbo, [Group: ], strSubGroup, sbc, [);]
                              )
                            ),
                            atmSubGroup := up(s)
                          )
                        ),            
                      
                        inc(valCounter),
                        FileTextWrite(
                          concat(
                           [SetTaskProgress(],
                            sbo, [EDLoadAtomsTask], sbc, [, ], 
                            string(valCounter), [, ],
                            sbo, Name(s), sbc, [);]
                          )
                        ),                
        
                        FileTextWrite(
                          concat(
                           [Set(t, ], strDir, [(],sbo, [Atoms\],
                           if(valEDAtoms = False, concat(strSubGroup, [\])), name(s),  [.atm], 
                           sbc, 
                           [)); atomByName(], sbo, Name(up(s)), sbc, [, library); ExecFile(t);]
                          )
                        )  
                      )  
                    )
                  )
                )
              ),
              
              {**Atoms are directly under library**}
              do(
                FileTextWrite(
                  concat(
                   [Set(t, ], strDir, [(], sbo, [Atoms\],
                   name(atmGroup), [.atm], sbc, 
                   [)); library; ExecFile(t);]
                  )
                )
              ) 
            )
          )
        )
      ),
      
      {**Add autoloaded**}
      FileTextWrite([]),
      FileTextWrite([]),
      FileTextWrite(
        Concat([library; ExecFile(Pdir(], sbo, [Atoms\Group.atm], sbc, [));], 
        [ Set(Name(Last(Library)), ], sbo, [AUTOLOADED], sbc, [);])
      ),
      
      {**Move SYSTEM atom back to end**}
      if(
        valRankSystem > 0,
        do(
          FileTextWrite(concat([Rank(rank(1, Library)) := ], string(valRankSystem),[;])), 
          Rank(rank(1, Library)) := valRankSystem 
        )
      ),
      
      {**Destroy progress bar**}
      FileTextWrite(
        concat(
         [DestroyProgressTask(],
          sbo, [EDLoadAtomsTask], sbc, [);]
        )
      ),
      FileTextWrite(
        concat(
         [DestroyProgressTask(],
          sbo, [EDLoadAtomsGroupTask], sbc, [);]
        )
      ), 
    
      DestroyProgressTask([SavingLibrary]),
      
      s := PopAtomPointer,
      FileClose
    )
  )
 ),
 msg([No license to save])
);

{**************************************************************************}
{{summary report}}
{creates the summary report}
do(
 processdocument(pdir([atoms/Summary.rtf]),workdir([Summary1.rtf])),
 displayeditor,
 displayeditorfile(workdir([Summary1.rtf]),1)
);

{**************************************************************************}
{{merge model dialog}} 
{Merge selected atom with model}
if(
 selectatom(model,model,[Select the atom into which to merge the model]),
 if(
  atomexists(a),
  do(
   set(t,makefilename(getfileopen(workdir([*.mod]),[model files (*.mod)|*.mod]),[.mod])),
   if(
    fileexists(t),
    do(
     waitcursor,
     DisplayLayers(0),  
     progressbarforopen(1, t),
     execfile(t),
     progressbarforopen(0),
     t := att([model Name],model),
     AtomTreeRefresh(1),
     normalcursor
    ),
    if(
     >(stringlength(t),0),
     msg([File does not exist],2)
    )
   )
  ),
  msg([Atom does not exist])
 )
);

{**************************************************************************}
{{show model in 2d}}
{Shows the model in the 2D modelView}
do(
 createmodelView(model)
);

{**************************************************************************}
{{destroy and recreate model atom}}
{Destroys the model and creates a new one}
do(
 { destroy model contents }
 if(
  AtomExists(model),
  DestroyAtom(model, True)
 ),
 { recreate model }
 if(
  not(atomexists(model)),createmodel),
  setattributes(1, model),
  setattributename(1, [model Name]),
  updatemodelname([Untitled]),
  sddb([t-nocreate], 1, model),
  AtomTreeRefresh(1)
);

{**************************************************************************}
{{destroy and recreate library atom}}
{Destroys the library and creates a new one}
do(
 if(
  atomexists(library),
  destroyatom(library)
 ),
 if(
  not(atomexists(library)),
  createlibrary
 ),
 sddb([t-nocreate],1,library)
);

{**************************************************************************}
{{graph of queue per atom}}
{Displays the queue graph}
if(
 >(content(model),0),
 do(
  initgraph(
   setgraphtitles([Queue Graph],[Contents of all model elements],[Queue]),
   setgraphtype(graphbar),
   setgraphdata(
    1,
    content(model),
    content(rank(gp,model)),
    name(rank(gp,model))
   ),
   displaygraph
  )
 ),
 msg([Nothing in model])
);

{**************************************************************************}
{{add to library}}
{Adds atoms to library}
do(
 displaywatches(0),
 library,
 set(t,getfileopen(workdir([*.atm]),[Atom files (*.atm)|*.atm|Library files (*.lbr)|*.lbr], 0, 1)),
 repeat(
  substrcount(t, [|]),
  do(
   library,
   set(gstring(1), StrSeperate(t, [|], count)),
   if(
    fileexists(gstring(1)),
    do(
     waitcursor,
     progressbarforopen(1, gstring(1)),
     execfile(gstring(1)),
     progressbarforopen(0),
     normalcursor,
     AtomTreeRefresh(1)
    ),
    if(
     >(stringlength(gstring(1)),0),
     msg([File does not exist],2)
    )
   )
  )
 )
);

{**************************************************************************}
{{replace library by new library}}
{destroys model and library and asks for a new library}
if(
 confirm([This option deletes current model and library. Continue without saving?]),
 do(
  kernelfnc([destroy and recreate model atom]),
  kernelfnc([destroy and recreate library atom]),
  kernelfnc([destroy and recreate model atom]),
  library,
  set(t,makefilename(getfileopen(workdir([*.lbr]),[Library files (*.lbr)|*.lbr]),[.lbr])),
  if(
   fileexists(t),
   do(
    waitcursor,
    execfile(t),
    normalcursor
   ),
   if(
    >(stringlength(t),0),
    msg([File does not exist],2)
   )
  )
 )
);

{**************************************************************************}
{{show submodel in 2d}}
{Shows the model from an atom}
if(
 =(selectatom(model,treeatom,[Select the atom to display]),1),
 do(
  createmodelLayout(a)
 )
);

{**************************************************************************}
{{queue graph}}
{Analyse the history and display the queue graph}
analysehistory(
 workdir([ed.his]),
 atomid(s),
 2,
 ddb([start],main),
 ddb([stop],main),
 0,
 do(
  initgraph(
   setgraphtitles(
    concat([Queue Graph of ],name(s)),
    concat([Time from ],string(ddb([start],main))),
    [Queue Length]
   ),
   setgraphtype(10),
   setgraphdata(
    1,
    hreccount,
    do(
     hrecread,
     hrectime
    ),
    string(hrectime),
    hreccontent
   ),
   if(>(hreccount,1),displaygraph,msg([no data],2))
  )
 )
);

{**************************************************************************}
{{status pie chart}}
{Analyse the history and display the status pie}
analysehistory(
 workdir([ed.his]),
 atomid(s),
 1,
 ddb([start],main),
 ddb([stop],main),
 0,
 do(
  sddb([v2],sum(hstatuscount,hstatusfreq(count)),s),
  initgraph(
   setgraphtype(graphpie),
   setgraphtitles(concat([Status overview of ],name(s)),[Overview of the different statuses as a percentage of total time],[])
  ),
  settable(countmatch(hstatuscount,1,>(hstatusfreq(count),0)),1,vtp(v)),
  repeat(
   nrows(vtp(v)),
   do(
    setcell(count,1,*(100,/(hstatusfreq(indexmatchrank(hstatuscount,1,>(hstatusfreq(count),0),count)),ddb([v2],s))),vtp(v)),
    setcell(count,0,concat(cell(-(indexmatchrank(hstatuscount,1,>(hstatusfreq(count),0),count),1),1,atombyname([Statuslist],library)),[: ],string(round(cell(count,1,vtp(v)),2)),[%]),vtp(v))
   )
  ),
  setgraphdata(1,nrows(vtp(v)),cell(gp,1,vtp(v)),cell(gp,0,vtp(v),2)),
  displaygraph
 )
);

{**************************************************************************}
{{status bar graph}}
{Analyse the history and display the bar graph}
analysehistory(
 workdir([ed.his]),
 atomid(s),
 1,
 ddb([start],main),
 ddb([stop],main),
 0,
 do(
  sddb([v2],sum(hstatuscount,hstatusfreq(count)),s),
  initgraph( 
   setgraphtitles(
    concat([Status overview of ],name(s)),
     [overview of the different statuses as a percentage of total time],
     []
   ),
   setgraphtype(graphbar),
   setgraphdata(
    1,
    countmatch(hstatuscount,1,>(hstatusfreq(count),0)),
    *(100,/(hstatusfreq(indexmatchrank(hstatuscount,1,>(hstatusfreq(count),0),gp)),ddb([v2],s))),
    cell(-(indexmatchrank(hstatuscount,1,>(hstatusfreq(count),0),gp),1),1,atombyname([Statuslist],library))   
   ),
   displaygraph
  )
 )
);

{**************************************************************************}
{{queue histogram}}
{Analyse the history and display the queue histogram}
analysehistory(
 workdir([ed.his]),
 atomid(s),
 2,
 ddb([start],main),
 ddb([stop],main),
 0,
 do(
  sddb([v2],sum(hqueuecount,hqueuefreq(count)),s),
  initgraph(
   setgraphtitles(
    concat([Queue Histogram of ],name(s)),
     [Queue length],
     [Percentage of total time]
   ),
   setgraphtype(graphbar),
   setgraphdata(
    1,
    hqueuecount,
    *(100,/(hqueuefreq(gp),ddb([v2],s))),
    string(-(gp,1))
   ),
   displaygraph
  )
 )
);

{**************************************************************************}
{{waittime histogram}}
{Analyse the history and display the waittime histogram}
analysehistory(
 workdir([ed.his]),
 atomid(s),
 2,
 ddb([start],main),
 ddb([stop],main),
 do(
  sddb([v3],inputnum(round(/(avgstay(s),10)),[Intervalsize in seconds],1,10000000,3),s),
  ddb([v3],s)
 ),
 do(
  sddb([v2],sum(hwaitintcount,hwaitintfreq(count)),s),
  initgraph(
   setgraphtitles(
    concat([Waittime Histogram of ],name(s)),
     [Wait Time Interval],
     [Percentage of atoms that waited a certain time]
   ),
   setgraphtype(graphbar),
   setgraphdata(
    1,
    hwaitintcount,
    *(100,/(hwaitintfreq(gp),ddb([v2],s))),
    concat([until ],string(*(gp,ddb([v3],s))))
   ),
   sddb([v3],0),
   displaygraph
  )
 )
);

{**************************************************************************}
{{load sound dialog}}
{Opens a fileopen dialog and registers the wav}
do(
 set(t,[]),
 set(t,getfileopen(pdir([media\sounds\*.wav]),[Wave files (*.wav)|*.wav])),
 if(
  fileexists(t),
  do(
   play(t),
   if(
    confirm([Register this sound?]),
    registervrsound(
     t,
     inputtext(extractname(t),[Enter sound name],1,30)
    )
   )
  ),
  if(
   stringlength(t) > 0,
   msg([File does not exist],2)
  )
 )
);

{**************************************************************************}
{{load tvr dialog}}
{Opens a fileopen dialog and registers the 3Dmodel}
do(
 set(t,[]),
 set(t,getfileopen(pdir([media\tvr\*.tvr;*.wrl]),[Tvr files (*.tvr)|*.tvr|VRML files (*.wrl)|*.wrl|All files (*.tvr,*.wrl,*.dxf,*.stl)|*.tvr;*.wrl;*.dxf;*.stl])),
 if(
  fileexists(t),
  registervricon(
   t,
   inputtext(extractname(t),[Enter vr icon name],1,30)
  ),
  if(
   stringlength(t) > 0,
   msg([File does not exist],2)
  )
 )
);

{**************************************************************************}
{{new model create}}
{closes and destroys the model and creates a new one}
do(
 kernelfnc([before close dialog]),
 if(
  <>(v,2),
  do(
   kernelfnc([destroy and recreate model atom]),
   kernelfnc([create model])
  )
 )
);


{**************************************************************************}
{{save atom}}
{Saves the atom}
{you should set variable t and s in advance}
do(
 waitcursor,
 if(
  GetPreference([createBakFile]),
  {create backup file}
  kernelfnc([create backup file])
 ),
 fileopen(t, GetPreference([SaveBinary])),
 fileclear,
 foratomtreeunder(s,saveatom,1),
 foratomtreeunder(s,saveatomconnect,false),
 savefinish,
 fileclose,
 normalcursor
);

{**************************************************************************}
{{upload files to internet}}
{Open a save routine and upload these files to an ftp site}
do(
 t := getfilesave,
 if(
  fileexists(t),
  do(
   setlabel([uploadURL],inputtext([ftp.],[Name of FTP site],1,100),main),
   setlabel([uploadUserName],inputtext([],[Username],1,100),main),
   setlabel([uploadPassWord],inputtext([],[Password],1,100),main),
   DisplayTracer,
   upload(
    label([uploadURL],main,2),
    label([uploadUserName],main,2),
    label([uploadPassWord],main,2),
    concat(inputtext([mydir/],[Directory on ftp site],1,100),extractname(t)),
    t
   )
  )
 )
);

{**************************************************************************}
{{vr model with create}}
{displays the VR view and allow atom drag-drop}
do(
 display3d(
  selectatom(model,model,[Select atom]),0,[VR view],[do(animatom,execonuser)],1,
  [
   do(
    set(t,simplifyname),
    if(
     ddb([t-nodestroy],treeatom),
     createatomcopy(
      treeatom,
      dispatom,
      concat(
       t,
       string(content(dispatom))
      )
     ),
     if(
      ddb([t-nocreate],treeatom),
      msg([This atom is not intended to be dragged into the model],1),
      createatom(
       treeatom,
       dispatom,
       concat(
        t,
        string(+(content(dispatom),1))
       )
      )
     )
    ),
    setloc(dropx,dropy,0)
   )
  ]
 ),
 viewz := 1.8,
 scale := 10000,
 vrfar := 10000,
 vrnear := 0.1,
 fov := 60
);

{**************************************************************************}
{{show atom editor}}
{displays the atom editor}
do(
  Var([valTreeForm], vbValue, 0),
  valTreeForm := FindTreeForm(2),
  if(valTreeForm = -1,
    ShowAtomTree(Main, 1, [Atom Editor], 0, WindowHeight(Application) + 2, 830, 600, 200, PDir([Apps\AtomEditor.btn]), 
      [do(
         TreeAtom,
         if(DdbNotEmptyCount > 0,
           Edit(
             SetEditStyle(Name, 100, 250, 50, 200, 500, 10),
             Repeat(
               DdbNotEmptyCount,
               Ef([ddbtex], 0, DdbNotEmptyName(Count), DdbNotEmptyName(Count))
             )
           ),
           Msg([This atom contains no labels.], 1)
         )
       )
      ]),
    BringToFront(TreeForm(valTreeForm))
    )
);

{**************************************************************************}
{{load dxf dialog}}
{Opens a fileopen dialog and registers the dxf}
do(
 set(t, getfileopen(pdir([media\CAD\*.dxf]),[Drawing Interchange File (*.dxf)|*.dxf],0)),
 if(
  fileexists(t),
  registericon(t, t)
 )
);

{**************************************************************************}
{{load cadimportwizard dialog}}
{Opens the CAD Import Wizard}
do(
 Showcadimportwizard
);

{**************************************************************************}
{{show sublayout}}
{Shows the model from an atom}
{executes KernelFnc([show submodel in 2d])}
KernelFnc([show submodel in 2d]);

{**************************************************************************}
{{create backup file}}
{creates a file from .bak}
if(
 filesize(t) > 0,
 filecopy(t, concat(t, [.bak]))
);

{**************************************************************************}
{{save tree atom}}
{Save TreeAtom to Atoms dir with the same name}
do(
  var([atmSave], vbAtom),
  var([atmGroup], vbAtom),
  var([strDir], vbString),
  var([strDir1], vbString),
  var([valStop], vbValue, False),
  var([valBool], vbValue, False),
  var([atmC], vbAtom),
  
  atmSave := TreeAtom,
  atmC := atmSave,
  if(
    and(      
      atomexists(atmSave, Library),
      do(
        LoopUntil(
          valStop,
          do(
            if(       
              or(       
                CompareText(Name(up(atmC)), [Library]),
                CompareText(Name(atmC), [Library])
              ),
              do(
                valBool := true,
                valStop := True
              ),
              if(
                up(atmC) = Main,
                valStop := True
              )
            ),
            atmC := up(atmC)
          ),
          1000
        ),
        valBool
      ),
      SubstrCount(Info(atmSave), [Used to group atoms in a library]) = False,    {**Not group atom**}
      or(
        SubstrCount(Info(up(atmSave)), [Used to group atoms in a library]) = True,  {**Up is group atom**}
        up(atmSave) = Library
      )
    ),
    do(  
      waitcursor,
      atmGroup := up(atmSave),
      strDir := [],
      
      if(
        CompareText(WorkDir, pDir([Work\])),
        
        {**Workdir set to standard workdir, save in pdir/atoms**}
        strDir := pDir([Atoms\]),
        
        {**Workdir set to custom workdir, save workdir/atoms**}  
        do(       
          LoopUntil(
            atmGroup = Library,
            do(          
              strDir := Concat(Name(atmGroup), [\], strDir),
              atmGroup := up(atmGroup)
            ), 
            1000
          ),      
          
          if( 
            not(DirectoryExists(WorkDir(Concat([Atoms\], strDir)))),
            
            {**Create directory**}
            do(
              strDir1 := WorkDir([Atoms\]),
              if( 
                not(DirectoryExists(StrDir1)),
                CreateDirectory(strDir1)
              ), 
              Repeat(
                SubstrCount(strDir, [\]), 
                do(
                  StrDir1 := Concat(StrDir1, StrSeparate(strDir, [\], Count), [\]),
                  if( 
                    not(DirectoryExists(StrDir1)),
                    CreateDirectory(strDir1)
                  )              
                )
              ),          
              strDir := strDir1
            ),
            strDir := WorkDir(Concat([Atoms\], strDir))
          )
        )
      ),
      
      fileopen(Concat(strDir, name(atmSave), [.atm])),
      fileclear,
      foratomtreeunder(atmSave, saveatom, 1),
      foratomtreeunder(atmSave, saveatomconnect, false),
      savefinish,
      fileclose,
      msg(concat([The atom ], name(atmSave), [ is saved in: ], strDir)),
      normalcursor
    )
  ),
  strDir
);

{**************************************************************************}
{{display library tree}}
  do(
    Var([valTreeForm], vbValue, 0),
    valTreeForm := FindTreeForm(0),
    if(valTreeForm = -1,
      ShowAtomTree(Library, 0, [Library Tree], 0, WindowHeight(Application) + 2, 200, 500, 200, PDir([Apps\LibraryTree.btn])),
      BringToFront(TreeForm(valTreeForm))
    )
  );

{**************************************************************************}
{{display model tree}}
do(
    Var([valTreeForm], vbValue, 0),
    valTreeForm := FindTreeForm(1),
    if(valTreeForm = -1,
      ShowAtomTree(Model, 0, [Model Tree], 0, WindowHeight(Application) + 2, 200, 500, 200, PDir([Apps\ModelTree.btn]), [ExecOnUser(TreeAtom)]),
      BringToFront(TreeForm(valTreeForm))
    )
);

{**************************************************************************}
{{create atom in model}}
do(
 if(
  atomexists(atombyname(t,library)),
  do(
   sets,
   if(
    atomexists(animatom),
    if(
     ddb([t-nodestroy],s),
     createatomcopy(s,up(animatom),concat(t,string(+(content(up(animatom)),1)))),
     createatom(s,up(animatom),concat(t,string(+(content(up(animatom)),1))))
    ),
    if(
     ddb([t-nodestroy],s),
     createatomcopy(s,model,concat(t,string(+(content(model),1)))),
     createatom(s,model,concat(t,string(+(content(model),1))))
    )
   ),
   sets,
   if(
    atomexists(prev(s)),
    setloc(+(xloc(prev(s)),+(xsize(prev(s)),1)),yloc(prev(s)),0,s),
    if(
     atomexists(next(s)),
     setloc(-(xloc(next(s)),+(xsize(s),1)),yloc(next(s)),0,s),
     setloc(10,0,0,s)
    )
   ),
   set(
    viewx,
    xloc(s) - ViewWidth * 0.5 + xsize(s) * 0.5
   ),
   set(
    viewy,
    yloc(s) - ViewHeight * 0.5 + ysize(s) * 0.5
   ) 
  ),
  msg(concat([First add atom ],atomversion(t),[ to the library.]),1)
 )
);

{**************************************************************************}
{{setup 2d3d window}}
do(
 set(scale,15),
 set(viewx,-2),
 set(viewy,-1)
);

{**************************************************************************}
{{show model in vr}}
do(
 display3d(s,0,[VR view],[do(animatom,execonuser)],1,
  [
    do(
     set(t,simplifyname),
     if(
      ddb([t-nodestroy],treeatom),
      createatomcopy(
       treeatom,
       dispatom,
       concat(
        t,
        string(content(dispatom))
       )
      ),
      if(
       ddb([t-nocreate],treeatom),
       msg([This atom is not intended to be dragged into the model],1),
       createatom(
        treeatom,
        dispatom,
        concat(
         t,
         string(+(content(dispatom),1))
        )
       )
      )
     ),
     setloc(dropx,dropy,0)
    )
  ]
  ),
  set(anglexy,47),
  set(anglez,63),
  set(scale,4),
  set(viewx,26),
  set(viewy,0),
  set(viewz,2),
  vrfar:=10000,
  vrnear:=0.1,
  fov:=60,
  vrlight(0,colorwhite,-10*cos(anglexy),10*sin(anglexy),3,0),
  vrlight(1,colorwhite,viewerx,viewery,viewerz+30,1),
  vrshading:=1
);

{**************************************************************************}
{{execonuser}}
do(
 set(t,t),
 if(
  atomexists(atombyname(t,case(v,library,model))),
  execonuser,
  msg(concat([First add atom ],t,[ to the ],case(v,[library.],[model.])),1)
 )
);

{**************************************************************************}
{{open new model}}
do(
 KernelFnc([new model]),
 if(
  not(IsmodelLayoutVisible),
  KernelFnc([create model])
 )
);

{**************************************************************************}
{{show experiment wizard}}
do
(
  guicreate([frmExpwiz],[ExpWizForm],0,refExperimentSupport,0,1)
);

{**************************************************************************}
{{analyze experiment results}}
do
(
  Guicreate([frmAnalyzeWiz],[AnalyzeWizForm],0,refExperimentSupport,0,1)
);

{**************************************************************************}
{{load model}}
do(
 stop,
 waitcursor,
 progressbarforopen(1, t),
 ExecmodelFile(t),
 updatemodelname(t),
 if(
  not(Label([samplemodel], model)),
   KernelFnc([display model tree])
 ),
 progressbarforopen(0),
 if (not(IsmodelLayoutVisible),
  kernelfnc([create model])
 ),
 UpdatemodelLayouts,
 AtomTreeRefresh(1),
 normalcursor
);

{**************************************************************************}
{{display atom editor}}
Do(
 KernelFnc([show atom editor])
);

{**************************************************************************}
{{create preregister file}}
Do(
  var([strLibName], vbString),
  var([valSelectAtoms], vbValue),
  var([valCounter], vbValue),
  var([atmGroup], vbAtom),
  var([strFileName], vbString), 
  var([strName], vbString),
  var([strParMin], vbString),
  var([strParMax], vbString),  
  var([strCode], vbString),
  var([valFunctions], vbValue),
  var([valBegin], vbValue),
  var([valEnd], vbValue),
  var([strLine], vbString),
  var([strFnc], vbString),    
  var([strGroup], vbString),
  var([valStop], vbValue, False),
  var([valBool], vbValue, False),
  var([atmC], vbAtom),
  var([strDir], vbString),
  
  {**Show message box to get library name**}  
  if(
    CompareText(WorkDir, pdir([Work\])) = 0,
    strLibName := StrSeparate(WorkDir, [\], SubstrCount(WorkDir, [\])),
    strLibName := []
  ),
  
  strLibName := InputText(strLibName, [Please give name of library], 1, 50),
  
  if(
    StringLength(strLibName) >= 1,
    do(

      CreateProgressTask([SavingLibrary], [Saving Preregister File]),  
      if(
        CompareText(WorkDir, pdir([Work\])),
        strFileName := pDir(Concat([Libs\], strLibName, [_Preregister.4ds])),  
        strFileName := WorkDir(Concat([Libs\], strLibName, [_Preregister.4ds]))
      ),
      strGroup := [Library], {**Update this to specific name to only save a part of the library**}
    
      SetTaskProgress([SavingLibrary], 1, [Saving Preregister Functions]),
      
      {**Create directory**}
      strDir := Concat(ExtractDir(strFileName), [\]),
      if( 
        not(DirectoryExists(strDir)),        
        do( 
          CreateDirectory(strDir)
        )
      ),
    
      if(
        FileExists(strFileName),
        DeleteFile(strFileName)
      ),
      FileOpen(strFileName),
      
      PushAtomPointer(s),
    
      Repeat(
        Content(Library),
        if(
          do(
            valBool := False,
            valStop := False,
            atmC := rank(Count, Library),
            LoopUntil(
              valStop,
              do(
                if(       
                  or(       
                    CompareText(Name(up(atmC)), strGroup),
                    CompareText(Name(atmC), strGroup)
                  ),
                  do(
                    valBool := true,
                    valStop := True
                  ),
                  if(
                    up(atmC) = Main,
                    valStop := True
                  )
                ),
                atmC := up(atmC)
              ),
              1000
            ),
            valBool
          ),
          
          do(
            atmGroup := rank(Count, Library),
            ForAtomTreeUnder(
              atmGroup,
              do(
                Sets,
                
                {**Function in function editor**}
                valCounter := 1,
                While(
                  StringLength(FunctionOnAtomName(s, valCounter)) > 0,  
                  do(
                    strFnc := concat([PreregisterFunction(], sbo, 
                     FunctionOnAtomInfo(s, valCounter, [name]), sbc, [, ],
                     string(FunctionOnAtomInfo(s, valCounter, [MinParams])), [, ], 
                     string(FunctionOnAtomInfo(s, valCounter, [MaxParams])), [);]),
                    FileTextWrite(strFnc),
                    Inc(valCounter)             
                  )
                ),
                              
                {**Function in oninit**}
                strCode := Lowercase(OnInit(s)),
                valFunctions := SubstrCount(strCode, [ registerfunction]),
                Repeat(
                  valFunctions,
                  do(
                    strLine := StrSeparate(strCode, [ registerfunction(], Count + 1),
                    valBegin := StringPos(sbo, strLine),
                    valEnd := StringPos(sbc, strLine), 
                    strName := StringCopy(strLine, valBegin + 1, ValEnd - valBegin - 1),
                    strParMin := StripString(StrSeparate(strLine, [,], 3)),
                    strParMax :=  StripString(StrSeparate(strLine, [,], 4)),
                    strFnc := concat([PreregisterFunction(], sbo, strName, sbc, [, ], strParMin, [, ], strParMax, [);]),
                    FileTextWrite(strFnc)
                  )
                ),
                
                valFunctions := SubstrCount(strCode, [ preregisterfunction]),
                Repeat(
                  valFunctions,
                  do(
                    strLine := StrSeparate(strCode, [ preregisterfunction(], Count + 1),
                    valBegin := StringPos(sbo, strLine),
                    valEnd := StringPos(sbc, strLine), 
                    strName := StringCopy(strLine, valBegin + 1, ValEnd - valBegin - 1),
                    strParMin := StripString(StrSeparate(strLine, [,], 2)),
                    strParMax :=  StripString(StrSeparate(StrSeparate(strLine, [,], 3), [)], 1)),
                    
                    strFnc := concat([PreregisterFunction(], sbo, strName, sbc, [, ], strParMin, [, ], strParMax, [);]),
                    FileTextWrite(strFnc)
                  )
                )
              ),
              1
            )
          )
        )
      ),
    
      DestroyProgressTask([SavingLibrary]),
      
      s := PopAtomPointer,
      FileClose
    )
  )
);

{**************************************************************************}
{ VIEWER FUNCTIONS }
{**************************************************************************}

{**************************************************************************}
{{viewer new model}}
{Closes the model and creates a new one}
do(
 if(
  <>(v,2),
  do(
   { Close and clear model related windows }
   Close(editwin),
   CloseInfoWindows,
   TraceClear,
   Close(ErrorTracer),

   KernelFnc([viewer destroy and recreate model atom]),
   
   { clear all layers }
   RemoveLayers,
   
   { reset viewing coordinates of 2d }
   set(viewx, -2),
   set(viewy, -1),
   set(scale, 15),
   
   { remove background }
   Set2DBackground(False),
   
   { update gui's }
   UpdatemodelLayouts,
   a := model
  )
 )
);

{**************************************************************************}
{{viewer create model}}
{creates the viewer model layout}
do(
 createviewermodelLayout(model)
);

{**************************************************************************}
{{load new viewer model dialog}}
{Displays the new model dialog and returns t}
do(
 if(
  <>(v,2),
  do(
   var([strFile], vbString),
   set(t,makefilename(getfileopen(moddir([*.mod]),[model files (*.mod)|*.mod|All files (*.*)|*.*]),[.mod])),
   strFile := t,
   if(
    not(fileexists(t)),
    if(
     >(stringlength(t),0),
     msg([File does not exist],2)
    ),
    { else }
    do(
	KernelFnc([viewer destroy and recreate model atom]),
     t := strFile,
     if(
      v <> 2,
      KernelFnc([viewer load model])
     )
    )
   )
  )
 )
);

{**************************************************************************}
{{show viewer model in 2d}}
{Shows the model in the 2D modelView}
do(
 createviewermodelView(model)
);

{**************************************************************************}
{{show viewer model in 3d}}
{Shows the model in the 3D View}
do(
  createviewer3DmodelView(model)
);

{**************************************************************************}
{{viewer load model}}
do(
 stop,
 waitcursor,
 progressbarforopen(1, t),
 ExecmodelFile(t),
 updatemodelname(t),
 close(2d3d),
 closeinfowindows,
 processmessages,
 KernelFnc([viewer create model]),
 progressbarforopen(0),
 if (not(IsmodelLayoutVisible),
  kernelfnc([viewer create model])
 ),
 UpdatemodelLayouts,
 normalcursor
);

{**************************************************************************}
{{viewer destroy and recreate model atom}}
{Destroys the viewer model and creates a new one}
do(
 { destroy model contents }
 if(
  AtomExists(model),
  DestroyAtom(model, True)
 ),
 { recreate model }
 if(
  not(atomexists(model)),createmodel),
  setattributes(1, model),
  setattributename(1, [model Name]),
  updatemodelname([Untitled]),
  sddb([t-nocreate], 1, model)
);