

{Preregister functions}

PreregisterFunction([Histogram_Initialize], 1, 1);
PreregisterFunction([Histogram_SetSegmentColor], 3, 3);
PreregisterFunction([Histogram_SetSegmentScore], 3, 3);
PreregisterFunction([Histogram_Animate2D], 1, 1);
PreregisterFunction([Histogram_SetSegmentName], 3, 3);
PreregisterFunction([Histogram_GetSegmentColor], 2, 2);
PreregisterFunction([Histogram_GetSegmentScore], 2, 2);
PreregisterFunction([Histogram_IncreaseSegmentScore], 3, 3);
PreregisterFunction([Histogram_DecreaseSegmentScore], 3, 3);
PreregisterFunction([Histogram_UseDefaultColours], 1, 1);
PreregisterFunction([Histogram_GuiDataTypeAndRangeValidation], 1, 1);
PreregisterFunction([Histogram_GuiApplyChanges], 1, 1);
PreregisterFunction([Histogram_GetSegmentName], 2, 2);
PreregisterFunction([Histogram_StartCollectingStatusInformation], 1, 1);
PreregisterFunction([Histogram_DeleteSegment], 2, 2);
PreregisterFunction([Histogram_DetermineScores], 1, 1);
PreregisterFunction([Histogram_GetSegmentCumulativeScore], 2, 2);
PreregisterFunction([Histogram_Animate3D], 1, 1);
PreregisterFunction([Histogram_GetGenerateSegmentRule], 1, 1);
PreregisterFunction([Histogram_GetGenerateColorRule], 1, 1);
PreregisterFunction([Histogram_VariableCodes], 1, 1);
PreregisterFunction([Histogram_CreateAliases], 1, 1);
PreregisterFunction([Histogram_DeleteAliases], 1, 1);
PreregisterFunction([Histogram_Init], 1, 1);
PreregisterFunction([Histogram_OnCreation], 1, 1);
PreregisterFunction([Histogram_RepairAliasOnPaste], 1, 1);
PreregisterFunction([Histogram_SetMaximumScore], 2, 2);
PreregisterFunction([Histogram_GetMaximumScore], 1, 1);
PreregisterFunction([Histogram_SetTextColor], 2, 2);
PreregisterFunction([Histogram_GetTextColor], 1, 1);
PreregisterFunction([Histogram_SetTextSizeTitle], 2, 2);
PreregisterFunction([Histogram_GetTextSizeTitle], 1, 1);
PreregisterFunction([Histogram_SetTextSizeLegend], 2, 2);
PreregisterFunction([Histogram_GetTextSizeLegend], 1, 1);
PreregisterFunction([Histogram_SetTitleVisible], 2, 2);
PreregisterFunction([Histogram_GetTitleVisible], 1, 1);
PreregisterFunction([Histogram_SetScoresVisible], 2, 2);
PreregisterFunction([Histogram_GetScoresVisible], 1, 1);
PreregisterFunction([Histogram_SetYAxisValuesVisible], 2, 2);
PreregisterFunction([Histogram_GetYAxisValuesVisible], 1, 1);
PreregisterFunction([Histogram_SetYAxisLinesVisible], 2, 2);
PreregisterFunction([Histogram_GetYAxisLinesVisible], 1, 1);
PreregisterFunction([Histogram_SetShowScoresBesidesLegend], 2, 2);
PreregisterFunction([Histogram_GetShowScoresBesidesLegend], 1, 1);
PreregisterFunction([Histogram_SetSegmentInBetweenSpace], 2, 2);
PreregisterFunction([Histogram_GetSegmentInBetweenSpace], 1, 1);
PreregisterFunction([Histogram_GetSegmentWidth], 1, 1);
PreregisterFunction([Histogram_SetSegmentWidth], 2, 2);
PreregisterFunction([Histogram_GetYAxisLinesColor], 1, 1);
PreregisterFunction([Histogram_SetYAxisLinesColor], 2, 2);
PreregisterFunction([Histogram_GetYAxisNumberOfValues], 1, 1);
PreregisterFunction([Histogram_SetYAxisNumberOfValues], 2, 2);
PreregisterFunction([Histogram_GetHistogramVisible], 1, 1);
PreregisterFunction([Histogram_SetHistogramVisible], 2, 2);
PreregisterFunction([Histogram_GetLegendVisible], 1, 1);
PreregisterFunction([Histogram_SetLegendVisible], 2, 2);
PreregisterFunction([Histogram_GetTextSizeYAxis], 1, 1);
PreregisterFunction([Histogram_SetTextSizeYAxis], 2, 2);
PreregisterFunction([Histogram_GetTextSizeScores], 1, 1);
PreregisterFunction([Histogram_SetTextSizeScores], 2, 2);
PreregisterFunction([Histogram_GetBorderColor], 1, 1);
PreregisterFunction([Histogram_SetBorderColor], 2, 2);
PreregisterFunction([Histogram_GetTitle], 1, 1);
PreregisterFunction([Histogram_SetTitle], 2, 2);
PreregisterFunction([Histogram_Setid], 2, 2);
PreregisterFunction([Histogram_Getid], 1, 1);
PreregisterFunction([Histogram_SetNumberOfSegments], 2, 2);
PreregisterFunction([Histogram_GetNumberOfSegments], 1, 1);
PreregisterFunction([Histogram_GetConnectingLineColor], 1, 1);
PreregisterFunction([Histogram_SetConnectingLineColor], 2, 2);
PreregisterFunction([Histogram_GetConnectingLineDotsColor], 1, 1);
PreregisterFunction([Histogram_SetConnectingLineDotsColor], 2, 2);
PreregisterFunction([Histogram_GetConnectingLineDotsRadius], 1, 1);
PreregisterFunction([Histogram_SetConnectingLineDotsRadius], 2, 2);
PreregisterFunction([Histogram_GetTotalScore], 1, 1);
PreregisterFunction([Histogram_SetTotalScore], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLineVisible], 1, 1);
PreregisterFunction([Histogram_SetCumulativeLineVisible], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLineColor], 1, 1);
PreregisterFunction([Histogram_SetCumulativeLineColor], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLineDotsColor], 1, 1);
PreregisterFunction([Histogram_SetCumulativeLineDotsColor], 2, 2);
PreregisterFunction([Histogram_SetNumberOfSegmentsDrawn], 2, 2);
PreregisterFunction([Histogram_GetNumberOfSegmentsDrawn], 1, 1);
PreregisterFunction([Histogram_SetCumulativeLineDotsRadius], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLineDotsRadius], 1, 1);
PreregisterFunction([Histogram_GetExpression], 1, 1);
PreregisterFunction([Histogram_SetExpression], 2, 2);
PreregisterFunction([Histogram_GetMonitorRefreshRate], 1, 1);
PreregisterFunction([Histogram_SetMonitorRefreshRate], 2, 2);
PreregisterFunction([Histogram_GetClassSize], 1, 1);
PreregisterFunction([Histogram_SetClassSize], 2, 2);
PreregisterFunction([Histogram_SetCreateAlias], 2, 2);
PreregisterFunction([Histogram_GetCreateAlias], 1, 1);
PreregisterFunction([Histogram_GetAliasesCreated], 1, 1);
PreregisterFunction([Histogram_SetAliasesCreated], 2, 2);
PreregisterFunction([Histogram_SetIncludeOutofRangeScore], 2, 2);
PreregisterFunction([Histogram_GetIncludeOutofRangeScore], 1, 1);
PreregisterFunction([Histogram_GetUseAtomName], 1, 1);
PreregisterFunction([Histogram_SetUseAtomName], 2, 2);
PreregisterFunction([Histogram_GetAliasName], 1, 1);
PreregisterFunction([Histogram_SetAliasName], 2, 2);
PreregisterFunction([Histogram_SetStartValue], 2, 2);
PreregisterFunction([Histogram_GetStartValue], 1, 1);
PreregisterFunction([Histogram_SetPredefinedMonitoring], 2, 2);
PreregisterFunction([Histogram_GetPredefinedMonitoring], 1, 1);
PreregisterFunction([Histogram_SetAutomaticScaling], 2, 2);
PreregisterFunction([Histogram_GetAutomaticScaling], 1, 1);
PreregisterFunction([Histogram_GetHeightBoundingBox], 1, 1);
PreregisterFunction([Histogram_SetHeightBoundingBox], 2, 2);
PreregisterFunction([Histogram_SetCumulativeLinewidth], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLinewidth], 1, 1);
PreregisterFunction([Histogram_SetCumulativeLineDotsVisible], 2, 2);
PreregisterFunction([Histogram_GetCumulativeLineDotsVisible], 1, 1);
PreregisterFunction([Histogram_SetLegendAtXAxisRotation], 2, 2);
PreregisterFunction([Histogram_GetLegendAtXAxisRotation], 1, 1);
PreregisterFunction([Histogram_SetLegendAtXAxis], 2, 2);
PreregisterFunction([Histogram_GetLegendAtXAxis], 1, 1);
PreregisterFunction([Histogram_SetConnectingLineDotsVisible], 2, 2);
PreregisterFunction([Histogram_GetConnectingLineDotsVisible], 1, 1);
PreregisterFunction([Histogram_SetConnectingLinewidth], 2, 2);
PreregisterFunction([Histogram_GetConnectingLinewidth], 1, 1);
PreregisterFunction([Histogram_SetConnectingLineVisible], 2, 2);
PreregisterFunction([Histogram_GetConnectingLineVisible], 1, 1);


{Atom: Histogram}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
Set(OnInit, [do( { This constant is set according to the number of statuses in the StatusList atom.   If you added statuses manually then change this constant to represent the number   of available statuses. } dim([Histogram_NUMBEROFSTATUSES], vbConstant, 33), { Define some columnnumber constants for the Histogram} dim([HISTOGRAM_COLUMNNUMBER_SEGMENTSCORE], vbValue, 1), dim([HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE], vbValue, 2), dim([HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR], vbValue, 3), dim([HISTOGRAM_COLUMNNUMBER_SEGMENTNAME], vbValue, 4),  { Event Code constants } dim([Histogram_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION], vbConstant, 2001), dim([Histogram_EVENTCODE_REFRESH], vbConstant, 2002))]);
int023([Histogram], 15793151, 48);
DefineFunction([Histogram_Initialize], [Histogram], 1, 1, [do( var([indexer], vbValue, 0), { Put all segment scores back to zero. } for(   indexer := 1, indexer <= Histogram_GetNumberOfSegments(p(1)), inc(indexer),   do(     Histogram_SetSegmentScore(p(1), indexer, 0),  {   if(       Histogram_GetPredefinedMonitoring(p(1)) = True,       Cell(indexer, 0, p(1)) := Histogram_GetStartValue(p(1)) + (indexer - 1) * Histogram_GetClassSize(p(1))     )}0   ) ),  { Put the maximum score back to zero } Histogram_SetMaximumScore(p(1), 0),  { Put the total score back to zero } Histogram_SetTotalScore(p(1), 0){, } { Put the number of segments back to zero }{ Histogram_SetNumberOfSegments(p(1), 0)})], [p(1) as HistogramResult: none. INitializes the diagram.], [Histogram_Initialize(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetSegmentColor], [Histogram], 3, 3, [cell(p(2), Histogram_COLUMNNUMBER_SEGMENTCOLOR, p(1)) := p(3)], [p(1) as Histogramp(2) as integer, Segment Indexp(3) as ColorResult: none. Sets the color for the specified Segment], [Histogram_SetSegmentColor(c, indexer, colorblue)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetSegmentScore], [Histogram], 3, 3, [do( if(  p(3) >= 0,  cell(p(2), Histogram_COLUMNNUMBER_SEGMENTSCORE, p(1)) := p(3),  do(   cell(p(2), Histogram_COLUMNNUMBER_SEGMENTSCORE, p(1)) := 0,   trace(    concat(     [The score of segment ],     string(p(2)),     [ has been set to zero because an attempt was made to set it to a value lower than zero. Histogram: ],     string(name),     [, Atomid: ],     String(atomid(p(1)))    )   ),   displaytracer  ) ),  { Check if this is the maximum score. } if(  p(3) > Histogram_GetMaximumScore(p(1)),  Histogram_SetMaximumScore(p(1), p(3))  ),  Histogram_DetermineScores(p(1)))], [p(1) as Histogramp(2) as integer, Segment Indexp(3) as double, ScoreResult: none. Sets the socre for the specified Segment], [Histogram_SetSegmentScore(c, indexer, 0.5)], 0, [Histogram.atm]);
DefineFunction([Histogram_Animate2D], [Histogram], 1, 1, [do( var([atmC], vbAtom, p(1)), var([indexer], vbValue, 0), var([degrees], vbValue, 0), var([offset], vbValue, 0), var([temp], vbValue, 0), var([xlocation], vbValue, 0), var([cumpercentage], vbValue, 0), {**Adjust segment width accordingly**} if(   Histogram_GetNumberOfSegments(atmC) > 0,   Histogram_SetSegmentWidth(atmC, (xSize(atmC) - 2 - Histogram_GetNumberOfSegments(atmC) * Histogram_GetSegmentInBetweenSpace(atmC)) / Histogram_GetNumberOfSegments(atmC)) ),  if(   Histogram_GetAutomaticScaling(atmC),   do(     Histogram_SetTextSizeTitle(atmC, Histogram_GetHeightBoundingBox(atmC) / 10),     Histogram_SetTextSizeLegend(atmC, Min(xSize(atmC), Histogram_GetHeightBoundingBox(atmC)) / 20),     Histogram_SetTextSizeScores(atmC, Min(xSize(atmC), Histogram_GetHeightBoundingBox(atmC)) / 20),     Histogram_SetTextSizeYAxis(atmC, Min(xSize(atmC), Histogram_GetHeightBoundingBox(atmC)) / 20)   ) ),  Histogram_SetHeightBoundingBox(atmC, ySize(atmC) - 2 * Histogram_GetTextSizeTitle(atmC)),   { The Diagram's Title } if(  Histogram_GetTitleVisible(atmC),  if(   Histogram_GetLegendAtXAxis(atmC) = False,   DrawText(    1,    Histogram_GetHeightBoundingBox(atmC),    StringLength(Histogram_GetTitle(atmC)) * Histogram_GetTextSizeTitle(atmC),    Histogram_GetTextSizeTitle(atmC) * 2,    Histogram_GetTitle(atmC),    Histogram_GetTextColor(atmC),    Histogram_GetTextSizeTitle(atmC),    [Arial],    0,    0,    0,    HA_LEFT + VA_TOP   ),   DrawText(    1,    - 2 * Histogram_GetTextSizeTitle(atmC),    StringLength(Histogram_GetTitle(atmC)) * Histogram_GetTextSizeTitle(atmC),    Histogram_GetTextSizeTitle(atmC) * 2,    Histogram_GetTitle(atmC),    Histogram_GetTextColor(atmC),    Histogram_GetTextSizeTitle(atmC),    [Arial],    0,    0,    0,    HA_LEFT + VA_TOP   )     ) ), { default View when not connected or no scores yet available. } if(  Histogram_GetMaximumScore(atmC) = 0,  do(   DrawRectangle(    1,    0,    xSize(atmC),    Histogram_GetHeightBoundingBox(atmC),    colorblack,    colorblack,    1   ),     { Return nothing to quit the function. }   return(0)  ) ),  { Y-Axis } if(  and(   Histogram_GetYAxisValuesVisible(atmC) = true,   Histogram_GetHistogramVisible(atmC) = true  ),  DrawLine(   1,   0,   1,   Histogram_GetHeightBoundingBox(atmC),   Histogram_GetBorderColor(atmC),    1  ) ),  { Y-Axis values. } if(  and(   Histogram_GetYAxisValuesVisible(atmC) = true,   Histogram_GetHistogramVisible(atmC) = true  ),  for(   indexer := 0, indexer <= Histogram_GetYAxisNumberOfValues(atmC), inc(indexer),   do(    DrawText(     - 10 * Histogram_GetTextSizeYAxis(atmC) - Histogram_GetTextSizeYAxis(atmC),     (Histogram_GetHeightBoundingBox(atmC) / Histogram_GetYAxisNumberOfValues(atmC)) * (Histogram_GetYAxisNumberOfValues(atmC) - indexer),     10 * Histogram_GetTextSizeYAxis(atmC),     2 * Histogram_GetTextSizeYAxis(atmC),     String((Histogram_GetMaximumScore(atmC)/Histogram_GetYAxisNumberOfValues(atmC)) * indexer, 0, 0),     Histogram_GetTextColor(atmC),     Histogram_GetTextSizeYAxis(atmC),     [Arial],     0,     0,     0,     HA_RIGHT + VA_TOP    ),        { The horizontal lines belonging to the individual values on the Y Axis. }    if(     Histogram_GetYAxisLinesVisible(atmC) = true,     DrawLine(      1,      (Histogram_GetHeightBoundingBox(atmC) / Histogram_GetYAxisNumberOfValues(atmC)) * (Histogram_GetYAxisNumberOfValues(atmC) - indexer),      2 + Histogram_GetNumberOfSegments(atmC) * (Histogram_GetSegmentWidth(atmC) + Histogram_GetSegmentInBetweenSpace(atmC)),      (Histogram_GetHeightBoundingBox(atmC) / Histogram_GetYAxisNumberOfValues(atmC)) * (Histogram_GetYAxisNumberOfValues(atmC) - indexer),      Histogram_GetYAxisLinesColor(atmC),       1     )    )   )  ) ),  if(  and(   Histogram_GetShowScoresBesidesLegend(atmC) = true,   Histogram_GetScoresVisible(atmC) = true  ),  offset := Histogram_GetTextSizeLegend(atmC) * 4 ),  if(  Histogram_GetYAxisValuesVisible(atmC) = true,  offset := offset + Histogram_GetTextSizeYAxis(atmC) * 4 ),  if(  Histogram_GetHistogramVisible(atmC) = false,  offset := -3 ), { Animation of the colored segments } for(  indexer := 1, indexer <= Histogram_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    true, {Histogram_GetSegmentScore(atmC, indexer) >= 0  >>> you don't want this, it gives a distorted animation, for statuses it's okay because            they don't have a logical order but for numbers it's a different case. }    do(     { ***************** SEGMENTS **************** }     if(      Histogram_GetHistogramVisible(atmC) = true,       DrawRectangle(        (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),        Histogram_GetHeightBoundingBox(atmC),        indexer * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),        Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        Histogram_GetSegmentColor(atmC, indexer),        Histogram_GetBorderColor(atmC),        1       )      ),             { ***************** SHOW CUMULATIVE LINE **************** }             if(       Histogram_GetCumulativeLineVisible(atmC),               do(        { LINE }        if(         indexer > 1,                 drawline(          (indexer - 2) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 2) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,          Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, (indexer - 1)) / Histogram_GetTotalScore(atmC)),          (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,          Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, indexer) / Histogram_GetTotalScore(atmC)),          Histogram_GetCumulativeLineColor(atmC),          Histogram_GetCumulativeLinewidth(atmC)         )                 ),                 { DOTS }        if(         Histogram_GetCumulativeLineDotsVisible(atmC) = True,         drawcircle(          (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,          Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, indexer) / Histogram_GetTotalScore(atmC)),          Histogram_GetCumulativeLineDotsRadius(atmC),          Histogram_GetCumulativeLineDotsColor(atmC),          Histogram_GetCumulativeLineDotsColor(atmC),          1         )        )       )      ),             { ***************** LEGEND AT X-AXIS **************** }             if(       and(         Histogram_GetLegendVisible(atmC) = True,         Histogram_GetLegendAtXAxis(atmC) = True       ),       { The name of the segment at the X-Axis }       DrawText(        { Slide the position of the x coordinate towards the left edge of the bar according to the degree of rotation. }        if(         Histogram_GetLegendAtXAxisRotation(atmC) > 45,          indexer * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) - Histogram_GetSegmentWidth(atmC) / 2,         indexer * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) - (Histogram_GetSegmentWidth(atmC) * ((90 - Histogram_GetLegendAtXAxisRotation(atmC)) / 90))        ),        Histogram_GetHeightBoundingBox(atmC),        Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))),        Histogram_GetTextSizeLegend(atmC) * 2,        String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC)),        Histogram_GetTextColor(atmC),        Histogram_GetTextSizeLegend(atmC),        [Arial],        0,        0,        Histogram_GetLegendAtXAxisRotation(atmC),        HA_LEFT + VA_TOP       )      ),     { ***************** LEGEND ************************ }     if(      and(       Histogram_GetLegendVisible(atmC) = True,       Histogram_GetLegendAtXAxis(atmC) = False      ),      do(       { The box for the color }       DrawRectangle(        -1 * Histogram_GetTextSizeLegend(atmC) - offset,        Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2),        -1 * offset,        Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 1),        Histogram_GetSegmentColor(atmC, indexer),        Histogram_GetBorderColor(atmC)       ),              { The name of the segment }       DrawText(        - 1 * Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))) - 1.5 * Histogram_GetTextSizeLegend(atmC) - offset,        Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2) - Histogram_GetTextSizeLegend(atmC) / 2.5,        Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))),        Histogram_GetTextSizeLegend(atmC) * 2,        String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC)),        Histogram_GetTextColor(atmC),        Histogram_GetTextSizeLegend(atmC),        [Arial],        0,        0,        0,        HA_RIGHT + VA_TOP       ),              if(        and(         Histogram_GetShowScoresBesidesLegend(atmC) = true,         Histogram_GetScoresVisible(atmC) = true        ),           DrawText(         -1 * offset + Histogram_GetTextSizeLegend(atmC),         Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2) - Histogram_GetTextSizeLegend(atmC) / 2.5,         Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, HISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC))),         Histogram_GetTextSizeLegend(atmC) * 2,         String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)),         Histogram_GetTextColor(atmC),         Histogram_GetTextSizeLegend(atmC),         [Arial],         0,         0,         0,         HA_LEFT + VA_TOP        )             )           )     )    )   )     ) ),  indexer := 0,  { The scores and the connecting line we do afterwards, else they might be overdrawn by the rectangles    for the segments scores. This happens because of the drawing order. } for(  indexer := 1, indexer <= Histogram_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    and(     Histogram_GetScoresVisible(atmC) = True,     Histogram_GetShowScoresBesidesLegend(atmC) = false,     Histogram_GetHistogramVisible(atmC) = true    ),    { ***************** SCORES ******************* }    DrawText(     (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),     Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)) - 2 * Histogram_GetTextSizeScores(atmC),     Histogram_GetTextSizeScores(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC))),     Histogram_GetTextSizeScores(atmC) * 2,     String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)),     Histogram_GetTextColor(atmC),     Histogram_GetTextSizeScores(atmC),     [Arial],     0,     0,     0,     HA_LEFT + VA_BOTTOM    )   ),        { ***************** CONNECTING LINE BETWEEN BARS ************************ }   if(    Histogram_GetConnectingLineVisible(atmC) = True,    do(     if(      Histogram_GetConnectingLineDotsVisible(atmC) = True,      { ***************** DOTS ************************ }      drawcircle(       (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,       Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),       Histogram_GetConnectingLineDotsRadius(atmC),       Histogram_GetConnectingLineDotsColor(atmC),       Histogram_GetConnectingLineDotsColor(atmC),       1      )     ),          { ***************** LINE ************************ }     if(      indexer > 1,          drawline(       (indexer - 2) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 2) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,       Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, (indexer - 1)) / Histogram_GetMaximumScore(atmC)),       (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,       Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),       Histogram_GetConnectingLineColor(atmC),       Histogram_GetConnectingLinewidth(atmC)      )     )    )   )  ) ))], [p(1) as Histogram], [Histogram_Animate2D(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetSegmentName], [Histogram], 3, 3, [cell(p(2), Histogram_COLUMNNUMBER_SEGMENTNAME, p(1)) := p(3)], [p(1) as Histogramp(2) as integer, Segment indexp(3) as string, Segment Name], [Histogram_SetSegmentName(c, indexer, [myname])], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentColor], [Histogram], 2, 2, [cell(p(2), Histogram_COLUMNNUMBER_SEGMENTCOLOR, p(1))], [p(1) as Histogramp(2) as integer, Segment indexResult: Color. The color pointer for the requested Segmetn index], [Histogram_GetSegmentColor(c, 3)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentScore], [Histogram], 2, 2, [cell(p(2), Histogram_COLUMNNUMBER_SEGMENTSCORE, p(1))], [p(1) as Histogramp(2) as integer, Segment indexResult: Double. The score for the segment with index p(2) of Histogram p(1)], [Histogram_GetSegmentScore(c, 3)], 0, [Histogram.atm]);
DefineFunction([Histogram_IncreaseSegmentScore], [Histogram], 3, 3, [do(  var([atmC], vbAtom, p(1)),  var([valClass], vbValue, p(2)),  var([newscore], vbValue, 0),      if(    {**Check if index is out of range**}    and(      valClass >= 1,      valClass <= Histogram_GetNumberOfSegments(atmC)    ),    do(                newscore := Histogram_GetSegmentScore(atmC, valClass) + p(3),      Histogram_SetSegmentScore(atmC, valClass, newscore)    ),    {**Check if out of range value may be added to lowest/highest class**}    if(      Histogram_GetIncludeOutofRangeScore(atmC),      do(          if(          valClass < 1,          valClass := 1,          valClass := Histogram_GetNumberOfSegments(atmC)        ),        newscore := Histogram_GetSegmentScore(atmC, valClass) + p(3),        Histogram_SetSegmentScore(atmC, valClass, newscore)      )    )  ))], [p(1) as Histogramp(2) as integer, Segment indexp(3) as double, the score to increase the current score with], [Histogram_IncreaseSegmentScore(c, indexer, 0.2)], 0, [Histogram.atm]);
DefineFunction([Histogram_DecreaseSegmentScore], [Histogram], 3, 3, [Histogram_SetSegmentScore( p(1), p(2), Histogram_GetSegmentScore(p(1), p(2)) - p(3))], [p(1) as Histogramp(2) as integer, Segment indexp(3) as double, the score to decrease the current score with], [Histogram_DecreaseSegmentScore(c, indexer, 0.2)], 0, [Histogram.atm]);
DefineFunction([Histogram_UseDefaultColours], [Histogram], 1, 1, [do( var([indexer], vbValue, 0), var([indexer2], vbValue, 0), var([cred], vbValue, 0), var([cgreen], vbValue, 0), var([cblue], vbValue, 0),  { We divide the number of segments in 5 ranges. Every range will vary one of the color components Red, Green or Blue.   This way we get smoothly changing colors from red to purple to blue to green to yellow. Some understanding of color profiles is assumed.} var([b1], vbValue, 0), var([b2], vbValue, 0), var([b3], vbValue, 0), var([b4], vbValue, 0), var([b5], vbValue, 0),  { Obtain the ranges borders depending on the number of segments } b1 := Round(Histogram_GetNumberOfSegments(p(1)) / 5 * 1), b2 := 2 * b1, b3 := 3 * b1, b4 := 4 * b1, b5 := 5 * b1,  { Define the default coloring of the segments. } for(  indexer2 := 1, indexer2 <= Histogram_GetNumberOfSegments(p(1)), inc(indexer2),    do(   indexer := mod(indexer2, 5),      if(    indexer = 0,    indexer := 5   ),      indexer := indexer / 5,    indexer := indexer * Histogram_GetNumberOfSegments(p(1)),   indexer := indexer - b1 + 1,   indexer := indexer + trunc(indexer2 / 5 - 1),   if(    indexer <= b1,    do(     cred := 255,     cgreen := 0,     cblue := indexer / b1 * 255    )   ),     if(    and(     indexer > b1,     indexer <= b2    ),    do(     cred := 255 - ((indexer - b1)/ (b2 - b1)) * 255,     cgreen := 0,     cblue := 255    )   ),       if(    and(     indexer > b2,     indexer <= b3    ),    do(     cred := 0,     cgreen := ((indexer - b2) / (b3 - b2)) * 255,     cblue := 255    )   ),      if(    and(     indexer > b3,     indexer <= b4    ),    do(     cred := 0,     cgreen := 255,     cblue := 255 - ((indexer - b3) / (b4 - b3)) * 255    )   ),        if(    and(     indexer > b4,     indexer <= b5    ),    do(     cred := ((indexer - b4) / (b5 - b4)) * 255,     cgreen := 255,     cblue := 0    )   ),     Histogram_SetSegmentColor(p(1), indexer2, RgbColor(cred, cgreen, cblue))  ) ))], [p(1) as HistogramResult: none. Use the defualt colors of the atom.], [Histogram_UseDefaultColours(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_GuiDataTypeAndRangeValidation], [Histogram], 1, 1, [do( var([PassCheck], vbValue, true), var([TextValue], vbString, 0), var([NumericValue], vbValue, 0), { First we do a DataType and DataRange validation before we really apply the changes...}  { TITLE } textvalue := GuiControl([ebTitle], GuiGet([Text])),  if(  StringLength(textvalue) = 0,  do(   passcheck := false,      msg([The title has to contain at least one character.]),   return(passcheck)  ) ),  { CLASS SIZE } textvalue := GuiControl([ebClassSize], GuiGet([Text])), numericvalue := Value(GuiControl([ebClassSize], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the class size is invalid.]),   return(passcheck)  ) ),   { TEXTSIZE TITLE }  textvalue := GuiControl([ebTextSizeTitle], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeTitle], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the title is invalid.]),   return(passcheck)  ) ), { TEXTSIZE LEGEND }  textvalue := GuiControl([ebTextSizeLegend], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeLegend], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the legend is invalid.]),   return(passcheck)  ) ), { TEXTSIZE SCORES }  textvalue := GuiControl([ebTextSizeScores], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeScores], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the scores is invalid.]),   return(passcheck)  ) ), { TEXTSIZE Y AXIS }  textvalue := GuiControl([ebTextSizeYAxis], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeYAxis], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the Y-Axis is invalid.]),   return(passcheck)  ) ), { HEIGHT BOUNDING BOX }  textvalue := GuiControl([ebHeightBoundingBox], GuiGet([Text])), numericvalue := Value(GuiControl([ebHeightBoundingBox], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the height of the bounding box is invalid.]),   return(passcheck)  ) ), { SEGMENT WIDTH }  textvalue := GuiControl([ebSegmentWidth], GuiGet([Text])), numericvalue := Value(GuiControl([ebSegmentWidth], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the width of a segment is invalid.]),   return(passcheck)  ) ),   { SEGMENT IN BETWEEN SPACE }  textvalue := GuiControl([ebSegmentInBetweenSpace], GuiGet([Text])), numericvalue := Value(GuiControl([ebSegmentInBetweenSpace], GuiGet([Text]))), if(  or(   IsNumeric(GuiControl([ebSegmentInBetweenSpace], GuiGet([Text]))) = false,   StringLength(textvalue) = 0,   numericvalue < 0  ),  do(   passcheck := false,      msg([The inserted value for the space in between segments is invalid.]),   return(passcheck)  ) ), { NUMBER OF VALUES Y-AXIS }  textvalue := GuiControl([ebYAxisNumberOfValues], GuiGet([Text])), numericvalue := Value(GuiControl([ebYAxisNumberOfValues], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the number of values on the Y-Axis is invalid.]),   return(passcheck)  ) ),  { CONNECTING LINE WIDTH }  textvalue := GuiControl([ebConnectingLinewidth], GuiGet([Text])), numericvalue := Value(GuiControl([ebConnectingLinewidth], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the width of the connecting line is invalid.]),   return(passcheck)  ) ),  { CONNECTING LINE DOTS RADIUS }  textvalue := GuiControl([ebConnectingLineDotsRadius], GuiGet([Text])), numericvalue := Value(GuiControl([ebConnectingLineDotsRadius], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the radius of the dots of the conecting line is invalid.]),   return(passcheck)  ) ), { CUMULATIVE LINE WIDTH }  textvalue := GuiControl([ebCumulativeLinewidth], GuiGet([Text])), numericvalue := Value(GuiControl([ebCumulativeLinewidth], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the width of the cumulative line is invalid.]),   return(passcheck)  ) ),  { CUMULATIVE LINE DOTS RADIUS }  textvalue := GuiControl([ebCumulativeLineDotsRadius], GuiGet([Text])), numericvalue := Value(GuiControl([ebCumulativeLineDotsRadius], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the radius of the dots of the cumulative line is invalid.]),   return(passcheck)  ) ),   { LEGEND AT X-AXIS ROTATION }  textvalue := GuiControl([ebLegendAtXAxisRotation], GuiGet([Text])), numericvalue := Value(GuiControl([ebLegendAtXAxisRotation], GuiGet([Text]))), if(  or(   IsNumeric(GuiControl([ebLegendAtXAxisRotation], GuiGet([Text]))) = False,   StringLength(textvalue) = 0,   numericvalue < 0,   numericvalue > 90  ),  do(   passcheck := false,      msg([The inserted value for the rotaiotn of the legend at the X-Axis is invalid. It should be between 0 and 90 degrees.]),   return(passcheck)  ) ), { If the check succeeds then apply the changes to the Histogram }{ if(  passcheck = true,  Histogram_GuiApplyChanges(p(1)) ), } return(passcheck))], [p(1) as HistogramResult: Boolean. Returns tru if the data validation succeeds else false ], [Histogram_GuiDataTypeAndRangeValidation(GuiAtom)], 0, [Histogram.atm]);
DefineFunction([Histogram_GuiApplyChanges], [Histogram], 1, 1, [do(   var([atmC], vbAtom, p(1)),    var([strNewAliasName], vbString),         {**Page 1: General**}   {**Naming**}   Name(atmC) := GuiControl([ebAtomName], GuiGet([Text])),     Histogram_SetCreateAlias(atmC, GuiControl([chkCreateAlias], GuiGet([Checked]))),  Histogram_SetUseAtomName(atmC, GuiControl([chkUseAtomName], GuiGet([Checked]))),  {**Postpone setting AliasName until aliases have been redefined**}   if(    Histogram_GetUseAtomName(atmC),    strNewAliasName := Name(atmC),    strNewAliasName := GuiControl([ebAliasName], GuiGet([Text]))  ),    {**Check if aliases should be created**}  if(   Histogram_GetAliasesCreated(atmC),   if(    Histogram_GetCreateAlias(atmC),    if(     CompareText(Histogram_GetAliasName(atmC), strNewAliasName),     { Nothing changes }     0,     { Function name has changed! }     do(      Histogram_DeleteAliases(atmC),      Histogram_SetAliasName(atmC, strNewAliasName),      Histogram_CreateAliases(atmC)     )    ),    { Alias existed but should be removed. }    Histogram_DeleteAliases(atmC)   ),   if(    Histogram_GetCreateAlias(atmC),    { No alias existed but it should be created. }    do(     Histogram_SetAliasName(atmC, strNewAliasName),     Histogram_CreateAliases(atmC),     { Backward compatibility: maybe this atom has been created in an earlier version of ED }     if(StringPos([Histogram_Init], OnInit(atmC)) = 0,      { We have to add it! }      if(       StringLength(OnInit(atmC)) = 0,       Set(OnInit(atmC), [Histogram_Init(c)]),       Set(OnInit(atmC), Concat([do(Histogram_Init(c),], OnInit(atmC))) { hope it's not a space! }           )     )    ),    { No alias existed and it doesn't need to be created either }    0   )  ),    { Maybe Create Aliases and Use Atom Name were unflagged but the user did change Alias Name }  Histogram_SetAliasName(atmC, strNewAliasName),       Histogram_SetTitle(   atmC,   GuiControl([ebTitle], GuiGet([Text]))  ),   {**Monitoring**}    Histogram_SetPredefinedMonitoring(   atmC,   GuiControl([chkMonitoring], GuiGet([Checked]))  ),    Histogram_SetExpression(   atmC,    GuiControl([smeVariableToMonitor], Guiget([String]))  ),   Histogram_SetMonitorRefreshRate(   atmC,    string(GuiControl([seRefreshRate], GuiGet([Code])))  ),   Histogram_SetStartValue(   atmC,    Value(GuiControl([ebStartValue], GuiGet([Text])))  ),    Histogram_SetClassSize(   atmC,    Value(GuiControl([ebClassSize], GuiGet([Text])))  ),   {**Page 2: Segments**}  SetExprAtt([CurrentSegmentRule], GuiControl([seGenerateSegments], GuiGet([String])), atmC),  SetExprAtt([CurrentSegmentColorRule], GuiControl([seGenerateColors], GuiGet([String])), atmC),    Histogram_SetSegmentWidth(   atmC,   Value(GuiControl([ebSegmentWidth], GuiGet([Text])))  ),    Histogram_SetSegmentInBetweenSpace(   atmC,   Value(GuiControl([ebSegmentInBetweenSpace], GuiGet([Text])))  ),   {**Page 3: Visualization**}    Histogram_SetTextColor(   atmC,   GuiControl([cpText], GuiGet([Color]))  ),    Histogram_SetBorderColor(   atmC,   GuiControl([cpBorder], GuiGet([Color]))  ),     if(    GuiControl([chkBackgroundColor], GuiGet([Checked])) = True,    do(      SetSetting(saFillOutline, True),      SetSetting(sa2DOutline, True)    ),    do(      SetSetting(saFillOutline, False),      SetSetting(sa2DOutline, False)    )  ),    Color(atmC) := GuiControl([cpBackground], GuiGet([Color])),    Histogram_SetYAxisLinesColor(   atmC,   GuiControl([cpYAxisLinesColor], GuiGet([Color]))  ),    Histogram_SetAutomaticScaling(   atmC,   GuiControl([cbAutomaticScaling], GuiGet([Checked]))   ),    {**Adjust xSize accordingly**}  if(    Histogram_GetNumberOfSegments(atmC) > 0,    xSize(atmC) := (Histogram_GetSegmentWidth(atmC) + Histogram_GetSegmentInBetweenSpace(atmC)) * Histogram_GetNumberOfSegments(atmC) + 2  ),     Histogram_SetHeightBoundingBox(   atmC,   Value(GuiControl([ebHeightBoundingBox], GuiGet([Text])))  ),   {**Update GUI**}  if(    Histogram_GetAutomaticScaling(atmC) = True,    do(          GuiControl(       [ebTextSizeTitle],        GuiSet([Text], String(Histogram_GetTextSizeTitle(atmC)))      ),            GuiControl(       [ebTextSizeLegend],        GuiSet([Text], String(Histogram_GetTextSizeLegend(atmC)))      ),            GuiControl(       [ebTextSizeScores],        GuiSet([Text], String(Histogram_GetTextSizeScores(atmC)))      ),           GuiControl(       [ebTextSizeYAxis],        GuiSet([Text], String(Histogram_GetTextSizeYAxis(atmC)))      )         )  ),  {**End Update GUI**}      Histogram_SetTextSizeTitle(   atmC,   Value(GuiControl([ebTextSizeTitle], GuiGet([Text])))  ),   {**Adjust ySize acoordingly**}  ySize(atmC) := Histogram_GetHeightBoundingBox(atmC) + 2 * Histogram_GetTextSizeTitle(atmC),    Histogram_SetTextSizeLegend(   atmC,   Value(GuiControl([ebTextSizeLegend], GuiGet([Text])))  ),    Histogram_SetTextSizeScores(   atmC,   Value(GuiControl([ebTextSizeScores], GuiGet([Text])))  ),   Histogram_SetTextSizeYAxis(   atmC,   Value(GuiControl([ebTextSizeYAxis], GuiGet([Text])))  ),   Histogram_SetYAxisNumberOfValues(   atmC,   Value(GuiControl([ebYAxisNumberOfValues], GuiGet([Text])))  ),    Histogram_SetTitleVisible(   atmC,   GuiControl([cbTitleVisible], GuiGet([Checked]))  ),   Histogram_SetLegendVisible(   atmC,   GuiControl([cbLegendVisible], GuiGet([Checked]))  ),    Histogram_SetScoresVisible(   atmC,   GuiControl([cbScoresVisible], GuiGet([Checked]))  ),   Histogram_SetHistogramVisible(   atmC,   GuiControl([cbHistogramVisible], GuiGet([Checked]))  ),   Histogram_SetShowScoresBesidesLegend(   atmC,   GuiControl([cbShowScoresBesidesLegend], GuiGet([Checked]))  ),   Histogram_SetYAxisLinesVisible(   atmC,   GuiControl([cbYAxisLinesVisible], GuiGet([Checked]))  ),   Histogram_SetYAxisValuesVisible(   atmC,   GuiControl([cbYAxisValuesVisible], GuiGet([Checked]))  ),   Histogram_SetConnectingLineColor(   atmC,   GuiControl([cpConnectingLineColor], GuiGet([Color]))  ),   Histogram_SetConnectingLineDotsColor(   atmC,   GuiControl([cpConnectingLineDotsColor], GuiGet([Color]))  ),   Histogram_SetConnectingLinewidth(   atmC,   Value(GuiControl([ebConnectingLinewidth], GuiGet([Text])))  ),   Histogram_SetConnectingLineDotsRadius(   atmC,   Value(GuiControl([ebConnectingLineDotsRadius], GuiGet([Text])))  ),   Histogram_SetConnectingLineVisible(   atmC,   GuiControl([cbConnectingLineVisible], GuiGet([Checked]))  ),   Histogram_SetConnectingLineDotsVisible(   atmC,   GuiControl([cbConnectingLineDotsVisible], GuiGet([Checked]))  ),   Histogram_SetCumulativeLineColor(   atmC,   GuiControl([cpCumulativeLineColor], GuiGet([Color]))  ),   Histogram_SetCumulativeLineDotsColor(   atmC,   GuiControl([cpCumulativeLineDotsColor], GuiGet([Color]))  ),   Histogram_SetCumulativeLinewidth(   atmC,   Value(GuiControl([ebCumulativeLinewidth], GuiGet([Text])))  ),   Histogram_SetCumulativeLineDotsRadius(   atmC,   Value(GuiControl([ebCumulativeLineDotsRadius], GuiGet([Text])))  ),   Histogram_SetCumulativeLineVisible(   atmC,   GuiControl([cbCumulativeLineVisible], GuiGet([Checked]))  ),   Histogram_SetCumulativeLineDotsVisible(   atmC,   GuiControl([cbCumulativeLineDotsVisible], GuiGet([Checked]))  ),    Histogram_SetLegendAtXAxis(   atmC,   GuiControl([cbLegendAtXAxis], GuiGet([Checked]))  ),   Histogram_SetLegendAtXAxisRotation(   atmC,   Value(GuiControl([ebLegendAtXAxisRotation], GuiGet([Text])))  ),   UpdateAnimator)], [p(1) as HistogramResult: none. Applies all the inserted values for the Histogram atom], [Histogram_GuiApplyChanges(GuiAtom)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentName], [Histogram], 2, 2, [cell(p(2), Histogram_COLUMNNUMBER_SEGMENTNAME, p(1), 2)], [p(1) as Histogramp(2) as Integer, index of the segmentResult: String. The name og the segment with index p(2)], [Histogram_GetSegmentName(c, 3)], 0, [Histogram.atm]);
DefineFunction([Histogram_StartCollectingStatusInformation], [Histogram], 1, 1, [if( atomexists(in(1, c)) = True, { When an atom is connected to the Status Monitor   start collecting status information on this atom } EnableStatusMonitor(in(1, p(1)), true))], [p(1) as HistogramResult: none. Starts collecting status information at the connected atom.], [Histogram_StartCollectingStatusInformation(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_DeleteSegment], [Histogram], 2, 2, [do( var([numberofsegments], vbValue, 0),  if(  Histogram_GetNumberOfSegments(p(1)) > 1,  deleterow(p(2), p(1)) ),  numberofsegments := Histogram_GetNumberOfSegments(p(1)) - 1,  Histogram_SetNumberOfSegments(p(1), numberofsegments))], [p(1) as Histogramp(2) as Integer, the segment indexResult: none. Deletes the specified segment from the histogram.], [Histogram_DeleteSegment(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_DetermineScores], [Histogram], 1, 1, [do( var([indexer], vbValue, 0),  for(  indexer := 1, indexer <= Histogram_GetNumberOfSegments(p(1)), inc(indexer),    if(   indexer = 1,   cell(indexer, HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE, p(1)) := cell(indexer, HISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, p(1)),   cell(indexer, HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE, p(1)) := cell(indexer - 1, HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE, p(1)) + cell(indexer, HISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, p(1))  ) ),  Histogram_SetTotalScore(p(1), cell(Histogram_GetNumberOfSegments(p(1)), HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE, p(1))))], [p(1) as HistogramResult: none. Determinesscores from the histogram.], [Histogram_DetermineScores(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentCumulativeScore], [Histogram], 2, 2, [cell(p(2), HISTOGRAM_COLUMNNUMBER_SEGMENTCUMULATIVESCORE, p(1))], [p(1) as Histogramp(2) as integer, segment indexResult: Double. The cumulative socre for segment in row number p(2)], [Histogram_GetSegmentCumulativeScore(c, 2)], 0, [Histogram.atm]);
DefineFunction([Histogram_Animate3D], [Histogram], 1, 1, [do( var([atmC], vbAtom, p(1)), var([indexer], vbValue, 0), var([degrees], vbValue, 0), var([offset], vbValue, 0), var([temp], vbValue, 0),     { The Diagram's Title } if(  Histogram_GetTitleVisible(atmC),  if(   Histogram_GetLegendAtXAxis(atmC) = False,    DrawText(     1,     Histogram_GetHeightBoundingBox(atmC),     StringLength(Histogram_GetTitle(atmC)) * Histogram_GetTextSizeTitle(atmC),     Histogram_GetTextSizeTitle(atmC) * 2,     Histogram_GetTitle(atmC),     Histogram_GetTextColor(atmC),     Histogram_GetTextSizeTitle(atmC),     [Arial],     0,     0,     0,     HA_LEFT + VA_TOP    ),    DrawText(     1,     - 2 * Histogram_GetTextSizeTitle(atmC),     StringLength(Histogram_GetTitle(atmC)) * Histogram_GetTextSizeTitle(atmC),     Histogram_GetTextSizeTitle(atmC) * 2,     Histogram_GetTitle(atmC),     Histogram_GetTextColor(atmC),     Histogram_GetTextSizeTitle(atmC),     [Arial],     0,     0,     0,     HA_LEFT + VA_TOP   )     ) ),  { APP-124 JG (29-04-2008) Show a message when the diagram is not refreshed...} if(  runspeed = 1E40,  DrawText(   0,   0,   Histogram_GetTextSizeTitle(atmC) * 40,   Histogram_GetTextSizeTitle(atmC) * 4,   Concat(    [Refresment has been paused.],    CR,    [(Lower the runspeed to refresh the diagram)]   ),   ColorRed,   Histogram_GetTextSizeTitle(atmC),   [Arial],   True,   0,   0,   HA_LEFT + VA_TOP  ) ),   { default View when not connected or no scores yet available. } if(  Histogram_GetMaximumScore(atmC) = 0,  do(   a,   { Return nothing to quit the function. }   return(0)  ) ),  { Y-Axis } if(  and(   Histogram_GetYAxisValuesVisible(atmC) = true,   Histogram_GetHistogramVisible(atmC) = true  ),  PointsPlane(   1,   0,   0,   0,   Histogram_GetHeightBoundingBox(atmC),   0,   Histogram_GetNumberOfSegments(atmC) * Histogram_GetSegmentWidth(atmC) / 100,   0,   0,   Histogram_GetBorderColor(atmC)  ) ),  { Y-Axis values. } if(  and(   Histogram_GetYAxisValuesVisible(atmC) = true,   Histogram_GetHistogramVisible(atmC) = true  ),  for(   indexer := 0, indexer <= Histogram_GetYAxisNumberOfValues(atmC), inc(indexer),   do(    DrawText(     - 10 * Histogram_GetTextSizeYAxis(atmC) - Histogram_GetTextSizeYAxis(atmC),     (Histogram_GetHeightBoundingBox(atmC) / Histogram_GetYAxisNumberOfValues(atmC)) * (Histogram_GetYAxisNumberOfValues(atmC) - indexer),     10 * Histogram_GetTextSizeYAxis(atmC),     2 * Histogram_GetTextSizeYAxis(atmC),     String((Histogram_GetMaximumScore(atmC)/Histogram_GetYAxisNumberOfValues(atmC)) * indexer, 0, 0),     Histogram_GetTextColor(atmC),     Histogram_GetTextSizeYAxis(atmC),     [Arial],     0,     0,     0,     HA_RIGHT    ),        { The horizontal lines belonging to the individual values on the Y Axis. }    if(     Histogram_GetYAxisLinesVisible(atmC) = true,     PointsPlane(      1,      (Histogram_GetHeightBoundingBox(atmC) / Histogram_GetYAxisNumberOfValues(atmC)) * (Histogram_GetYAxisNumberOfValues(atmC) - indexer),      -0.01,      2 + Histogram_GetNumberOfSegments(atmC) * (Histogram_GetSegmentWidth(atmC) + Histogram_GetSegmentInBetweenSpace(atmC)),      0,      0,      0,      Histogram_GetHeightBoundingBox(atmC) / 200,      0,      Histogram_GetYAxisLinesColor(atmC)     )    )   )  ) ),  if(  and(   Histogram_GetShowScoresBesidesLegend(atmC) = true,   Histogram_GetScoresVisible(atmC) = true  ),  offset := Histogram_GetTextSizeLegend(atmC) * 4 ),  if(  Histogram_GetYAxisValuesVisible(atmC) = true,  offset := offset + Histogram_GetTextSizeYAxis(atmC) * 4 ),  if(  Histogram_GetHistogramVisible(atmC) = false,  offset := -3 ), { Animation of the colored segments } for(  indexer := 1, indexer <= Histogram_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    True,    do(         { ***************** SEGMENTS **************** }     if(      Histogram_GetHistogramVisible(atmC) = true,      do(       di3DBox(        (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),        Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        0,        Histogram_GetSegmentWidth(atmC),        Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        Histogram_GetSegmentWidth(atmC),        Histogram_GetSegmentColor(atmC, indexer)       ),      SetMaterialWireFrame(True),       di3DBox(        (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),        Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        0,        Histogram_GetSegmentWidth(atmC),        Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        Histogram_GetSegmentWidth(atmC),        Histogram_GetBorderColor(atmC)       ),      SetMaterialWireFrame(False)      )     ),{ ***************** SHOW CUMULATIVE LINE **************** }             if(       Histogram_GetCumulativeLineVisible(atmC),               do(        { LINE }        if(         indexer > 1,                 PointsPlane(          (indexer - 2) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 2) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,          Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, (indexer - 1)) / Histogram_GetTotalScore(atmC)),          0,          Histogram_GetSegmentWidth(atmC) + Histogram_GetSegmentInBetweenSpace(atmC),          Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, indexer - 1) - Histogram_GetSegmentCumulativeScore(atmC, indexer)) / Histogram_GetTotalScore(atmC),          0,          Histogram_GetNumberOfSegments(atmC) * Histogram_GetSegmentWidth(atmC) / 100,          0,          0,          Histogram_GetCumulativeLineColor(atmC)         )                 ),                 { DOTS }        if(         Histogram_GetCumulativeLineDotsVisible(atmC) = True,         do(          SetMaterialColor(Histogram_GetCumulativeLineDotsColor(atmC)),          SetMaterialOverride(True),          DrawCone(           (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,           Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentCumulativeScore(atmC, indexer) / Histogram_GetTotalScore(atmC)),           0,           Histogram_GetCumulativeLineDotsRadius(atmC),           Histogram_GetCumulativeLineDotsRadius(atmC),           Histogram_GetCumulativeLineDotsRadius(atmC),           360,           X_AXIS + Y_AXIS + Z_AXIS,           CP_SIDES + CP_TOP + CP_BOTTOM          ),          SetMaterialOverride(False)         )         )       )      ),     { ***************** LEGEND AT X-AXIS **************** }            if(       and(         Histogram_GetLegendVisible(atmC) = True,         Histogram_GetLegendAtXAxis(atmC) = True       ),       { The name of the segment at the X-Axis }       DrawText(        { Slide the position of the x coordinate towards the left edge of the bar according to the degree of rotation. }        if(         Histogram_GetLegendAtXAxisRotation(atmC) > 45,          indexer * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) - Histogram_GetSegmentWidth(atmC) / 2,         indexer * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) - (Histogram_GetSegmentWidth(atmC) * ((90 - Histogram_GetLegendAtXAxisRotation(atmC)) / 90))        ),        Histogram_GetHeightBoundingBox(atmC),        Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))),        Histogram_GetTextSizeLegend(atmC) * 2,        String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC)),        Histogram_GetTextColor(atmC),        Histogram_GetTextSizeLegend(atmC),        [Arial],        0,        0,        Histogram_GetLegendAtXAxisRotation(atmC),        HA_LEFT + VA_TOP       )     ),     { ***************** LEGEND ************************ }     if(       and(         Histogram_GetLegendVisible(atmC) = True,         Histogram_GetLegendAtXAxis(atmC) = False       ),      do(      { The box for the color }      di3DBox(       -1 * Histogram_GetTextSizeLegend(atmC) - offset,       Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2),       0,       Histogram_GetTextSizeLegend(atmC),       Histogram_GetTextSizeLegend(atmC),       Histogram_GetTextSizeLegend(atmC),       Histogram_GetSegmentColor(atmC, indexer)      ),      SetMaterialWireFrame(1),            di3DBox(       -1 * Histogram_GetTextSizeLegend(atmC) - offset,       Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2),       0,       Histogram_GetTextSizeLegend(atmC),       Histogram_GetTextSizeLegend(atmC),       Histogram_GetTextSizeLegend(atmC),       Histogram_GetBorderColor(atmC)      ),      SetMaterialWireFrame(0),                 { The name of the segment }       DrawText(        - 1 * Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))) - 1.5 * Histogram_GetTextSizeLegend(atmC) - offset,        Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2) - Histogram_GetTextSizeLegend(atmC) / 2.5,        Histogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC))),        Histogram_GetTextSizeLegend(atmC) * 2,        String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTNAME, atmC)),        Histogram_GetTextColor(atmC),        Histogram_GetTextSizeLegend(atmC),        [Arial],        0,        0,        0,        HA_RIGHT + VA_TOP       ),              if(        and(         Histogram_GetShowScoresBesidesLegend(atmC) = true,         Histogram_GetScoresVisible(atmC) = true        ),           DrawText(         -1 * offset + Histogram_GetTextSizeLegend(atmC),         Histogram_GetTextSizeLegend(atmC) * (2 * indexer - 2) - Histogram_GetTextSizeLegend(atmC) / 2.5,         Histogram_GetTextSizeLegend(atmC) * (8 + StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)))),         Histogram_GetTextSizeLegend(atmC) * 2,         String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)),         Histogram_GetTextColor(atmC),         Histogram_GetTextSizeLegend(atmC),         [Arial],         0,         0,         0,         HA_LEFT + VA_TOP        )             )           )     )    )   )     ) ),  indexer := 0,  { ***************** SCORES ******************* } for(  indexer := 1, indexer <= Histogram_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    and(     Histogram_GetScoresVisible(atmC) = True,     Histogram_GetShowScoresBesidesLegend(atmC) = false,     Histogram_GetHistogramVisible(atmC) = true    ),    DrawText(      (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC),      Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)) - 2 * Histogram_GetTextSizeScores(atmC),      Histogram_GetTextSizeScores(atmC) * (8 + StringLength(String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)))),      Histogram_GetTextSizeScores(atmC) * 2,      String(cell(indexer, Histogram_COLUMNNUMBER_SEGMENTSCORE, atmC)),      Histogram_GetTextColor(atmC),      Histogram_GetTextSizeScores(atmC)    )   ),      { ***************** CONNECTING LINE BETWEEN BARS ************************ }   if(    Histogram_GetConnectingLineVisible(atmC) = True,    do(     if(      Histogram_GetConnectingLineDotsVisible(atmC) = True,      { ***************** DOTS ************************ }           Do(       SetMaterialColor(Histogram_GetConnectingLineDotsColor(atmC)),       SetMaterialOverride(True),              DrawCone(        (indexer - 1) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 1) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,        Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer) / Histogram_GetMaximumScore(atmC)),        Histogram_GetSegmentWidth(atmC),        Histogram_GetConnectingLineDotsRadius(atmC),                Histogram_GetConnectingLineDotsRadius(atmC),        Histogram_GetConnectingLineDotsRadius(atmC),        360,        Z_AXIS,        CP_SIDES + CP_TOP + CP_BOTTOM       ),       SetMaterialOverride (False)      )     ),          { ***************** LINE ************************ }     if(      indexer > 1,          PointsPlane(       (indexer - 2) * Histogram_GetSegmentWidth(atmC) + 2 + (indexer - 2) * Histogram_GetSegmentInBetweenSpace(atmC) + Histogram_GetSegmentWidth(atmC) / 2,       Histogram_GetHeightBoundingBox(atmC) - Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, (indexer - 1)) / Histogram_GetMaximumScore(atmC)),       Histogram_GetSegmentWidth(atmC) + 0.001,       Histogram_GetSegmentWidth(atmC) + Histogram_GetSegmentInBetweenSpace(atmC),       Histogram_GetHeightBoundingBox(atmC) * (Histogram_GetSegmentScore(atmC, indexer - 1) - Histogram_GetSegmentScore(atmC, indexer)) / Histogram_GetMaximumScore(atmC),       0,       Histogram_GetNumberOfSegments(atmC) * Histogram_GetSegmentWidth(atmC) / 100,       0,       0,       Histogram_GetConnectingLineColor(atmC)             )     )    )   )  )  ))], [p(1) as Histogram], [Histogram_Animate3D(c)], 0, [StatusHistogram.atm]);
DefineFunction([Histogram_GetGenerateSegmentRule], [Histogram], 1, 1, [Do(  Case(    p(1),    [do(      Histogram_SetNumberOfSegments(GuiAtom, ceil((~2 - ~1 + 1) / ~3)),      xSize(GuiAtom) := 2 + Histogram_GetNumberOfSegments(GuiAtom) * (Histogram_GetSegmentInBetweenSpace(GuiAtom) + Histogram_GetSegmentWidth(GuiAtom)),      SetTable(ceil((~2 - ~1 + 1) / ~3), nCols(GuiAtom), GuiAtom),       GuiControl([ebClassSize], GuiSet([Text], String(~3))),      GuiControl([ebStartValue], GuiSet([Text], String(~1))),      Repeat(        ceil((~2 - ~1 + 1) / ~3),         do(          if(            Count > 1,             GuiControl([tblSegmentTable], GuiTableInsertRow(Count))          ),           Histogram_SetSegmentName(GuiAtom, Count, string(~1 + Count - 1 + (Count - 1) * (~3 - 1))),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 0, String(Count))),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 1, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTNAME , GuiAtom, 2)))        )      )    )|1. Numbers: from ~1~ to ~10~ with class size ~1~.],    [do(      Histogram_SetNumberOfSegments(GuiAtom, ~2 - ~1 + 1),       xSize(GuiAtom) := 2 + Histogram_GetNumberOfSegments(GuiAtom) * (Histogram_GetSegmentInBetweenSpace(GuiAtom) + Histogram_GetSegmentWidth(GuiAtom)),      SetTable(~2 - ~1 + 1, nCols(GuiAtom), GuiAtom),       GuiControl([ebClassSize], GuiSet([Text], String(1))),      GuiControl([ebStartValue], GuiSet([Text], String(~1))),      Repeat(        ~2 - ~1 + 1,         do(          if(            Count > 1,             GuiControl([tblSegmentTable], GuiTableInsertRow(Count))          ),           Histogram_SetSegmentName(GuiAtom, Count, StatusName(~1 + Count - 1)),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 0, String(Count))),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 1, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTNAME , GuiAtom, 2)))        )      )    )|2. Statuses ~1~ to ~10~.]      ))      ], [Returns string of GenerateSegmentRule according to index e1], [Histogram_GetGenerateSegmentRule(1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetGenerateColorRule], [Histogram], 1, 1, [Do(    Case(    p(1),    [Repeat(       Histogram_GetNumberOfSegments(GuiAtom),       do(         Histogram_SetSegmentColor(GuiAtom, Count, ~1),         GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))       )     )|1. Assign ~ColorRed~ to all segments.],    [do(       Repeat(         ~2,         do(           Histogram_SetSegmentColor(GuiAtom, Count, ~1),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       ),       Repeat(         Histogram_GetNumberOfSegments(GuiAtom) - ~2,          do(           Histogram_SetSegmentColor(GuiAtom, Count + ~2, ~3),           GuiControl([tblSegmentTable], GuiSet([Cells], Count + ~2, 2, Cell(Count + ~2, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       )     )|2. Assign ~ColorRed~ to segments with index <= ~3~. Assign ~ColorBlue~ to others.],     [do(       Histogram_UseDefaultColours(GuiAtom),       Repeat(         Histogram_GetNumberOfSegments(GuiAtom),         GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))       )     )|3. Assign a different color to every segment.],    [do(       Repeat(         Ceil(Histogram_GetNumberOfSegments(GuiAtom) / 2),         do(           Histogram_SetSegmentColor(GuiAtom, 1 + (Count - 1) * 2, ~1),           GuiControl([tblSegmentTable], GuiSet([Cells], 1 + (Count - 1) * 2, 2, Cell(1 + (Count - 1) * 2, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       ),       Repeat(         Trunc(Histogram_GetNumberOfSegments(GuiAtom) / 2),         do(           Histogram_SetSegmentColor(GuiAtom, Count * 2, ~2),           GuiControl([tblSegmentTable], GuiSet([Cells], Count * 2, 2, Cell(Count * 2, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       )     )|4. Assign ~ColorRed~ to segments with even index and ~ColorBlue~ to odd segments.],    [do(       Repeat(         Histogram_GetNumberOfSegments(GuiAtom),         do(           Histogram_SetSegmentColor(GuiAtom, Count, hsvColor((359/Histogram_GetNumberOfSegments(GuiAtom)) * Count, 0.75, 1)),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       )     )|5. Smooth coloring.],    [do(       Repeat(         Histogram_GetNumberOfSegments(GuiAtom),         do(           Histogram_SetSegmentColor(GuiAtom, Count, hsvColor((180/Histogram_GetNumberOfSegments(GuiAtom)) * Count, 0.75, 1)),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       )     )|6. Smooth coloring from red to turqoise.],    [do(       Repeat(         Histogram_GetNumberOfSegments(GuiAtom),         do(           Histogram_SetSegmentColor(GuiAtom, Count, hsvColor((179 + (180/Histogram_GetNumberOfSegments(GuiAtom)) * Count), 0.75, 1)),           GuiControl([tblSegmentTable], GuiSet([Cells], Count, 2, Cell(Count, HISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR, GuiAtom, 2)))         )       )     )|7. Smooth coloring from blue to red.]  ))], [Returns string of GenerateColorRule according to index e1], [Histogram_GetGenerateColorRule(1)], 0, [Histogram.atm]);
DefineFunction([Histogram_VariableCodes], [Various], 1, 1, [do(  Case(    p(1),    [Output(In(1, c))|1. Output],    [Input(In(1, c))|2. Input],    [Status(In(1, c))|3. Status],    [Content(In(1, c))|4. Content],    [AvgContent(In(1, c))|5. Average Content],    [AvgStay(In(1, c))|6. Average Stay],    [Output(In(1, c)) * 3600 / (Time + 0.00001)|7. Output per hour],    [Label([~1], In(1, c))|8. Label ~LabelName~ of Histograming atom],    [if(Content(In(1, c)) > 0, Label([~1], First(In(1, c))))|9. Label ~LabelName~ of first of Histograming atom],    [if(Content(In(1, c)) > 0, Label([~1], Last(In(1, c))))|10. Label ~LabelName~ of last of Histograming atom],    [0|11. 4DScript Expression. Click the square button on the right to write 4DScript code.]  ))], [Fills GUI smartedit with predefined variables to Histogram.], [Histogram_VariableCodes(count)], 0, [Histogram.atm]);
DefineFunction([Histogram_CreateAliases], [Histogram], 1, 1, [do( var([atmHistogram], vbAtom, p(1)), var([strCodeRef], vbString),  strCodeRef :=  { vtp(ptv(atmTable))) }  Concat(                                         [vtp(],   String(ptv(atmHistogram)),   [)]  ), DefineFunction(  Histogram_GetAliasName(atmHistogram),              { Name }    [Basic],                                           { Category }              0, 0,                                              { Parameters Min, Max }  strCodeRef,                                        { Code }  [An atom reference to a histogram],                { Help Text }  Histogram_GetAliasName(atmHistogram),              { Syntax Example }  True,                                              { Scope }   [Histogram.atm]                                    { Creator }  ),      { Set attribute AliasesCreated to show that the functions have been created } Histogram_SetAliasesCreated(atmHistogram, 1))], [Defines function on the Histogram to reference it.], [Histogram_CreateAliases(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_DeleteAliases], [Histogram], 1, 1, [Do( var([atmHistogram], vbAtom, p(1)),    if(FunctionExists(Histogram_GetAliasName(atmHistogram)), UndefineFunction(Histogram_GetAliasName(atmHistogram))),  Histogram_SetAliasesCreated(atmHistogram, 0) { to show the functions are not there anymore })], [Undefines the reference function of the Histogram], [Histogram_DeleteAliases(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_Init], [Various], 1, 1, [do( LateInit(  [   if(    Histogram_GetAliasesCreated(c),    do(     { The current alias function has a hardcoded atom reference which is now wrong and must be redefined. }     Histogram_DeleteAliases(c),     Histogram_CreateAliases(c)    )   )  ] ))], [Internal function of the histogram atom to initialize the Histogram. To redefine the aliases of the Histogram.], [Enter Syntax Example], 0, [Histogram.atm]);
DefineFunction([Histogram_OnCreation], [Various], 1, 1, [do( var([atmTable], vbAtom, p(1)),  { Suppress OnCreation calls while loading from file } if(StringLength(Name(atmTable)) = 0, return(0)), Set(OnInit, [Histogram_Init(c)]) )], [Internal function of the Histogram atom containing the OnCreation actions.], [Histogram_OnCreation(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_RepairAliasOnPaste], [Various], 1, 1, [do( var([atmHistogram], vbAtom, p(1)),  If(  Histogram_GetCreateAlias(atmHistogram) = 1,  Do(   var([strRef], vbString, Histogram_GetAliasName(atmHistogram)),   if(    And(FunctionExists(strRef), AtomID(ExecString(strRef)) <> AtomID(atmHistogram)),    Do(     {this atom is a copy and the original has aliases}          {Aliasses have not been created for the copy thus should be 0}     Histogram_SetAliasesCreated(atmHistogram, 0),          {if alias should be based on the atom name then correct the alias name}     if(      Histogram_GetUseAtomName(atmHistogram) = 1,      Histogram_SetAliasName(atmHistogram, Name(atmHistogram))     ),          {Also set CreateAlias of atmTable to zero}     Histogram_SetCreateAlias(atmHistogram, 0)    )   )  ) ) ){}], [For internal use. Necessary to make sure that when an atom is copied, its aliases still belong to the right atom and not to the copy.], [Histogram_RepairAliasOnPaste(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetMaximumScore], [Atom Parameters], 2, 2, [Att(3, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property MaximumScore of Histogram.], [Histogram_SetMaximumScore( atmHistogram, newMaximumScore )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetMaximumScore], [Atom Parameters], 1, 1, [Att(3, p(1))], [p(1) as HistogramResult: Double. Get the property MaximumScore of Histogram.], [newMaximumScore := Histogram_GetMaximumScore( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTextColor], [Atom Parameters], 2, 2, [Att(5, p(1)) := p(2)], [p(1) as Histogramp(2) as ColorResult: none. Sets the property TextColor of Histogram.], [Histogram_SetTextColor( atmHistogram, newTextColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTextColor], [Atom Parameters], 1, 1, [Att(5, p(1))], [p(1) as HistogramResult: Color. Get the property TextColor of Histogram.], [newTextColor := Histogram_GetTextColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTextSizeTitle], [Atom Parameters], 2, 2, [Att(7, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property TextSizeTitle of Histogram.], [Histogram_SetTextSizeTitle( atmHistogram, newTextSizeTitle )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTextSizeTitle], [Atom Parameters], 1, 1, [Att(7, p(1))], [p(1) as HistogramResult: Double. Get the property TextSizeTitle of Histogram.], [newTextSizeTitle := Histogram_GetTextSizeTitle( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTextSizeLegend], [Atom Parameters], 2, 2, [Att(9, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property TextSizeLegend of Histogram.], [Histogram_SetTextSizeLegend( atmHistogram, newTextSizeLegend )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTextSizeLegend], [Atom Parameters], 1, 1, [Att(9, p(1))], [p(1) as HistogramResult: Double. Get the property TextSizeLegend of Histogram.], [newTextSizeLegend := Histogram_GetTextSizeLegend( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTitleVisible], [Atom Parameters], 2, 2, [Att(11, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property TitleVisible of Histogram.], [Histogram_SetTitleVisible( atmHistogram, newTitleVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTitleVisible], [Atom Parameters], 1, 1, [Att(11, p(1))], [p(1) as HistogramResult: Boolean. Get the property TitleVisible of Histogram.], [newTitleVisible := Histogram_GetTitleVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetScoresVisible], [Atom Parameters], 2, 2, [Att(13, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property ScoresVisible of Histogram.], [Histogram_SetScoresVisible(c, true)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetScoresVisible], [Atom Parameters], 1, 1, [Att(13, p(1))], [p(1) as HistogramResult: Boolean. Get the property PercentagesVisible of Histogram.], [Histogram_GetScoresVisible(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetYAxisValuesVisible], [Atom Parameters], 2, 2, [Att(15, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property YAxisValuesVisible of Histogram.], [Histogram_SetYAxisValuesVisible( atmHistogram, newYAxisValuesVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetYAxisValuesVisible], [Atom Parameters], 1, 1, [Att(15, p(1))], [p(1) as HistogramResult: Boolean. Get the property YAxisValuesVisible of Histogram.], [newYAxisValuesVisible := Histogram_GetYAxisValuesVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetYAxisLinesVisible], [Atom Parameters], 2, 2, [Att(17, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property YAxisLinesVisible of Histogram.], [Histogram_SetYAxisLinesVisible( atmHistogram, newYAxisLinesVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetYAxisLinesVisible], [Atom Parameters], 1, 1, [Att(17, p(1))], [p(1) as HistogramResult: Boolean. Get the property YAxisLinesVisible of Histogram.], [newYAxisLinesVisible := Histogram_GetYAxisLinesVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetShowScoresBesidesLegend], [Atom Parameters], 2, 2, [Att(19, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property ShowScoresBesidesLegend of Histogram.], [Histogram_SetShowScoresBesidesLegend(c, true)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetShowScoresBesidesLegend], [Atom Parameters], 1, 1, [Att(19, p(1))], [p(1) as HistogramResult: Boolean. Get the property ShowScoresBesidesLegend of Histogram.], [Histogram_GetShowScoresBesidesLegend(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetSegmentInBetweenSpace], [Atom Parameters], 2, 2, [Att(21, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property SegmentInBetweenSpace of Histogram.], [Histogram_SetSegmentInBetweenSpace( atmHistogram, newSegmentInBetweenSpace )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentInBetweenSpace], [Atom Parameters], 1, 1, [Att(21, p(1))], [p(1) as HistogramResult: Double. Get the property SegmentInBetweenSpace of Histogram.], [newSegmentInBetweenSpace := Histogram_GetSegmentInBetweenSpace( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetSegmentWidth], [Atom Parameters], 1, 1, [Att(20, p(1))], [p(1) as HistogramResult: Double. Get the property BarWidth of Histogram.], [newBarWidth := Histogram_GetBarWidth( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetSegmentWidth], [Atom Parameters], 2, 2, [Att(20, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property BarWidth of Histogram.], [Histogram_SetBarWidth( atmHistogram, newBarWidth )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetYAxisLinesColor], [Atom Parameters], 1, 1, [Att(18, p(1))], [p(1) as HistogramResult: Color. Get the property YAxisLinesColor of Histogram.], [newYAxisLinesColor := Histogram_GetYAxisLinesColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetYAxisLinesColor], [Atom Parameters], 2, 2, [Att(18, p(1)) := p(2)], [p(1) as Histogramp(2) as ColorResult: none. Sets the property YAxisLinesColor of Histogram.], [Histogram_SetYAxisLinesColor( atmHistogram, newYAxisLinesColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetYAxisNumberOfValues], [Atom Parameters], 1, 1, [Att(16, p(1))], [p(1) as HistogramResult: Integer. Get the property YAxisNumberOfValues of Histogram.], [newYAxisNumberOfValues := Histogram_GetYAxisNumberOfValues( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetYAxisNumberOfValues], [Atom Parameters], 2, 2, [Att(16, p(1)) := p(2)], [p(1) as Histogramp(2) as IntegerResult: none. Sets the property YAxisNumberOfValues of Histogram.], [Histogram_SetYAxisNumberOfValues( atmHistogram, newYAxisNumberOfValues )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetHistogramVisible], [Atom Parameters], 1, 1, [Att(14, p(1))], [p(1) as HistogramResult: Boolean. Get the property HistogramVisible of Histogram.], [newHistogramVisible := Histogram_GetHistogramVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetHistogramVisible], [Atom Parameters], 2, 2, [Att(14, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property HistogramVisible of Histogram.], [Histogram_SetHistogramVisible( atmHistogram, newHistogramVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetLegendVisible], [Atom Parameters], 1, 1, [Att(12, p(1))], [p(1) as HistogramResult: Boolean. Get the property LegendVisible of Histogram.], [newLegendVisible := Histogram_GetLegendVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetLegendVisible], [Atom Parameters], 2, 2, [Att(12, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property LegendVisible of Histogram.], [Histogram_SetLegendVisible( atmHistogram, newLegendVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTextSizeYAxis], [Atom Parameters], 1, 1, [Att(10, p(1))], [p(1) as HistogramResult: Double. Get the property TextSizeYAxis of Histogram.], [newTextSizeYAxis := Histogram_GetTextSizeYAxis( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTextSizeYAxis], [Atom Parameters], 2, 2, [Att(10, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property TextSizeYAxis of Histogram.], [Histogram_SetTextSizeYAxis( atmHistogram, newTextSizeYAxis )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTextSizeScores], [Atom Parameters], 1, 1, [Att(8, p(1))], [p(1) as HistogramResult: Double. Get the property TextSizePercentages of Histogram.], [newTextSizePercentages := Histogram_GetTextSizePercentages( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTextSizeScores], [Atom Parameters], 2, 2, [Att(8, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property TextSizePercentages of Histogram.], [Histogram_SetTextSizePercentages( atmHistogram, newTextSizePercentages )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetBorderColor], [Atom Parameters], 1, 1, [Att(6, p(1))], [p(1) as HistogramResult: Double. Get the property BorderColor of Histogram.], [newBorderColor := Histogram_GetBorderColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetBorderColor], [Atom Parameters], 2, 2, [Att(6, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property BorderColor of Histogram.], [Histogram_SetBorderColor( atmHistogram, newBorderColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTitle], [Atom Parameters], 1, 1, [Att(4, p(1))], [p(1) as HistogramResult: String. Get the property Title of Histogram.], [newTitle := Histogram_GetTitle( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTitle], [Atom Parameters], 2, 2, [Att(4, p(1)) := p(2)], [p(1) as Histogramp(2) as StringResult: none. Sets the property Title of Histogram.], [Histogram_SetTitle( atmHistogram, newTitle )], 0, [Histogram.atm]);
DefineFunction([Histogram_Setid], [Atom Parameters], 2, 2, [Att(1, p(1)) := p(2)], [p(1) as Histogramp(2) as IntegerResult: none. Sets the property id of Histogram.], [Histogram_Setid( atmHistogram, newid )], 0, [Histogram.atm]);
DefineFunction([Histogram_Getid], [Atom Parameters], 1, 1, [Att(1, p(1))], [p(1) as HistogramResult: Integer. Get the property id of Histogram.], [newid := Histogram_Getid( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetNumberOfSegments], [Atom Parameters], 2, 2, [do( Att(2, p(1)) := p(2), if(  p(2) > 0,  nrows(p(1)) := p(2),  do(   cell(1, Histogram_COLUMNNUMBER_SEGMENTSCORE, p(1)) := 0,   cell(1, Histogram_COLUMNNUMBER_SEGMENTCOLOR, p(1)) := 0,   cell(1, Histogram_COLUMNNUMBER_SEGMENTNAME, p(1)) := 0  ) ))], [p(1) as Histogramp(2) as integer, the number of segmentsResult: none. Sets the property NumberOfSegments of Histogram.], [Histogram_SetNumberOfSegments( atmHistogram, newNumberOfSegments )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetNumberOfSegments], [Atom Parameters], 1, 1, [Att(2, p(1))], [p(1) as HistogramResult: integer. Get the property NumberOfSegments of Histogram.], [newNumberOfSegments := Histogram_GetNumberOfSegments( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLineColor], [Atom Parameters], 1, 1, [Att(24, p(1))], [p(1) as HistogramResult: Color. Get the property ConnectingLineColor of Histogram.], [newConnectingLineColor := Histogram_GetConnectingLineColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLineColor], [Atom Parameters], 2, 2, [Att(24, p(1)) := p(2)], [p(1) as Histogramp(2) as ColorResult: none. Sets the property ConnectingLineColor of Histogram.], [Histogram_SetConnectingLineColor( atmHistogram, newConnectingLineColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLineDotsColor], [Atom Parameters], 1, 1, [Att(26, p(1))], [p(1) as HistogramResult: Color. Get the property ConnectingLineDotsColor of Histogram.], [newConnectingLineDotsColor := Histogram_GetConnectingLineDotsColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLineDotsColor], [Atom Parameters], 2, 2, [Att(26, p(1)) := p(2)], [p(1) as Histogramp(2) as ColorResult: none. Sets the property ConnectingLineDotsColor of Histogram.], [Histogram_SetConnectingLineDotsColor( atmHistogram, newConnectingLineDotsColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLineDotsRadius], [Atom Parameters], 1, 1, [Att(28, p(1))], [p(1) as HistogramResult: Double. Get the property ConnectingLineDotsRadius of Histogram.], [Histogram_GetConnectingLineDotsRadius(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLineDotsRadius], [Atom Parameters], 2, 2, [Att(28, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property ConnectingLineDotsRadius of Histogram.], [Histogram_SetConnectingLineDotsRadius(c, 0.3)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetTotalScore], [Atom Parameters], 1, 1, [Att(30, p(1))], [p(1) as HistogramResult: double. Get the property TotalScore of Histogram.], [newTotalScore := Histogram_GetTotalScore( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetTotalScore], [Atom Parameters], 2, 2, [Att(30, p(1)) := p(2)], [p(1) as Histogramp(2) as doubleResult: none. Sets the property TotalScore of Histogram.], [Histogram_SetTotalScore( atmHistogram, newTotalScore )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLineVisible], [Atom Parameters], 1, 1, [Att(32, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLineVisible of Histogram.], [newCumulativeLineVisible := Histogram_GetCumulativeLineVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLineVisible], [Atom Parameters], 2, 2, [Att(32, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLineVisible of Histogram.], [Histogram_SetCumulativeLineVisible( atmHistogram, newCumulativeLineVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLineColor], [Atom Parameters], 1, 1, [Att(34, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLineColor of Histogram.], [newCumulativeLineColor := Histogram_GetCumulativeLineColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLineColor], [Atom Parameters], 2, 2, [Att(34, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLineColor of Histogram.], [Histogram_SetCumulativeLineColor( atmHistogram, newCumulativeLineColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLineDotsColor], [Atom Parameters], 1, 1, [Att(36, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLineDotsColor of Histogram.], [newCumulativeLineDotsColor := Histogram_GetCumulativeLineDotsColor( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLineDotsColor], [Atom Parameters], 2, 2, [Att(36, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLineDotsColor of Histogram.], [Histogram_SetCumulativeLineDotsColor( atmHistogram, newCumulativeLineDotsColor )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetNumberOfSegmentsDrawn], [Atom Parameters], 2, 2, [Att(52, p(1)) := p(2)], [Sets the value of attribute NumberOfSegmentsDrawn (# 52) of Histogram e1 to e2], [Histogram_SetNumberOfSegmentsDrawn(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetNumberOfSegmentsDrawn], [Atom Parameters], 1, 1, [Att(52, p(1))], [Returns the value of attribute NumberOfSegmentsDrawn (# 52) of Histogram e1], [Histogram_GetNumberOfSegmentsDrawn(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLineDotsRadius], [Atom Parameters], 2, 2, [Att(37, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLineDotsRadius of Histogram.], [Histogram_SetCumulativeLineDotsRadius( atmHistogram, newCumulativeLineDotsRadius )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLineDotsRadius], [Atom Parameters], 1, 1, [Att(37, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLineDotsRadius of Histogram.], [newCumulativeLineDotsRadius := Histogram_GetCumulativeLineDotsRadius( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetExpression], [Atom Parameters], 1, 1, [Att(41, p(1))], [Returns the result of the 4D script expression of attribute Expression (# 41) of Histogram e1], [Histogram_GetExpression(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetExpression], [Atom Parameters], 2, 2, [SetExprAtt(41, p(2), p(1))], [Sets the 4D script expression of attribute Expression (# 41) of Histogram e1 to e2], [Histogram_SetExpression(c, [NegExp(9)])], 0, [Histogram.atm]);
DefineFunction([Histogram_GetMonitorRefreshRate], [Atom Parameters], 1, 1, [Att(43, p(1))], [Returns the result of the 4D script expression of attribute MonitorRefreshRate (# 43) of Histogram e1], [Histogram_GetMonitorRefreshRate(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetMonitorRefreshRate], [Atom Parameters], 2, 2, [SetExprAtt(43, p(2), p(1))], [Sets the 4D script expression of attribute MonitorRefreshRate (# 43) of Histogram e1 to e2], [Histogram_SetMonitorRefreshRate(c, [NegExp(9)])], 0, [Histogram.atm]);
DefineFunction([Histogram_GetClassSize], [Atom Parameters], 1, 1, [Att(45, p(1))], [Returns the value of attribute ClassSize (# 45) of Histogram e1], [Histogram_GetClassSize(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetClassSize], [Atom Parameters], 2, 2, [Att(45, p(1)) := p(2)], [Sets the value of attribute ClassSize (# 45) of Histogram e1 to e2], [Histogram_SetClassSize(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCreateAlias], [Atom Parameters], 2, 2, [Att(47, p(1)) := p(2)], [Sets the value of attribute CreateAlias (# 47) of Histogram e1 to e2], [Histogram_SetCreateAlias(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCreateAlias], [Atom Parameters], 1, 1, [Att(47, p(1))], [Returns the value of attribute CreateAlias (# 47) of Histogram e1], [Histogram_GetCreateAlias(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetAliasesCreated], [Atom Parameters], 1, 1, [Att(51, p(1))], [Returns the value of attribute AliasesCreated (# 51) of Histogram e1], [Histogram_GetAliasesCreated(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetAliasesCreated], [Atom Parameters], 2, 2, [Att(51, p(1)) := p(2)], [Sets the value of attribute AliasesCreated (# 51) of Histogram e1 to e2], [Histogram_SetAliasesCreated(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetIncludeOutofRangeScore], [Atom Parameters], 2, 2, [Att(50, p(1)) := p(2)], [Sets the value of attribute IncludeOutofRangeScore (# 50) of Histogram e1 to e2], [Histogram_SetIncludeOutofRangeScore(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetIncludeOutofRangeScore], [Atom Parameters], 1, 1, [Att(50, p(1))], [Returns the value of attribute IncludeOutofRangeScore (# 50) of Histogram e1], [Histogram_GetIncludeOutofRangeScore(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetUseAtomName], [Atom Parameters], 1, 1, [Att(48, p(1))], [Returns the value of attribute UseAtomName (# 48) of Histogram e1], [Histogram_GetUseAtomName(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetUseAtomName], [Atom Parameters], 2, 2, [Att(48, p(1)) := p(2)], [Sets the value of attribute UseAtomName (# 48) of Histogram e1 to e2], [Histogram_SetUseAtomName(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetAliasName], [Atom Parameters], 1, 1, [TextAtt(46, p(1))], [Returns the string value of attribute AliasName (# 46) of Histogram e1], [Histogram_GetAliasName(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetAliasName], [Atom Parameters], 2, 2, [TextAtt(46, p(1)) := p(2)], [Sets the string value of attribute AliasName (# 46) of Histogram e1 to e2], [Histogram_SetAliasName(c, [TableName])], 0, [Histogram.atm]);
DefineFunction([Histogram_SetStartValue], [Atom Parameters], 2, 2, [Att(44, p(1)) := p(2)], [Sets the value of attribute StartValue (# 44) of Histogram e1 to e2], [Histogram_SetStartValue(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetStartValue], [Atom Parameters], 1, 1, [Att(44, p(1))], [Returns the value of attribute StartValue (# 44) of Histogram e1], [Histogram_GetStartValue(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetPredefinedMonitoring], [Atom Parameters], 2, 2, [Att(42, p(1)) := p(2)], [Sets the value of attribute PredefinedMonitoring (# 42) of Histogram e1 to e2], [Histogram_SetPredefinedMonitoring(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetPredefinedMonitoring], [Atom Parameters], 1, 1, [Att(42, p(1))], [Returns the value of attribute PredefinedMonitoring (# 42) of Histogram e1], [Histogram_GetPredefinedMonitoring(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetAutomaticScaling], [Atom Parameters], 2, 2, [Att(38, p(1)) := p(2)], [Sets the value of attribute AutomaticScaling (# 38) of Histogram e1 to e2], [Histogram_SetAutomaticScaling(c, 1)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetAutomaticScaling], [Atom Parameters], 1, 1, [Att(38, p(1))], [Returns the value of attribute AutomaticScaling (# 38) of Histogram e1], [Histogram_GetAutomaticScaling(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_GetHeightBoundingBox], [Atom Parameters], 1, 1, [Att(22, p(1))], [p(1) as HistogramResult: Double. Get the property Height of Histogram.], [newHeight := Histogram_GetHeight( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetHeightBoundingBox], [Atom Parameters], 2, 2, [Att(22, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property Height of Histogram.], [Histogram_SetHeight( atmHistogram, newHeight )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLinewidth], [Atom Parameters], 2, 2, [Att(35, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLinewidth of Histogram.], [Histogram_SetCumulativeLinewidth( atmHistogram, newCumulativeLinewidth )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLinewidth], [Atom Parameters], 1, 1, [Att(35, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLinewidth of Histogram.], [newCumulativeLinewidth := Histogram_GetCumulativeLinewidth( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetCumulativeLineDotsVisible], [Atom Parameters], 2, 2, [Att(33, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property CumulativeLineDotsVisible of Histogram.], [Histogram_SetCumulativeLineDotsVisible( atmHistogram, newCumulativeLineDotsVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetCumulativeLineDotsVisible], [Atom Parameters], 1, 1, [Att(33, p(1))], [p(1) as HistogramResult: Boolean. Get the property CumulativeLineDotsVisible of Histogram.], [newCumulativeLineDotsVisible := Histogram_GetCumulativeLineDotsVisible( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetLegendAtXAxisRotation], [Atom Parameters], 2, 2, [Att(31, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property LegendAtXAxisRotation of Histogram.], [Histogram_SetLegendAtXAxisRotation( atmHistogram, newLegendAtXAxisRotation )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetLegendAtXAxisRotation], [Atom Parameters], 1, 1, [Att(31, p(1))], [p(1) as HistogramResult: Double. Get the property LegendAtXAxisRotation of Histogram.], [newLegendAtXAxisRotation := Histogram_GetLegendAtXAxisRotation( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetLegendAtXAxis], [Atom Parameters], 2, 2, [Att(29, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property LegendAtXAxis of Histogram.], [Histogram_SetLegendAtXAxis( atmHistogram, newLegendAtXAxis )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetLegendAtXAxis], [Atom Parameters], 1, 1, [Att(29, p(1))], [p(1) as HistogramResult: Boolean. Get the property LegendAtXAxis of Histogram.], [newLegendAtXAxis := Histogram_GetLegendAtXAxis( atmHistogram )], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLineDotsVisible], [Atom Parameters], 2, 2, [Att(27, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property ConnectingLineDotsVisible of Histogram.], [Histogram_SetConnectingLineDotsVisible( atmHistogram, newConnectingLineDotsVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLineDotsVisible], [Atom Parameters], 1, 1, [Att(27, p(1))], [p(1) as HistogramResult: Boolean. Get the property ConnectingLineDotsVisible of Histogram.], [Histogram_GetConnectingLineDotsVisible(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLinewidth], [Atom Parameters], 2, 2, [Att(25, p(1)) := p(2)], [p(1) as Histogramp(2) as DoubleResult: none. Sets the property ConnectingLinewidth of Histogram.], [Histogram_SetConnectingLinewidth( atmHistogram, newConnectingLinewidth )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLinewidth], [Atom Parameters], 1, 1, [Att(25, p(1))], [p(1) as HistogramResult: Double. Get the property ConnectingLinewidth of Histogram.], [Histogram_GetConnectingLinewidth(c)], 0, [Histogram.atm]);
DefineFunction([Histogram_SetConnectingLineVisible], [Atom Parameters], 2, 2, [Att(23, p(1)) := p(2)], [p(1) as Histogramp(2) as BooleanResult: none. Sets the property ConnectingLineVisible of Histogram.], [Histogram_SetConnectingLineVisible( atmHistogram, newConnectingLineVisible )], 0, [Histogram.atm]);
DefineFunction([Histogram_GetConnectingLineVisible], [Atom Parameters], 1, 1, [Att(23, p(1))], [p(1) as HistogramResult: Boolean. Get the property ConnectingLineVisible of Histogram.], [newConnectingLineVisible := Histogram_GetConnectingLineVisible( atmHistogram )], 0, [Histogram.atm]);
Set(Icon(a), 
	RegisterIcon(pDir([media\images\default.jpg]), [default.jpg]));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\Histogram.ico]));
SetChannels(1, 0);
SetChannelRanges(1, 1, 0, 0);
int001(179);
SetSize(10, 6, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(52);
SetAttributeName(r(1), [id]);
SetAttributeName(r(2), [NumberOfSegments]);
SetAttributeName(r(3), [MaximumScore]);
SetAttributeName(r(4), [Title]);
SetAttributeName(r(5), [TextColor]);
SetAttributeName(r(6), [BorderColor]);
SetAttributeName(r(7), [TextSizeTitle]);
SetAttributeName(r(8), [TextSizeScores]);
SetAttributeName(r(9), [TextSizeLegend]);
SetAttributeName(r(10), [TextSizeYAxis]);
SetAttributeName(r(11), [TitleVisible]);
SetAttributeName(r(12), [LegendVisible]);
SetAttributeName(r(13), [ScoresVisible]);
SetAttributeName(r(14), [HistogramVisible]);
SetAttributeName(r(15), [YAxisValuesVisible]);
SetAttributeName(r(16), [YAxisNumberOfValues]);
SetAttributeName(r(17), [YAxisLinesVisible]);
SetAttributeName(r(18), [YAxisLinesColor]);
SetAttributeName(r(19), [ShowScoresBesidesLegend]);
SetAttributeName(r(20), [SegmentWidth]);
SetAttributeName(r(21), [SegmentInBetweenSpace]);
SetAttributeName(r(22), [HeightBoundingBox]);
SetAttributeName(r(23), [ConnectingLineVisible]);
SetAttributeName(r(24), [ConnectingLineColor]);
SetAttributeName(r(25), [ConnectingLinewidth]);
SetAttributeName(r(26), [ConnectingLineDotsColor]);
SetAttributeName(r(27), [ConnectingLineDotsVisible]);
SetAttributeName(r(28), [ConnectingLineDotsRadius]);
SetAttributeName(r(29), [LegendAtXAxis]);
SetAttributeName(r(30), [TotalScore]);
SetAttributeName(r(31), [LegendAtXAxisRotation]);
SetAttributeName(r(32), [CumulativeLineVisible]);
SetAttributeName(r(33), [CumulativeLineDotsVisible]);
SetAttributeName(r(34), [CumulativeLineColor]);
SetAttributeName(r(35), [CumulativeLinewidth]);
SetAttributeName(r(36), [CumulativeLineDotsColor]);
SetAttributeName(r(37), [CumulativeLineDotsRadius]);
SetAttributeName(r(38), [AutomaticScaling]);
SetAttributeName(r(39), [CurrentSegmentRule]);
SetAttributeName(r(40), [CurrentSegmentColorRule]);
SetAttributeName(r(41), [Expression]);
SetAttributeName(r(42), [PredefinedMonitoring]);
SetAttributeName(r(43), [MonitorRefreshRate]);
SetAttributeName(r(44), [StartValue]);
SetAttributeName(r(45), [ClassSize]);
SetAttributeName(r(46), [AliasName]);
SetAttributeName(r(47), [CreateAlias]);
SetAttributeName(r(48), [UseAtomName]);
SetAttributeName(r(49), [CreateFunctions]);
SetAttributeName(r(50), [IncludeOutofRangeScore]);
SetAttributeName(r(51), [AliasesCreated]);
SetAttributeName(r(52), [NumberOfSegmentsDrawn]);
SetAtt(r(2), 10);
SetTextAtt(r(4), [Histogram]);
SetExprAtt(r(5), [colorblack]);
SetExprAtt(r(6), [colorblack]);
SetAtt(r(7), 0.5);
SetAtt(r(8), 0.25);
SetAtt(r(9), 0.25);
SetAtt(r(10), 0.25);
SetAtt(r(11), 1);
SetAtt(r(12), 1);
SetAtt(r(13), 1);
SetAtt(r(14), 1);
SetAtt(r(15), 1);
SetAtt(r(16), 5);
SetAtt(r(17), 1);
SetExprAtt(r(18), [ColorGray]);
SetAtt(r(20), 0.55);
SetAtt(r(21), 0.25);
SetAtt(r(22), 5);
SetExprAtt(r(24), [ColorBlack]);
SetAtt(r(25), 1);
SetExprAtt(r(26), [ColorBlack]);
SetAtt(r(28), 0.2);
SetExprAtt(r(34), [ColorBlack]);
SetAtt(r(35), 1);
SetExprAtt(r(36), [ColorBlack]);
SetAtt(r(37), 0.2);
SetAtt(r(38), 1);
SetTextAtt(r(39), [{.0|0. None selected.}0]);
SetTextAtt(r(40), [{.0|0. None selected.}0]);
SetExprAtt(r(43), [60]);
SetAtt(r(44), 1);
SetAtt(r(45), 1);
SetTextAtt(r(46), [untitled]);
SetAtt(r(48), 1);
SetExprAtt(r(49), [Set( OnInit, Concat(  [  do(   RegisterFunction(       ],    sbo, TextAtt([AliasName]), sbc,    [,    [Basic],    2,    2,    Concat([cell(p(1),p(2),vtp(],string(ptv),[))]),    [Returns table value e1, e2],    [No example],    True, [Table]   ),   RegisterFunction(    ],    sbo, Concat([Set], TextAtt([AliasName])), sbc,    [,    [Basic],    3,    3,    Concat([setcell(p(1),p(2),p(3),vtp(],string(ptv),[))]),    [Sets table e1, e2 to e3],    [No example],    True, [Table]   ),   RegisterFunction(    ],    sbo, Concat([Ref], TextAtt([AliasName])), sbc,    [,    [Basic],    0,    0,    Concat([vtp(], String(ptv),[)]),    [Reference to the table with an alias],    [No example],    True, [Table]   )  )  ] ))]);
SetAtt(r(50), 1);
int024;
SetTable(10, 4);
int015(0, 64, [ 
1
2
3
4
5
6
7
8
9
10
]);
int015(1, 64, [`SegmentScore`
0
0
0
0
0
0
0
0
0
0
]);
int015(2, 112, [`SegmentCumulativeScore`
0
0
0
0
0
0
0
0
0
0
]);
int015(3, 89, [`SegmentColor`
16711680
16711680
16711680
16711680
16711680
16711680
16711680
16711680
16711680
16711680
]);
int015(4, 64, [`SegmentName`
1
2
3
4
5
6
7
8
9
10
]);
Set(OnEvent, [if(  IcConnected(1, c),  do(    var([valClass], vbValue),            valClass := ceil(((Histogram_GetExpression(c) - Histogram_GetStartvalue(c)) / Histogram_GetClassSize(c))) + 1,    if(      and(        valClass >= 1,        valClass <= Histogram_GetNumberOfSegments(c)      ),      do(                  SetLabel([t-who], valClass, c),        Histogram_SetSegmentScore(c, Label([t-who], c), Histogram_GetSegmentScore(c, Label([t-who], c)) + 1)      ),      if(        Histogram_GetIncludeOutofRangeScore(c),        do(            if(            valClass < 1,            valClass := 1,            valClass := Histogram_GetNumberOfSegments(c)          ),          SetLabel([t-who], valClass, c),          Histogram_SetSegmentScore(c, Label([t-who], c), Histogram_GetSegmentScore(c, Label([t-who], c)) + 1)               )      )     ),     CreateEvent(Histogram_GetMonitorRefreshRate(c), c)     ),  do(    Trace(concat([No atom connected to ], name(c))),    DisplayTracer  ))]);
Set(OnCreation, [Histogram_OnCreation(c)]);
Set(OnDestruction, [if(  StringPos([Histogram_Init], OnInit(c)) = 0,  Histogram_DeleteAliases(c))]);
Set(OnReset, [do( Histogram_RepairAliasOnPaste(c), Histogram_Initialize(c), if(  Histogram_GetPredefinedMonitoring(c) = True,  CreateEvent(0, c) ))   ]);
Set(OnUser, [Do( { Delete any current instances of this form.}  GuiDestroy([Histogram]), { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\Histogram.gui]), 1),  { Show the GUI-form.} Guicreate([formHistogram], [Histogram], 0, c, 0, 1))]);
Set(On2DDraw, [Histogram_Animate2D(c)]);
Set(On3DDraw, [Histogram_Animate3D(c)]);
SetStatus(0);
int018;
int007;
