

{Preregister functions}

PreregisterFunction([StatusHistogram_SetNumberOfSegments], 2, 2);
PreregisterFunction([StatusHistogram_GetNumberOfSegments], 1, 1);
PreregisterFunction([StatusHistogram_Initialize], 1, 1);
PreregisterFunction([StatusHistogram_SetSegmentColor], 3, 3);
PreregisterFunction([StatusHistogram_SetSegmentScore], 3, 3);
PreregisterFunction([StatusHistogram_Animate2D], 1, 1);
PreregisterFunction([StatusHistogram_SetTotalScore], 2, 2);
PreregisterFunction([StatusHistogram_GetTotalScore], 1, 1);
PreregisterFunction([StatusHistogram_SetSegmentName], 3, 3);
PreregisterFunction([StatusHistogram_SetLegendVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetLegendVisible], 1, 1);
PreregisterFunction([StatusHistogram_GetSegmentColor], 2, 2);
PreregisterFunction([StatusHistogram_SetBorderColor], 2, 2);
PreregisterFunction([StatusHistogram_GetBorderColor], 1, 1);
PreregisterFunction([StatusHistogram_GetSegmentScore], 2, 2);
PreregisterFunction([StatusHistogram_UseDefaultColours], 1, 1);
PreregisterFunction([StatusHistogram_SetScoresVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetScoresVisible], 1, 1);
PreregisterFunction([StatusHistogram_SetTitle], 2, 2);
PreregisterFunction([StatusHistogram_GetTitle], 1, 1);
PreregisterFunction([StatusHistogram_SetTitleVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetTitleVisible], 1, 1);
PreregisterFunction([StatusHistogram_SetTextColor], 2, 2);
PreregisterFunction([StatusHistogram_GetTextColor], 1, 1);
PreregisterFunction([StatusHistogram_SetTextSizeScores], 2, 2);
PreregisterFunction([StatusHistogram_GetTextSizeScores], 1, 1);
PreregisterFunction([StatusHistogram_SetTextSizeTitle], 2, 2);
PreregisterFunction([StatusHistogram_GetTextSizeTitle], 1, 1);
PreregisterFunction([StatusHistogram_SetTextSizeLegend], 2, 2);
PreregisterFunction([StatusHistogram_GetTextSizeLegend], 1, 1);
PreregisterFunction([StatusHistogram_GuiDataTypeAndRangeValidation], 1, 1);
PreregisterFunction([StatusHistogram_GuiApplyChanges], 1, 1);
PreregisterFunction([StatusHistogram_GetSegmentName], 2, 2);
PreregisterFunction([StatusHistogram_SetRefreshRate], 2, 2);
PreregisterFunction([StatusHistogram_GetRefreshRate], 1, 1);
PreregisterFunction([StatusHistogram_Refresh], 1, 1);
PreregisterFunction([StatusHistogram_SetShowScoresBesidesLegend], 2, 2);
PreregisterFunction([StatusHistogram_GetShowScoresBesidesLegend], 1, 1);
PreregisterFunction([StatusHistogram_InitializeStatuses], 1, 1);
PreregisterFunction([StatusHistogram_SetStatusesInitialized], 2, 2);
PreregisterFunction([StatusHistogram_GetStatusesInitialized], 1, 1);
PreregisterFunction([StatusHistogram_SetSegmentWidth], 2, 2);
PreregisterFunction([StatusHistogram_GetSegmentWidth], 1, 1);
PreregisterFunction([StatusHistogram_ConvertTimeFromSecondsToHhMmSs], 1, 1);
PreregisterFunction([StatusHistogram_SetHeightBoundingBox], 2, 2);
PreregisterFunction([StatusHistogram_GetHeightBoundingBox], 1, 1);
PreregisterFunction([StatusHistogram_SetMaximumScore], 2, 2);
PreregisterFunction([StatusHistogram_GetMaximumScore], 1, 1);
PreregisterFunction([StatusHistogram_SetTextSizeYAxis], 2, 2);
PreregisterFunction([StatusHistogram_GetTextSizeYAxis], 1, 1);
PreregisterFunction([StatusHistogram_SetYAxisValuesVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetYAxisValuesVisible], 1, 1);
PreregisterFunction([StatusHistogram_SetYAxisNumberOfValues], 2, 2);
PreregisterFunction([StatusHistogram_GetYAxisNumberOfValues], 1, 1);
PreregisterFunction([StatusHistogram_SetNumberOfSegmentsDrawn], 2, 2);
PreregisterFunction([StatusHistogram_GetNumberOfSegmentsDrawn], 1, 1);
PreregisterFunction([StatusHistogram_SetYAxisLinesVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetYAxisLinesVisible], 1, 1);
PreregisterFunction([StatusHistogram_SetSegmentInBetweenSpace], 2, 2);
PreregisterFunction([StatusHistogram_GetSegmentInBetweenSpace], 1, 1);
PreregisterFunction([StatusHistogram_SetYAxisLinesColor], 2, 2);
PreregisterFunction([StatusHistogram_GetYAxisLinesColor], 1, 1);
PreregisterFunction([StatusHistogram_SetHistogramVisible], 2, 2);
PreregisterFunction([StatusHistogram_GetHistogramVisible], 1, 1);
PreregisterFunction([StatusHistogram_StartCollectingStatusInformation], 1, 1);
PreregisterFunction([StatusHistogram_Animate3D], 1, 1);
PreregisterFunction([StatusHistogram_GetAutomaticScaling], 1, 1);
PreregisterFunction([StatusHistogram_SetAutomaticScaling], 2, 2);


{Atom: StatusHistogram}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
Set(OnInit, [do( { This constant is set according to the number of statuses in the StatusList atom.   If you added statuses manually then change this constant to represent the number   of available statuses. } dim([STATUSHISTOGRAM_NUMBEROFSTATUSES], vbConstant, 33), { Define some columnnumber constants for the Status Histogram} dim([STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE], vbValue, 1), dim([STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTCOLOR], vbValue, 2), dim([STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTNAME], vbValue, 3),  { Event Code constants } dim([STATUSHISTOGRAM_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION], vbConstant, 2001), dim([STATUSHISTOGRAM_EVENTCODE_REFRESH], vbConstant, 2002))]);
int023([StatusHistogram], 0, 48);
DefineFunction([StatusHistogram_SetNumberOfSegments], [StatusHistogram], 2, 2, [do( Att([NumberOfSegments], p(1)) := p(2), nrows(p(1)) := p(2))], [p(1) as StatusHistogramp(2) as integer, the number of segmentsResult: none. Sets the property NumberOfSegments of StatusHistogram.], [StatusHistogram_SetNumberOfSegments( atmStatusHistogram, newNumberOfSegments )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetNumberOfSegments], [StatusHistogram], 1, 1, [Att([NumberOfSegments], p(1))], [p(1) as StatusHistogramResult: integer. Get the property NumberOfSegments of StatusHistogram.], [newNumberOfSegments := StatusHistogram_GetNumberOfSegments( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_Initialize], [StatusHistogram], 1, 1, [do( var([indexer], vbValue, 0),  {--Activate 3D animation of existing models--} SetSetting(sa3DOutline, 0, p(1)), SetSetting(sa3DDraw, 1, p(1)), { Put all segment scores back to zero. } for(  indexer := 1, indexer <= StatusHistogram_GetNumberOfSegments(p(1)), inc(indexer),  StatusHistogram_SetSegmentScore(p(1), indexer, 0) ),  { Put the maximum score back to zero } StatusHistogram_SetMaximumScore(p(1), 0),  { Put the number of segments drawn back to zero } StatusHistogram_SetNumberOfSegmentsDrawn(p(1), 0),  if(  AtomExists(in(1, p(1))) = true,  do(   { create an event to start collecting status information. This is done by an event because     if we call EnableStatusMonitor here directly and the monitor has a lower rank than the atom to be     monitored this atom's onReset event will fire later and will DisableTheStatusMonitor. Creating an event     at time 0 will occur after all onReset eventHandlers are fired. You see...}   createevent(0, p(1), STATUSHISTOGRAM_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION),      { And create an event to start up the Refreshment Cycle. This is an almost immediate event so      that the user directly sees something on the diagram. Afterwards the refresh event is created with an interval     equal to the Refresh Rate. See the Refresh function for further details. }   createEvent(1, p(1), STATUSHISTOGRAM_EVENTCODE_REFRESH)     ) ))], [p(1) as StatusHistogramResult: none. INitializes the diagram.], [StatusHistogram_Initialize(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetSegmentColor], [StatusHistogram], 3, 3, [cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTCOLOR, p(1)) := p(3)], [p(1) as StatusHistogramp(2) as integer, Segment Indexp(3) as ColorResult: none. Sets the color for the specified Segment], [StatusHistogram_SetSegmentColor(c, indexer, RgbColor(cred, cgreen, cblue))], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetSegmentScore], [StatusHistogram], 3, 3, [do( if(  p(3) >= 0,  cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTSCORE, p(1)) := p(3),  do(   cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTSCORE, p(1)) := 0,   trace(    concat(     [The score of segment ],     string(p(2)),     [ has been set to zero because an attempt was made to set it to a value lower than zero. StatusHistogram: ],     string(name),     [, Atomid: ],     String(atomid(p(1)))    )   ),   displaytracer  ) ),  { Check if this is the maximum score. } if(  p(3) > StatusHistogram_GetMaximumScore(p(1)),  StatusHistogram_SetMaximumScore(p(1), p(3))  ))], [p(1) as StatusHistogramp(2) as integer, Segment Indexp(3) as double, ScoreResult: none. Sets the socre for the specified Segment], [StatusHistogram_SetSegmentScore(c, indexer, timeinstatus)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_Animate2D], [StatusHistogram], 1, 1, [do(
 var([atmC], vbAtom, p(1)),
 var([indexer], vbValue, 0),
 var([degrees], vbValue, 0),
 var([segmentsdrawn], vbValue, 0),
 var([offset], vbValue, 0),
 var([temp], vbValue, 0),
 var([valSegmentsToDraw], vbValue, 0),
 
 Repeat(
   StatusHistogram_GetNumberOfSegments(atmC), 
   if(
     StatusHistogram_GetSegmentScore(atmC, Count) > 0,
     Inc(valSegmentsToDraw)
   )
 ),

 StatusHistogram_SetNumberOfSegmentsDrawn(c, valSegmentsToDraw),

 {**Adjust xSize accordingly**}
 if(
   valSegmentsToDraw > 0,
   {xSize(atmC) := (StatusHistogram_GetSegmentWidth(atmC) + StatusHistogram_GetSegmentInBetweenSpace(atmC)) * valSegmentsToDraw + 2}
   StatusHistogram_SetSegmentWidth(atmC, (xSize(atmC) - 2 - (StatusHistogram_GetNumberOfSegmentsDrawn(atmC)) * StatusHistogram_GetSegmentInBetweenSpace(atmC)) / StatusHistogram_GetNumberOfSegmentsDrawn(atmC))
 ),
 
 if(
   StatusHistogram_GetAutomaticScaling(atmC),
   do(
     StatusHistogram_SetTextSizeTitle(atmC, StatusHistogram_GetHeightBoundingBox(atmC) / 10),
     StatusHistogram_SetTextSizeLegend(atmC, Min(xSize(atmC), StatusHistogram_GetHeightBoundingBox(atmC)) / 20),
     StatusHistogram_SetTextSizeScores(atmC, Min(xSize(atmC), StatusHistogram_GetHeightBoundingBox(atmC)) / 20),
     StatusHistogram_SetTextSizeYAxis(atmC, Min(xSize(atmC), StatusHistogram_GetHeightBoundingBox(atmC)) / 20)
   )
 ),
 
 StatusHistogram_SetHeightBoundingBox(atmC, ySize(atmC) - 2 * StatusHistogram_GetTextSizeTitle(atmC)),
 
 { The Diagram's Title }  
 if(
  StatusHistogram_GetTitleVisible(atmC),
  DrawText(
   1,
   StatusHistogram_GetHeightBoundingBox(atmC),
   StringLength(StatusHistogram_GetTitle(atmC)) * StatusHistogram_GetTextSizeTitle(atmC),
   StatusHistogram_GetTextSizeTitle(atmC) * 2,
   StatusHistogram_GetTitle(atmC),
   StatusHistogram_GetTextColor(atmC),
   StatusHistogram_GetTextSizeTitle(atmC),
   [Arial],
   0,
   0,
   0,
   HA_LEFT + VA_TOP
  )
 ),
 
 { APP-124 JG (29-04-2008) Show a message when the diagram is not refreshed...}
 if(
  runspeed = 1E40,
  DrawText(
   0,
   0,
   StatusHistogram_GetTextSizeTitle(atmC) * 40,
   StatusHistogram_GetTextSizeTitle(atmC) * 4,
   Concat(
    [Refresment has been paused.],
    CR,
    [(Lower the runspeed to refresh the diagram)]
   ),
   ColorRed,
   StatusHistogram_GetTextSizeTitle(atmC),
   [Arial],
   True,
   0,
   0,
   HA_LEFT + VA_TOP
  )
 ), 

 { default View when not connected or no scores yet available. }
 if(
  StatusHistogram_GetMaximumScore(atmC) = 0,
  do(
   DrawRectangle(
    1,
    0,
    xSize(atmC),
    StatusHistogram_GetHeightBoundingBox(atmC),
    colorblack,
    colorblack,
    1
   ),
  
   { Return nothing to quit the function. }
   return(0)
  )
 ),
 
 { Y-Axis }
 if(
  and(
   StatusHistogram_GetYAxisValuesVisible(atmC) = true,
   StatusHistogram_GetHistogramVisible(atmC) = true
  ),
  DrawLine(
   1,
   0,
   1,
   StatusHistogram_GetHeightBoundingBox(atmC),
   StatusHistogram_GetBorderColor(atmC), 
   1
  )
 ),
 
 { Y-Axis values. }
 if(
  and(
   StatusHistogram_GetYAxisValuesVisible(atmC) = true,
   StatusHistogram_GetHistogramVisible(atmC) = true
  ),
  for(
   indexer := 0, indexer <= StatusHistogram_GetYAxisNumberOfValues(atmC), inc(indexer),
   do(
    DrawText(
     - 10 * StatusHistogram_GetTextSizeYAxis(atmC) - StatusHistogram_GetTextSizeYAxis(atmC),
     (StatusHistogram_GetHeightBoundingBox(atmC) / StatusHistogram_GetYAxisNumberOfValues(atmC)) * (StatusHistogram_GetYAxisNumberOfValues(atmC) - indexer),
     10 * StatusHistogram_GetTextSizeYAxis(atmC),
     2 * StatusHistogram_GetTextSizeYAxis(atmC),
     DateTime((StatusHistogram_GetMaximumScore(atmC)/StatusHistogram_GetYAxisNumberOfValues(atmC)) * indexer, [hh:mm:ss]),
     StatusHistogram_GetTextColor(atmC),
     StatusHistogram_GetTextSizeYAxis(atmC),
     [Arial],
     0,
     0,
     0,
     HA_RIGHT
    ),
    
    { The horizontal lines belonging to the individual values on the Y Axis. }
    if(
     StatusHistogram_GetYAxisLinesVisible(atmC) = true,
     DrawLine(
      1,
      (StatusHistogram_GetHeightBoundingBox(atmC) / StatusHistogram_GetYAxisNumberOfValues(atmC)) * (StatusHistogram_GetYAxisNumberOfValues(atmC) - indexer),
      2 + StatusHistogram_GetNumberOfSegmentsDrawn(atmC) * (StatusHistogram_GetSegmentWidth(atmC) + StatusHistogram_GetSegmentInBetweenSpace(atmC)),
      (StatusHistogram_GetHeightBoundingBox(atmC) / StatusHistogram_GetYAxisNumberOfValues(atmC)) * (StatusHistogram_GetYAxisNumberOfValues(atmC) - indexer),
      StatusHistogram_GetYAxisLinesColor(atmC), 
      1
     )
    )
   )
  )
 ),
 
 if(
  and(
   StatusHistogram_GetShowScoresBesidesLegend(atmC) = true,
   StatusHistogram_GetScoresVisible(atmC) = true
  ),
  offset := StatusHistogram_GetTextSizeLegend(atmC) * 7
 ),
 
 if(
  StatusHistogram_GetYAxisValuesVisible(atmC) = true,
  offset := offset + StatusHistogram_GetTextSizeYAxis(atmC) * 7
 ),
 
 if(
  StatusHistogram_GetHistogramVisible(atmC) = false,
  offset := -3
 ),

 { Animation of the colored segments }
 for(
  indexer := 1, indexer <= StatusHistogram_GetNumberOfSegments(atmC), inc(indexer),
  do(
   if(
    StatusHistogram_GetSegmentScore(atmC, indexer) > 0,
    do(
     inc(segmentsdrawn),

     { ***************** SEGMENTS **************** }
     if(
      StatusHistogram_GetHistogramVisible(atmC) = true,

      DrawRectangle(
       (segmentsdrawn - 1) * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),
       StatusHistogram_GetHeightBoundingBox(atmC),
       segmentsdrawn * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),
       StatusHistogram_GetHeightBoundingBox(atmC) - StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)),
       StatusHistogram_GetSegmentColor(atmC, indexer),
       StatusHistogram_GetBorderColor(atmC),
       1
      )
     ),

     { ***************** LEGEND ************************ }
     if(
      StatusHistogram_GetLegendVisible(atmC) = True,
      do(
       { The box for the color }
       DrawRectangle(
        -1 * StatusHistogram_GetTextSizeLegend(atmC) - offset,
        StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),
        -1 * offset,
        StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 1),
        StatusHistogram_GetSegmentColor(atmC, indexer),
        StatusHistogram_GetBorderColor(atmC)
       ),
       
       { The name of the segment }
       DrawText(
        - 1 * StatusHistogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC))) - 1.5 * StatusHistogram_GetTextSizeLegend(atmC) - offset,
        StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - StatusHistogram_GetTextSizeLegend(atmC) / 2.5,
        StatusHistogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC))),
        StatusHistogram_GetTextSizeLegend(atmC) * 2,
        String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC)),
        StatusHistogram_GetTextColor(atmC),
        StatusHistogram_GetTextSizeLegend(atmC),
        [Arial],
        0,
        0,
        0,
        HA_RIGHT + VA_TOP
       ),
       
       if(
        and(
         StatusHistogram_GetShowScoresBesidesLegend(atmC) = true,
         StatusHistogram_GetScoresVisible(atmC) = true
        ),   
        DrawText(
         -1 * offset + StatusHistogram_GetTextSizeLegend(atmC),
         StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - StatusHistogram_GetTextSizeLegend(atmC) / 2.5,
         StatusHistogram_GetTextSizeLegend(atmC) * (8 + StringLength(String(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC)))),
         StatusHistogram_GetTextSizeLegend(atmC) * 2,
         DateTime(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC), [hh:mm:ss]),
         StatusHistogram_GetTextColor(atmC),
         StatusHistogram_GetTextSizeLegend(atmC),
         [Arial],
         0,
         0,
         0,
         HA_LEFT + VA_TOP
        )      
       )     
      )
     )
    )
   )   
  )
 ),
 
 segmentsdrawn := 0,
 
 { ***************** SCORES ******************* }
 for(
  indexer := 1, indexer <= StatusHistogram_GetNumberOfSegments(atmC), inc(indexer),
  if(
   and(
    StatusHistogram_GetScoresVisible(atmC) = True,
    StatusHistogram_GetShowScoresBesidesLegend(atmC) = false,
    StatusHistogram_GetSegmentScore(atmC, indexer) > 0,
    StatusHistogram_GetHistogramVisible(atmC) = true
   ),
   do(
    inc(segmentsdrawn),
    DrawText(
     (segmentsdrawn - 1) * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),
     StatusHistogram_GetHeightBoundingBox(atmC) - StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)) - 2 * StatusHistogram_GetTextSizeScores(atmC),
     StatusHistogram_GetTextSizeScores(atmC) * (8 + StringLength(String(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC)))),
     StatusHistogram_GetTextSizeScores(atmC) * 2,
     DateTime(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC), [hh:mm:ss]),
     StatusHistogram_GetTextColor(atmC),
     StatusHistogram_GetTextSizeScores(atmC)
    )
   )
  )
 )
)
], [p(1) as StatusHistogram
], [StatusHistogram_Animate2D(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTotalScore], [StatusHistogram], 2, 2, [Att([TotalScore], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as doubleResult: none. Sets the property TotalScore of StatusHistogram.], [StatusHistogram_SetTotalScore( atmStatusHistogram, newTotalScore )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTotalScore], [StatusHistogram], 1, 1, [Att([TotalScore], p(1))], [p(1) as StatusHistogramResult: double. Get the property TotalScore of StatusHistogram.], [newTotalScore := StatusHistogram_GetTotalScore( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetSegmentName], [StatusHistogram], 3, 3, [cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTNAME, p(1)) := p(3)], [p(1) as StatusHistogramp(2) as integer, Segment indexp(3) as string, Segment Name], [StatusHistogram_SetSegmentName(c, indexer, statusname(indexer))], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetLegendVisible], [StatusHistogram], 2, 2, [Att([LegendVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property LegendVisible of StatusHistogram.], [StatusHistogram_SetLegendVisible( atmStatusHistogram, newLegendVisible )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetLegendVisible], [StatusHistogram], 1, 1, [Att([LegendVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property LegendVisible of StatusHistogram.], [newLegendVisible := StatusHistogram_GetLegendVisible( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetSegmentColor], [StatusHistogram], 2, 2, [cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTCOLOR, p(1))], [p(1) as StatusHistogramp(2) as integer, Segment indexResult: Color. The color pointer for the requested Segmetn index], [StatusHistogram_GetSegmentColor(c, indexer)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetBorderColor], [StatusHistogram], 2, 2, [Att([BorderColor], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property BorderColor of StatusHistogram.], [StatusHistogram_SetBorderColor( atmStatusHistogram, newBorderColor )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetBorderColor], [StatusHistogram], 1, 1, [Att([BorderColor], p(1))], [p(1) as StatusHistogramResult: Double. Get the property BorderColor of StatusHistogram.], [newBorderColor := StatusHistogram_GetBorderColor( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetSegmentScore], [StatusHistogram], 2, 2, [cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTSCORE, p(1))], [p(1) as StatusHistogramp(2) as integer, Segment indexResult: Double. The score for the segment with index p(2) of StatusHistogram p(1)], [StatusHistogram_GetSegmentScore(c, 3)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_UseDefaultColours], [StatusHistogram], 1, 1, [do( var([indexer], vbValue, 0), var([indexer2], vbValue, 0), var([cred], vbValue, 0), var([cgreen], vbValue, 0), var([cblue], vbValue, 0),  { We divide the number of segments in 5 ranges. Every range will vary one of the color components Red, Green or Blue.   This way we get smoothly changing colors from red to purple to blue to green to yellow. Some understanding of color profiles is assumed.} var([b1], vbValue, 0), var([b2], vbValue, 0), var([b3], vbValue, 0), var([b4], vbValue, 0), var([b5], vbValue, 0),  { Obtain the ranges borders depending on the number of segments } b1 := Round(StatusHistogram_GetNumberOfSegments(p(1)) / 5 * 1), b2 := 2 * b1, b3 := 3 * b1, b4 := 4 * b1, b5 := 5 * b1,  { Define the default coloring of the segments. } for(  indexer2 := 1, indexer2 <= StatusHistogram_GetNumberOfSegments(p(1)), inc(indexer2),    do(   indexer := mod(indexer2, 5),      if(    indexer = 0,    indexer := 5   ),      indexer := indexer / 5,    indexer := indexer * StatusHistogram_GetNumberOfSegments(p(1)),   indexer := indexer - b1 + 1,   indexer := indexer + trunc(indexer2 / 5),   if(    indexer <= b1,    do(     cred := 255,     cgreen := 0,     cblue := indexer / b1 * 255    )   ),     if(    and(     indexer > b1,     indexer <= b2    ),    do(     cred := 255 - ((indexer - b1)/ (b2 - b1)) * 255,     cgreen := 0,     cblue := 255    )   ),       if(    and(     indexer > b2,     indexer <= b3    ),    do(     cred := 0,     cgreen := ((indexer - b2) / (b3 - b2)) * 255,     cblue := 255    )   ),      if(    and(     indexer > b3,     indexer <= b4    ),    do(     cred := 0,     cgreen := 255,     cblue := 255 - ((indexer - b3) / (b4 - b3)) * 255    )   ),        if(    and(     indexer > b4,     indexer <= b5    ),    do(     cred := ((indexer - b4) / (b5 - b4)) * 255,     cgreen := 255,     cblue := 0    )   ),     StatusHistogram_SetSegmentColor(p(1), indexer2, RgbColor(cred, cgreen, cblue))  ) ))], [p(1) as StatusHistogramResult: none. Sets the default colors of the connected atom.], [StatusHistogram_UseDefaultColours(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetScoresVisible], [StatusHistogram], 2, 2, [Att([ScoresVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property ScoresVisible of StatusHistogram.], [StatusHistogram_SetScoresVisible(c, true)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetScoresVisible], [StatusHistogram], 1, 1, [Att([ScoresVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property PercentagesVisible of StatusHistogram.], [StatusHistogram_GetScoresVisible(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTitle], [StatusHistogram], 2, 2, [Att([Title], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as StringResult: none. Sets the property Title of StatusHistogram.], [StatusHistogram_SetTitle( atmStatusHistogram, newTitle )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTitle], [StatusHistogram], 1, 1, [Att([Title], p(1))], [p(1) as StatusHistogramResult: String. Get the property Title of StatusHistogram.], [newTitle := StatusHistogram_GetTitle( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTitleVisible], [StatusHistogram], 2, 2, [Att([TitleVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property TitleVisible of StatusHistogram.], [StatusHistogram_SetTitleVisible( atmStatusHistogram, newTitleVisible )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTitleVisible], [StatusHistogram], 1, 1, [Att([TitleVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property TitleVisible of StatusHistogram.], [newTitleVisible := StatusHistogram_GetTitleVisible( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTextColor], [StatusHistogram], 2, 2, [Att([TextColor], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as ColorResult: none. Sets the property TextColor of StatusHistogram.], [StatusHistogram_SetTextColor( atmStatusHistogram, newTextColor )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTextColor], [StatusHistogram], 1, 1, [Att([TextColor], p(1))], [p(1) as StatusHistogramResult: Color. Get the property TextColor of StatusHistogram.], [newTextColor := StatusHistogram_GetTextColor( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTextSizeScores], [StatusHistogram], 2, 2, [Att([TextSizeScores], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property TextSizePercentages of StatusHistogram.], [StatusHistogram_SetTextSizePercentages( atmStatusHistogram, newTextSizePercentages )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTextSizeScores], [StatusHistogram], 1, 1, [Att([TextSizeScores], p(1))], [p(1) as StatusHistogramResult: Double. Get the property TextSizePercentages of StatusHistogram.], [newTextSizePercentages := StatusHistogram_GetTextSizePercentages( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTextSizeTitle], [StatusHistogram], 2, 2, [Att([TextSizeTitle], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property TextSizeTitle of StatusHistogram.], [StatusHistogram_SetTextSizeTitle( atmStatusHistogram, newTextSizeTitle )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTextSizeTitle], [StatusHistogram], 1, 1, [Att([TextSizeTitle], p(1))], [p(1) as StatusHistogramResult: Double. Get the property TextSizeTitle of StatusHistogram.], [newTextSizeTitle := StatusHistogram_GetTextSizeTitle( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTextSizeLegend], [StatusHistogram], 2, 2, [Att([TextSizeLegend], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property TextSizeLegend of StatusHistogram.], [StatusHistogram_SetTextSizeLegend( atmStatusHistogram, newTextSizeLegend )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTextSizeLegend], [StatusHistogram], 1, 1, [Att([TextSizeLegend], p(1))], [p(1) as StatusHistogramResult: Double. Get the property TextSizeLegend of StatusHistogram.], [newTextSizeLegend := StatusHistogram_GetTextSizeLegend( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GuiDataTypeAndRangeValidation], [StatusHistogram], 1, 1, [do( var([PassCheck], vbValue, true), var([TextValue], vbString, 0), var([NumericValue], vbValue, 0), { First we do a DataType and DataRange validation before we really apply the changes...} { TITLE } textvalue := GuiControl([ebTitle], GuiGet([Text])),  if(  StringLength(textvalue) = 0,  do(   passcheck := false,      msg([The title has to contain at least one character.]),   return(passcheck)  ) ),  { REFRESH RATE } textvalue := GuiControl([ebRefreshRate], GuiGet([Text])), numericvalue := Value(GuiControl([ebRefreshRate], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the refresh rate is invalid.]),   return(passcheck)  ) ),  { TEXTSIZE TITLE }  textvalue := GuiControl([ebTextSizeTitle], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeTitle], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the title is invalid.]),   return(passcheck)  ) ), { TEXTSIZE LEGEND }  textvalue := GuiControl([ebTextSizeLegend], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeLegend], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the legend is invalid.]),   return(passcheck)  ) ), { TEXTSIZE SCORES }  textvalue := GuiControl([ebTextSizeScores], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeScores], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the scores is invalid.]),   return(passcheck)  ) ), { TEXTSIZE Y AXIS }  textvalue := GuiControl([ebTextSizeYAxis], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeYAxis], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the Y-Axis is invalid.]),   return(passcheck)  ) ), { HEIGHT BOUNDING BOX }  textvalue := GuiControl([ebHeightBoundingBox], GuiGet([Text])), numericvalue := Value(GuiControl([ebHeightBoundingBox], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the height of the bounding box is invalid.]),   return(passcheck)  ) ), { SEGMENT WIDTH }  textvalue := GuiControl([ebSegmentWidth], GuiGet([Text])), numericvalue := Value(GuiControl([ebSegmentWidth], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the width of a segment is invalid.]),   return(passcheck)  ) ),   { SEGMENT IN BETWEEN SPACE }  textvalue := GuiControl([ebSegmentInBetweenSpace], GuiGet([Text])), numericvalue := Value(GuiControl([ebSegmentInBetweenSpace], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue < 0  ),  do(   passcheck := false,      msg([The inserted value for the space in between segments is invalid.]),   return(passcheck)  ) ), { NUMBER OF VALUES Y-AXIS }  textvalue := GuiControl([ebYAxisNumberOfValues], GuiGet([Text])), numericvalue := Value(GuiControl([ebYAxisNumberOfValues], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the number of values on the Y-Axis is invalid.]),   return(passcheck)  ) ), { If the check succeeds then apply the changes to the StatusHistogram } if(  passcheck = true,  StatusHistogram_GuiApplyChanges(p(1)) ),  return(passcheck))], [p(1) as StatusHistogramResult: Boolean. Returns tru if the data validation succeeds else false ], [StatusHistogram_GuiDataTypeAndRangeValidation(Gui Atom)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GuiApplyChanges], [StatusHistogram], 1, 1, [do(
 var([atmC], vbAtom, p(1)),

 StatusHistogram_SetTitle(
  atmC,
  GuiControl([ebTitle], GuiGet([Text]))
 ),
   
 StatusHistogram_SetRefreshRate(
  atmC,
  Value(GuiControl([ebRefreshRate], GuiGet([Text])))
 ),

 StatusHistogram_SetTextColor(
  atmC,
  GuiControl([cpText], GuiGet([Color]))
 ),

 StatusHistogram_SetBorderColor(
  atmC,
  GuiControl([cpBorder], GuiGet([Color]))
 ),

 StatusHistogram_SetYAxisLinesColor(
  atmC,
  GuiControl([cpYAxisLinesColor], GuiGet([Color]))
 ),

 StatusHistogram_SetAutomaticScaling(
  atmC,
  GuiControl([cbAutomaticScaling], GuiGet([Checked])) 
 ), 
 
 {**Update GUI**}
 if(
   StatusHistogram_GetAutomaticScaling(atmC) = True,
   do(    
     GuiControl(
      [ebTextSizeTitle], 
      GuiSet([Text], String(StatusHistogram_GetTextSizeTitle(GuiAtom)))
     ),
     
     GuiControl(
      [ebTextSizeLegend], 
      GuiSet([Text], String(StatusHistogram_GetTextSizeLegend(GuiAtom)))
     ),
     
     GuiControl(
      [ebTextSizeScores], 
      GuiSet([Text], String(StatusHistogram_GetTextSizeScores(GuiAtom)))
     ),
    
     GuiControl(
      [ebTextSizeYAxis], 
      GuiSet([Text], String(StatusHistogram_GetTextSizeYAxis(GuiAtom)))
     )
   )
 ),
 {**End Update GUI**}

 StatusHistogram_SetTextSizeTitle(
  atmC,
  Value(GuiControl([ebTextSizeTitle], GuiGet([Text])))
 ),
    
 StatusHistogram_SetTextSizeLegend(
  atmC,
  Value(GuiControl([ebTextSizeLegend], GuiGet([Text])))
 ),
 
 StatusHistogram_SetTextSizeScores(
  atmC,
  Value(GuiControl([ebTextSizeScores], GuiGet([Text])))
 ),

 StatusHistogram_SetTextSizeYAxis(
  atmC,
  Value(GuiControl([ebTextSizeYAxis], GuiGet([Text])))
 ),

 StatusHistogram_SetYAxisNumberOfValues(
  atmC,
  Value(GuiControl([ebYAxisNumberOfValues], GuiGet([Text])))
 ),

 StatusHistogram_SetSegmentWidth(
  atmC,
  Value(GuiControl([ebSegmentWidth], GuiGet([Text])))
 ),
 
  StatusHistogram_SetSegmentInBetweenSpace(
  atmC,
  Value(GuiControl([ebSegmentInBetweenSpace], GuiGet([Text])))
 ),

 StatusHistogram_SetHeightBoundingBox(
  atmC,
  Value(GuiControl([ebHeightBoundingBox], GuiGet([Text])))
 ),
 
 {**Adjust xSize accordingly**}
 if(
   StatusHistogram_GetNumberOfSegmentsDrawn(atmC) > 0,
   xSize(atmC) := (StatusHistogram_GetSegmentWidth(atmC) + StatusHistogram_GetSegmentInBetweenSpace(atmC)) * StatusHistogram_GetNumberOfSegmentsDrawn(atmC) + 2
 ),  
 
 {**Adjust ySize acoordingly**}
 ySize(atmC) := StatusHistogram_GetHeightBoundingBox(atmC) + 2 * StatusHistogram_GetTextSizeTitle(atmC),
 
 StatusHistogram_SetTitleVisible(
  atmC,
  GuiControl([cbTitleVisible], GuiGet([Checked]))
 ),

 StatusHistogram_SetLegendVisible(
  atmC,
  GuiControl([cbLegendVisible], GuiGet([Checked]))
 ),
 
 StatusHistogram_SetScoresVisible(
  atmC,
  GuiControl([cbScoresVisible], GuiGet([Checked]))
 ),

 StatusHistogram_SetHistogramVisible(
  atmC,
  GuiControl([cbHistogramVisible], GuiGet([Checked]))
 ),

 StatusHistogram_SetShowScoresBesidesLegend(
  atmC,
  GuiControl([cbShowScoresBesidesLegend], GuiGet([Checked]))
 ),

 StatusHistogram_SetYAxisLinesVisible(
  atmC,
  GuiControl([cbYAxisLinesVisible], GuiGet([Checked]))
 ),

 StatusHistogram_SetYAxisValuesVisible(
  atmC,
  GuiControl([cbYAxisValuesVisible], GuiGet([Checked]))
 ),
  
 UpdateAnimator
)
], [p(1) as StatusHistogram

Result: none. Applies all the inserted values for the StatusHistogram atom
], [StatusHistogram_GuiApplyChanges(GuiAtom)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetSegmentName], [StatusHistogram], 2, 2, [cell(p(2), StatusHistogram_COLUMNNUMBER_SEGMENTNAME, p(1), 2)], [p(1) as StatusHistogramp(2) as Integer, index of the segmentResult: String. The name og the segment with index p(2)], [StatusHistogram_GetSegmentName(c, 3)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetRefreshRate], [StatusHistogram], 2, 2, [Att([RefreshRate], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as IntegerResult: none. Sets the property RefreshRate of StatusHistogram.], [StatusHistogram_SetRefreshRate( atmStatusHistogram, newRefreshRate )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetRefreshRate], [StatusHistogram], 1, 1, [Att([RefreshRate], p(1))], [p(1) as StatusHistogramResult: Integer. Get the property RefreshRate of StatusHistogram.], [newRefreshRate := StatusHistogram_GetRefreshRate( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_Refresh], [StatusHistogram], 1, 1, [{ APP-124 JG (29-04-2008) When speed is set to unlimited we cancel the refresh procedure...for slowing down reasons...}do( if(  RunSpeed < 1e40,  if(   atomexists(in(1, c)) = True,     do(    var([indexer], vbValue, 0),    var([timeinstatus], vbValue, 0),    var([segmentsdrawn], vbValue, 0),        for(     indexer:=1, indexer <= 255, inc(indexer),     do(      timeinstatus := StatusTime(in(1, p(1)), indexer),           if(       timeinstatus > 0,       { Now let's see if we can store the information of the score, the name and the identifier on the row}       do(        StatusHistogram_SetSegmentScore(p(1), indexer, timeinstatus),        inc(segmentsdrawn)       )      )     )    ),        { Adjust the number of segments drawn. }    StatusHistogram_SetNumberOfSegmentsDrawn(p(1), segmentsdrawn)   )  ) ), { create a new event to trigger the refresh procedure. } createEvent(StatusHistogram_GetRefreshRate(p(1)), p(1), STATUSHISTOGRAM_EVENTCODE_REFRESH))], [p(1) as StatusHistogramResult: none. Refreshes the information of the StatusHistogram, is only executed in Pull mode], [StatusHistogram_Refresh(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetShowScoresBesidesLegend], [StatusHistogram], 2, 2, [Att([ShowScoresBesidesLegend], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property ShowScoresBesidesLegend of StatusHistogram.], [StatusHistogram_SetShowScoresBesidesLegend(c, true)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetShowScoresBesidesLegend], [StatusHistogram], 1, 1, [Att([ShowScoresBesidesLegend], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property ShowScoresBesidesLegend of StatusHistogram.], [StatusHistogram_GetShowScoresBesidesLegend(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_InitializeStatuses], [StatusHistogram], 1, 1, [do( { Only initialize the status when the atom is created for the first time in the model. When an atom is duplicated in the model we don't want the statuses to be   initialized again because then coloring information can get lost. And that's exactly something why you want to duplicate a StatusHistogram because you want to   reuse self defined coloring of the segments. }  if(  StatusHistogram_GetStatusesInitialized(p(1)) = false,  do(   var([indexer], vbValue, 0),      StatusHistogram_SetNumberOfSegments(p(1), STATUSHISTOGRAM_NUMBEROFSTATUSES),     for(    indexer := 1, indexer <= STATUSHISTOGRAM_NUMBEROFSTATUSES, inc(indexer),    StatusHistogram_SetSegmentName(p(1), indexer, statusname(indexer))   ),      StatusHistogram_UseDefaultColours(p(1)),     StatusHistogram_SetStatusesInitialized(p(1), true)   ) ))], [p(1) as StatusHistogramResult: none. Initializes the available statuses for the Status Histogram], [StatusHistogram_InitializeStatuses(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetStatusesInitialized], [StatusHistogram], 2, 2, [Att([StatusesInitialized], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property StatusesInitialized of StatusHistogram.], [StatusHistogram_SetStatusesInitialized( atmStatusHistogram, newStatusesInitialized )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetStatusesInitialized], [StatusHistogram], 1, 1, [Att([StatusesInitialized], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property StatusesInitialized of StatusHistogram.], [newStatusesInitialized := StatusHistogram_GetStatusesInitialized( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetSegmentWidth], [StatusHistogram], 2, 2, [Att([SegmentWidth], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property BarWidth of StatusHistogram.], [StatusHistogram_SetBarWidth( atmStatusHistogram, newBarWidth )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetSegmentWidth], [StatusHistogram], 1, 1, [Att([SegmentWidth], p(1))], [p(1) as StatusHistogramResult: Double. Get the property BarWidth of StatusHistogram.], [newBarWidth := StatusHistogram_GetBarWidth( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_ConvertTimeFromSecondsToHhMmSs], [StatusHistogram], 1, 1, [do( var([temphours], vbValue, 0), var([tempminutes], vbValue, 0), var([tempseconds], vbValue, 0), var([result], vbString, 0), { The number of "whole" hours is the truncated part number of the number of seconds divided by 3600. } temphours := trunc(p(1) / 3600),  { The number of minutes is the truncated part of the number of seconds minus the number of "whole" hours divided by 60. } tempminutes := trunc((p(1) - temphours * 3600) / 60), { The number of seconds is the truncated part of the number of seconds minus the number of "whole" hours minus the number of whole minutes. } tempseconds := trunc((p(1) - temphours * 3600 - tempminutes * 60)),  result :=   concat(  if(   temphours >= 10,   string(temphours),   concat([0], string(temphours))  ),  [:],  if(   tempminutes >= 10,   string(tempminutes),   concat([0], string(tempminutes))  ),  [:],  if(   tempseconds >= 10,   string(tempseconds),   concat([0], string(tempseconds))  ) ),  { After all return the result of this method, can't "free" the result...it's a pitty } return(result))], [p(1) as Integer, secondsResult: String; The inserted number of secoinds convert to the string format hh:mm:ss], [StatusHistogram_ConvertTimeFromSecondsToHhMmSs(3600)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetHeightBoundingBox], [StatusHistogram], 2, 2, [Att([HeightBoundingBox], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property Height of StatusHistogram.], [StatusHistogram_SetHeight( atmStatusHistogram, newHeight )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetHeightBoundingBox], [StatusHistogram], 1, 1, [Att([HeightBoundingBox], p(1))], [p(1) as StatusHistogramResult: Double. Get the property Height of StatusHistogram.], [newHeight := StatusHistogram_GetHeight( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetMaximumScore], [StatusHistogram], 2, 2, [Att([MaximumScore], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property MaximumScore of StatusHistogram.], [StatusHistogram_SetMaximumScore( atmStatusHistogram, newMaximumScore )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetMaximumScore], [StatusHistogram], 1, 1, [Att([MaximumScore], p(1))], [p(1) as StatusHistogramResult: Double. Get the property MaximumScore of StatusHistogram.], [newMaximumScore := StatusHistogram_GetMaximumScore( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetTextSizeYAxis], [StatusHistogram], 2, 2, [Att([TextSizeYAxis], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property TextSizeYAxis of StatusHistogram.], [StatusHistogram_SetTextSizeYAxis( atmStatusHistogram, newTextSizeYAxis )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetTextSizeYAxis], [StatusHistogram], 1, 1, [Att([TextSizeYAxis], p(1))], [p(1) as StatusHistogramResult: Double. Get the property TextSizeYAxis of StatusHistogram.], [newTextSizeYAxis := StatusHistogram_GetTextSizeYAxis( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetYAxisValuesVisible], [StatusHistogram], 2, 2, [Att([YAxisValuesVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property YAxisValuesVisible of StatusHistogram.], [StatusHistogram_SetYAxisValuesVisible( atmStatusHistogram, newYAxisValuesVisible )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetYAxisValuesVisible], [StatusHistogram], 1, 1, [Att([YAxisValuesVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property YAxisValuesVisible of StatusHistogram.], [newYAxisValuesVisible := StatusHistogram_GetYAxisValuesVisible( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetYAxisNumberOfValues], [StatusHistogram], 2, 2, [Att([YAxisNumberOfValues], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as IntegerResult: none. Sets the property YAxisNumberOfValues of StatusHistogram.], [StatusHistogram_SetYAxisNumberOfValues( atmStatusHistogram, newYAxisNumberOfValues )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetYAxisNumberOfValues], [StatusHistogram], 1, 1, [Att([YAxisNumberOfValues], p(1))], [p(1) as StatusHistogramResult: Integer. Get the property YAxisNumberOfValues of StatusHistogram.], [newYAxisNumberOfValues := StatusHistogram_GetYAxisNumberOfValues( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetNumberOfSegmentsDrawn], [StatusHistogram], 2, 2, [Att([NumberOfSegmentsDrawn], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as IntegerResult: none. Sets the property NumberOfSegmentsDrawn of StatusHistogram.], [StatusHistogram_SetNumberOfSegmentsDrawn( atmStatusHistogram, newNumberOfSegmentsDrawn )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetNumberOfSegmentsDrawn], [StatusHistogram], 1, 1, [Att([NumberOfSegmentsDrawn], p(1))], [p(1) as StatusHistogramResult: Integer. Get the property NumberOfSegmentsDrawn of StatusHistogram.], [newNumberOfSegmentsDrawn := StatusHistogram_GetNumberOfSegmentsDrawn( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetYAxisLinesVisible], [StatusHistogram], 2, 2, [Att([YAxisLinesVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property YAxisLinesVisible of StatusHistogram.], [StatusHistogram_SetYAxisLinesVisible( atmStatusHistogram, newYAxisLinesVisible )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetYAxisLinesVisible], [StatusHistogram], 1, 1, [Att([YAxisLinesVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property YAxisLinesVisible of StatusHistogram.], [newYAxisLinesVisible := StatusHistogram_GetYAxisLinesVisible( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetSegmentInBetweenSpace], [StatusHistogram], 2, 2, [Att([SegmentInBetweenSpace], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as DoubleResult: none. Sets the property SegmentInBetweenSpace of StatusHistogram.], [StatusHistogram_SetSegmentInBetweenSpace( atmStatusHistogram, newSegmentInBetweenSpace )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetSegmentInBetweenSpace], [StatusHistogram], 1, 1, [Att([SegmentInBetweenSpace], p(1))], [p(1) as StatusHistogramResult: Double. Get the property SegmentInBetweenSpace of StatusHistogram.], [newSegmentInBetweenSpace := StatusHistogram_GetSegmentInBetweenSpace( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetYAxisLinesColor], [StatusHistogram], 2, 2, [Att([YAxisLinesColor], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as ColorResult: none. Sets the property YAxisLinesColor of StatusHistogram.], [StatusHistogram_SetYAxisLinesColor( atmStatusHistogram, newYAxisLinesColor )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetYAxisLinesColor], [StatusHistogram], 1, 1, [Att([YAxisLinesColor], p(1))], [p(1) as StatusHistogramResult: Color. Get the property YAxisLinesColor of StatusHistogram.], [newYAxisLinesColor := StatusHistogram_GetYAxisLinesColor( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetHistogramVisible], [StatusHistogram], 2, 2, [Att([HistogramVisible], p(1)) := p(2)], [p(1) as StatusHistogramp(2) as BooleanResult: none. Sets the property HistogramVisible of StatusHistogram.], [StatusHistogram_SetHistogramVisible( atmStatusHistogram, newHistogramVisible )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetHistogramVisible], [StatusHistogram], 1, 1, [Att([HistogramVisible], p(1))], [p(1) as StatusHistogramResult: Boolean. Get the property HistogramVisible of StatusHistogram.], [newHistogramVisible := StatusHistogram_GetHistogramVisible( atmStatusHistogram )], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_StartCollectingStatusInformation], [StatusHistogram], 1, 1, [if( atomexists(in(1, c)) = True, { When an atom is connected to the Status Monitor   start collecting status information on this atom } EnableStatusMonitor(in(1, p(1)), true))], [p(1) as StatusHistogramResult: none. Starts collecting status information at the connected atom.], [StatusHistogram_StartCollectingStatusInformation(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_Animate3D], [StatusHistogram], 1, 1, [do( var([atmC], vbAtom, p(1)), var([indexer], vbValue, 0), var([degrees], vbValue, 0), var([segmentsdrawn], vbValue, 0), var([offset], vbValue, 0), var([temp], vbValue, 0),     { The Diagram's Title } if(  StatusHistogram_GetTitleVisible(atmC),  DrawText(   1,   StatusHistogram_GetHeightBoundingBox(atmC),   StringLength(StatusHistogram_GetTitle(atmC)) * StatusHistogram_GetTextSizeTitle(atmC),   StatusHistogram_GetTextSizeTitle(atmC) * 2,   StatusHistogram_GetTitle(atmC),   StatusHistogram_GetTextColor(atmC),   StatusHistogram_GetTextSizeTitle(atmC),   [Arial],   0,   0,   0,   HA_LEFT + VA_TOP  ) ),  { APP-124 JG (29-04-2008) Show a message when the diagram is not refreshed...} if(  runspeed = 1E40,  DrawText(   0,   0,   StatusHistogram_GetTextSizeTitle(atmC) * 40,   StatusHistogram_GetTextSizeTitle(atmC) * 4,   Concat(    [Refresment has been paused.],    CR,    [(Lower the runspeed to refresh the diagram)]   ),   ColorRed,   StatusHistogram_GetTextSizeTitle(atmC),   [Arial],   True,   0,   0,   HA_LEFT + VA_TOP  ) ),   { default View when not connected or no scores yet available. } if(  StatusHistogram_GetMaximumScore(atmC) = 0,  do(   a,   { Return nothing to quit the function. }   return(0)  ) ),  { Y-Axis } if(  and(   StatusHistogram_GetYAxisValuesVisible(atmC) = true,   StatusHistogram_GetHistogramVisible(atmC) = true  ),  PointsPlane(   1,   0,   0,   0,   StatusHistogram_GetHeightBoundingBox(atmC),   0,   StatusHistogram_GetNumberOfSegmentsDrawn(atmC) * StatusHistogram_GetSegmentWidth(atmC) / 100,   0,   0,   StatusHistogram_GetBorderColor(atmC)  ) ),  { Y-Axis values. } if(  and(   StatusHistogram_GetYAxisValuesVisible(atmC) = true,   StatusHistogram_GetHistogramVisible(atmC) = true  ),  for(   indexer := 0, indexer <= StatusHistogram_GetYAxisNumberOfValues(atmC), inc(indexer),   do(    DrawText(     - 10 * StatusHistogram_GetTextSizeYAxis(atmC) - StatusHistogram_GetTextSizeYAxis(atmC),     (StatusHistogram_GetHeightBoundingBox(atmC) / StatusHistogram_GetYAxisNumberOfValues(atmC)) * (StatusHistogram_GetYAxisNumberOfValues(atmC) - indexer),     10 * StatusHistogram_GetTextSizeYAxis(atmC),     2 * StatusHistogram_GetTextSizeYAxis(atmC),     DateTime((StatusHistogram_GetMaximumScore(atmC)/StatusHistogram_GetYAxisNumberOfValues(atmC)) * indexer, [hh:mm:ss]),     StatusHistogram_GetTextColor(atmC),     StatusHistogram_GetTextSizeYAxis(atmC),     [Arial],     0,     0,     0,     HA_RIGHT    ),        { The horizontal lines belonging to the individual values on the Y Axis. }    if(     StatusHistogram_GetYAxisLinesVisible(atmC) = true,     PointsPlane(      1,      (StatusHistogram_GetHeightBoundingBox(atmC) / StatusHistogram_GetYAxisNumberOfValues(atmC)) * (StatusHistogram_GetYAxisNumberOfValues(atmC) - indexer),      -0.01,      2 + StatusHistogram_GetNumberOfSegmentsDrawn(atmC) * (StatusHistogram_GetSegmentWidth(atmC) + StatusHistogram_GetSegmentInBetweenSpace(atmC)),      0,      0,      0,      StatusHistogram_GetHeightBoundingBox(atmC) / 200,      0,      StatusHistogram_GetYAxisLinesColor(atmC)     )    )   )  ) ),  if(  and(   StatusHistogram_GetShowScoresBesidesLegend(atmC) = true,   StatusHistogram_GetScoresVisible(atmC) = true  ),  offset := StatusHistogram_GetTextSizeLegend(atmC) * 7 ),  if(  StatusHistogram_GetYAxisValuesVisible(atmC) = true,  offset := offset + StatusHistogram_GetTextSizeYAxis(atmC) * 7 ),  if(  StatusHistogram_GetHistogramVisible(atmC) = false,  offset := -3 ), { Animation of the colored segments } for(  indexer := 1, indexer <= StatusHistogram_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    StatusHistogram_GetSegmentScore(atmC, indexer) > 0,    do(     inc(segmentsdrawn),     { ***************** SEGMENTS **************** }     if(      StatusHistogram_GetHistogramVisible(atmC) = true,      do(       di3DBox(        (segmentsdrawn - 1) * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),        StatusHistogram_GetHeightBoundingBox(atmC) - StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)),        0,        StatusHistogram_GetSegmentWidth(atmC),        StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)),        StatusHistogram_GetSegmentWidth(atmC),        StatusHistogram_GetSegmentColor(atmC, indexer)       ),      SetMaterialWireFrame(True),       di3DBox(        (segmentsdrawn - 1) * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),        StatusHistogram_GetHeightBoundingBox(atmC) - StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)),        0,        StatusHistogram_GetSegmentWidth(atmC),        StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)),        StatusHistogram_GetSegmentWidth(atmC),        StatusHistogram_GetBorderColor(atmC)       ),      SetMaterialWireFrame(False)      )     ),     { ***************** LEGEND ************************ }     if(      StatusHistogram_GetLegendVisible(atmC) = True,      do(      { The box for the color }      di3DBox(       -1 * StatusHistogram_GetTextSizeLegend(atmC) - offset,       StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),       0,       StatusHistogram_GetTextSizeLegend(atmC),       StatusHistogram_GetTextSizeLegend(atmC) ,       0.001,       StatusHistogram_GetSegmentColor(atmC, indexer)      ),      SetMaterialWireFrame(1),            di3DBox(       -1 * StatusHistogram_GetTextSizeLegend(atmC) - offset,       StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),       0,       StatusHistogram_GetTextSizeLegend(atmC),       StatusHistogram_GetTextSizeLegend(atmC),       0.001,       StatusHistogram_GetBorderColor(atmC)      ),      SetMaterialWireFrame(0),                 { The name of the segment }       DrawText(        - 1 * StatusHistogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC))) - 1.5 * StatusHistogram_GetTextSizeLegend(atmC) - offset,        StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - StatusHistogram_GetTextSizeLegend(atmC) / 2.5,        StatusHistogram_GetTextSizeLegend(atmC) * StringLength(String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC))),        StatusHistogram_GetTextSizeLegend(atmC) * 2,        String(cell(indexer, StatusHistogram_COLUMNNUMBER_SEGMENTNAME, atmC)),        StatusHistogram_GetTextColor(atmC),        StatusHistogram_GetTextSizeLegend(atmC),        [Arial],        0,        0,        0,        HA_RIGHT + VA_TOP       ),              if(        and(         StatusHistogram_GetShowScoresBesidesLegend(atmC) = true,         StatusHistogram_GetScoresVisible(atmC) = true        ),           DrawText(         -1 * offset + StatusHistogram_GetTextSizeLegend(atmC),         StatusHistogram_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - StatusHistogram_GetTextSizeLegend(atmC) / 2.5,         StatusHistogram_GetTextSizeLegend(atmC) * (8 + StringLength(String(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC)))),         StatusHistogram_GetTextSizeLegend(atmC) * 2,         DateTime(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC), [hh:mm:ss]),         StatusHistogram_GetTextColor(atmC),         StatusHistogram_GetTextSizeLegend(atmC),         [Arial],         0,         0,         0,         HA_LEFT + VA_TOP        )             )           )     )    )   )     ) ),  segmentsdrawn := 0,  { ***************** SCORES ******************* } for(  indexer := 1, indexer <= StatusHistogram_GetNumberOfSegments(atmC), inc(indexer),  if(   and(    StatusHistogram_GetScoresVisible(atmC) = True,    StatusHistogram_GetShowScoresBesidesLegend(atmC) = false,    StatusHistogram_GetSegmentScore(atmC, indexer) > 0,    StatusHistogram_GetHistogramVisible(atmC) = true   ),   do(    inc(segmentsdrawn),    DrawText(     (segmentsdrawn - 1) * StatusHistogram_GetSegmentWidth(atmC) + 2 + (segmentsdrawn - 1) * StatusHistogram_GetSegmentInBetweenSpace(atmC),     StatusHistogram_GetHeightBoundingBox(atmC) - StatusHistogram_GetHeightBoundingBox(atmC) * (StatusHistogram_GetSegmentScore(atmC, indexer) / StatusHistogram_GetMaximumScore(atmC)) - 2 * StatusHistogram_GetTextSizeScores(atmC),     StatusHistogram_GetTextSizeScores(atmC) * (8 + StringLength(String(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC)))),     StatusHistogram_GetTextSizeScores(atmC) * 2,     DateTime(cell(indexer, STATUSHISTOGRAM_COLUMNNUMBER_SEGMENTSCORE, atmC), [hh:mm:ss]),     StatusHistogram_GetTextColor(atmC),     StatusHistogram_GetTextSizeScores(atmC)    )   )  ) ))], [p(1) as StatusHistogram], [StatusHistogram_Animate3D(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_GetAutomaticScaling], [Atom Parameters], 1, 1, [Att(25, p(1))], [Returns the value of attribute AutomaticScaling (# 25) of StatusHistogram e1], [StatusHistogram_GetAutomaticScaling(c)], 0, [StatusHistogram.atm]);
DefineFunction([StatusHistogram_SetAutomaticScaling], [Atom Parameters], 2, 2, [Att(25, p(1)) := p(2)], [Sets the value of attribute AutomaticScaling (# 25) of StatusHistogram e1 to e2], [StatusHistogram_SetAutomaticScaling(c, 1)], 0, [StatusHistogram.atm]);
Set(Icon(a), 
	RegisterIcon(pDir([media\images\default.jpg]), [default.jpg]));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\StatusHistogram.ico]));
SetChannels(1, 0);
SetChannelRanges(1, 1, 0, 0);
int001(77);
SetSize(5, 6, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(25);
SetAttributeName(r(1), [NumberOfSegments]);
SetAttributeName(r(2), [NumberOfSegmentsDrawn]);
SetAttributeName(r(3), [MaximumScore]);
SetAttributeName(r(4), [RefreshRate]);
SetAttributeName(r(5), [StatusesInitialized]);
SetAttributeName(r(6), [Title]);
SetAttributeName(r(7), [TextColor]);
SetAttributeName(r(8), [BorderColor]);
SetAttributeName(r(9), [TextSizeTitle]);
SetAttributeName(r(10), [TextSizeScores]);
SetAttributeName(r(11), [TextSizeLegend]);
SetAttributeName(r(12), [TextSizeYAxis]);
SetAttributeName(r(13), [TitleVisible]);
SetAttributeName(r(14), [LegendVisible]);
SetAttributeName(r(15), [ScoresVisible]);
SetAttributeName(r(16), [HistogramVisible]);
SetAttributeName(r(17), [YAxisValuesVisible]);
SetAttributeName(r(18), [YAxisNumberOfValues]);
SetAttributeName(r(19), [YAxisLinesVisible]);
SetAttributeName(r(20), [YAxisLinesColor]);
SetAttributeName(r(21), [ShowScoresBesidesLegend]);
SetAttributeName(r(22), [SegmentWidth]);
SetAttributeName(r(23), [SegmentInBetweenSpace]);
SetAttributeName(r(24), [HeightBoundingBox]);
SetAttributeName(r(25), [AutomaticScaling]);
SetAtt(r(4), 60);
SetTextAtt(r(6), [Status Histogram]);
SetExprAtt(r(7), [colorblack]);
SetExprAtt(r(8), [colorblack]);
SetAtt(r(9), 0.5);
SetAtt(r(10), 0.25);
SetAtt(r(11), 0.25);
SetAtt(r(12), 0.25);
SetAtt(r(13), 1);
SetAtt(r(14), 1);
SetAtt(r(15), 1);
SetAtt(r(16), 1);
SetAtt(r(17), 1);
SetAtt(r(18), 5);
SetAtt(r(19), 1);
SetExprAtt(r(20), [ColorGray]);
SetAtt(r(22), 1.5);
SetAtt(r(23), 0.5);
SetAtt(r(24), 5);
SetAtt(r(25), 1);
int024;
SetTable(1, 3);
int015(0, 64, [ 
1
]);
int015(1, 64, [`SegmentScore`
]);
int015(2, 64, [`SegmentColor`
]);
int015(3, 64, [`SegmentName`
]);
Set(OnEvent, [case(
 inlist(
  eventcode,
  {1} STATUSHISTOGRAM_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION,
  {2} STATUSHISTOGRAM_EVENTCODE_REFRESH
 ),
 { 1 }
 { Start the operation. }
 StatusHistogram_StartCollectingStatusInformation(c),
 
 { 2 }
 { Start the operation. }
 StatusHistogram_Refresh(c)
)
]);
Set(OnCreation, [StatusHistogram_InitializeStatuses(c)
]);
Set(OnReset, [StatusHistogram_Initialize(c)
]);
Set(OnUser, [Do( { Delete any current instances of this form.}  GuiDestroy([StatusHistogram]), { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\StatusHistogram.gui]), 1), { Show the GUI-form.} Guicreate([formStatusHistogram], [StatusHistogram], 0, c, 0, 1))]);
Set(On2DDraw, [StatusHistogram_Animate2D(c)]);
Set(On3DDraw, [StatusHistogram_Animate3D(c)]);
SetStatus(0);
int018;
int007;
