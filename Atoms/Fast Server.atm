

{Atom: Fast Server}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
int023([Fast Server], 32896, 1264);
Set(Icon(a), 
	RegisterIcon(IconsDir([bmp\atoms\server.bmp]), [server]));
AddModel3D(
	RegisterModel3D(Model3DDir([\Server.wrl]), [Server.wrl], 0, 0, 0, 1, 1, -1, -90, 0, 0), a);
AddModel3D(
	RegisterModel3D(Model3DDir([\server2.wrl]), [server2.wrl], 0, 0, 0, 1, 1, -1, -90, 0, 0), a);
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\FastServer.ico]));
Set(Info, [Services atoms for certain time.

General
------------
Services atoms that enter for a certain time, then sends them out. 
Services only one atom at a time. The user can define a trigger on 
entry and a trigger on exit.

Channels:
---------------
N inputchannels, N outputchannels

Statuses:
--------------
   1 - Idle
   2 - Busy
   5 - Blocked

Rightclick:
  Edit cycletime, select output, trigger on entry, trigger on exit

Last Revision:
---------------------
March, 2008
]);
SetChannels(1, 1);
SetChannelRanges(1, 255, 1, 255);
int001(82);
SetSize(5, 2, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(9);
SetAttributeName(r(1), [sendto]);
SetAttributeName(r(2), [cycletime]);
SetAttributeName(r(3), [entrytrigger]);
SetAttributeName(r(4), [exittrigger]);
SetAttributeName(r(5), [totalbusy]);
SetAttributeName(r(6), [utilization]);
SetAttributeName(r(7), [curcycle]);
SetAttributeName(r(8), [endbusy]);
SetAttributeName(r(9), [3DIcon]);
SetExprAtt(r(1), [1]);
SetExprAtt(r(2), [negexp(9)]);
SetExprAtt(r(6), [if(Time>0,Concat([Util:],String(100*(TotalBusy-Max(0,EndBusy-Time))/Time,0,1),[ %]),[])]);
SetAtt(r(9), 5);
int024;
Set(OnEvent, [Case( EventCode,  { On event number 1 } Do(    { Set status to blocked }  Status(c) := 5,    { Open all output channels }  OpenAllOC(c) ), { On event number 2 } OpenAllIC(c))]);
Set(OnEntered, [Do(  { Close all input channels } CloseAllIC(c),  { Set status to busy } Status(c) := 2,  { Change location of product } SetLoc(xsize(c) - xsize(i), 1, zsize(c), i),  { Perform trigger on entry } EntryTrigger,  { Set current cycle equal to cycletime } CurCycle := CycleTime,  { Calculate total busy time } TotalBusy := TotalBusy + CurCycle,  { Calculate end of busy time } EndBusy := CurCycle + Time,  { Execute event number 1 after busy time ends } CreateEvent(CurCycle, c, 1))]);
Set(OnExited, [Do(  { Set status to idle } Status(c) := 1,  { Close all output channels } CloseAllOC(c),  { Perform the trigger on exit } ExitTrigger,  { Create event number 2 after 0 seconds:   open all input channels } CreateEvent(0, c, 2))]);
Set(OnCreation, [AutoConnect]);
Set(OnReset, [Do(  { Close all output channels } CloseAllOC(c),  { Set TotalBusy to 0 } TotalBusy := 0,  { Set EndBusy to 0 } EndBusy := 0,  { Set status to idle } Status(c) := 1)]);
Set(OnUser, [Do(  { Delete any current instances of this form.} GuiDestroy([FastServer]),  { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\FastServer.gui]), 1),  { Show the GUI-form.} GuiCreate([FastServer], [FastServer], 0, c, 0, 1))]);
Set(OnOcReady, [If( Content(c) > 0,  { Request moving the product through    the output channel in attribute SendTo }   MoveRequest(First(c), SendTo))]);
Set(On2DDraw, [StandardDisplay(Name, Utilization, Icon)]);
Set(On3DDraw, [Case(
 3DIcon,
 {* Draw Simble box *}
 If(
  Status( c) = 3,
  di3DBox(0, 0, 0, xSize, ySize, zSize, ColorRed),
  di3DBox(0, 0, 0, xSize, ySize, zSize, Color)
 ),
 {* Draw Box with icon *}
 di3DBox(0, 0, 0, xSize, ySize, zSize, Color, 0, 0, Icon, 0, 45, 20),
 {* Draw a CNC mill *}
 Do(
  di3DBox(0, 0, 0, xSize, 0.2, zSize(c) + 2, Color),
  di3DBox(0, 0.2, zSize(c) + 1.7, xSize, ySize(c) - 0.21, 0.3, Color),
  di3DBox(0.15 * xSize(c), 0.2, 0, 0.7 * xsize, 0.75 * ySize(c), zSize(c) - 0.2, Color),
  di3DBox(0, 0.2, zSize(c) - 0.2, xSize, ySize(c) - 0.2, 0.2, Color),
  di3DBox(0.75 * xSize - 1, 0.5 * ( ySize(c) - 1), zSize(c) + 1.2, 1, 1, 0.5, colordarkgray),
  di3DBox(0.75 * xSize - 0.67, 0.5 * ( ySize(c) - 1) + 0.35, zSize(c) + 1, 0.35, 0.35, 0.2, ColorSilver)
 ),
 {* Draw a CNC Lathe *}
 Do(
  di3DBox(0, 0.2 * ySize(c), 0, xSize(c), 0.8 * ySize(c), zSize(c), Color),
  di3DBox(0, 0, 0, xSize(c), 0.2 * ySize(c), zSize(c) + 2, Color), 
  di3DBox(0.75 * xSize(c), 0.2 * ySize(c),  zSize(c), 0.25 * xSize(c), 0.8 * ySize (c), 2, Color),
  di3DBox(0.1 , 0.3 * ySize(c), zSize(c), 0.25 * xSize(c) - 0.1, 0.5 * ySize(c), 1.8, colordarkgray),
  di3DBox(0.25 * xSize(c) , 0.3 * ySize(c), zSize(c) + 0.3, 0.5, 0.5 * ySize(c), 1.2, colordarkgray),
  di3DBox(0.25 * xSize(c) + 0.5, 0.55 * ySize(c) - 0.25, zSize(c) + 0.6, 0.08,  0.5, 0.5, Color),    
  di3DBox(0.25 * xSize(c) + 0.58, 0.55 * ySize(c) - 0.1, zSize(c) + 0.8, 0.1, 0.2 , 0.2, colordarkgray),
  di3DBox(0.75 * xSize(c) - 0.1, 0.3 * ySize(c), zSize(c) + 0.25 , 0.1, 0.5 * ySize(c), 1, colordarkgray),
  di3DBox(0, 0.2 * ySize(c), zSize(c), 0.1, 0.8 * ySize(c), 2, ColorLightGray),
  di3DBox(0, ySize(c) - 0.1, zSize(c), 0.25 * xSize(c), 0.1, 2, ColorLightGray),
  di3DBox(0, 0.2 * ySize(c), zSize(c) + 1.9, 0.75 * xSize(c), 0.8 * ySize(c), 0.1, ColorLightGray),
  di3DBox(0.8 * xSize(c), ySize(c), zSize(c) + 0.8, 0.15 * xSize(c), 0.1 , 0.6, ColorBlack),
  If(
   Content(c) = 0,
   Do(
    Glass(0.5),
    di3DBox(- 0.25 * xSize(c), ySize(c) - 0.1, zSize(c), 0.5 * xSize(c), 0.1, 2, ColorLightGray),
    Glass(1)
   ),
   Do(
    Glass(0.5),
    di3DBox(0.25 * xSize(c), ySize(c) - 0.1, zSize(c), 0.5 * xSize(c), 0.1, 2, ColorLightGray),
    Glass(1)
   )
  ),
  di3DBox(0.25 * xSize(c), ySize(c) - 0.05, zSize(c), 0.5 * xSize(c), 0.05, 0.1, ColorSilver)
 ),
 { Machine }
 Do
 (
  { Display the machine. The machine is a VRML object and needs some
     repositioning and scaling. }
  
  DrawModel3DMesh(Model3D(1, c), 1, xSize * 0.5, 0.5, 0, xSize * 0.25, ySize, 1.2 * zSize),
  DrawModel3DMesh(Model3D(1, c), 3, xSize * 0.5, 0.5, 0, xSize * 0.25, ySize, 1.2 * zSize)
  ),
 { Machine 2 }
 Do
 (
  { Display the machine. The machine is a VRML object and needs some
     repositioning and scaling. }
  
  DrawModel3DMesh(Model3D(2, c), 1, 0, 0, 0, 1, 1, 1),
  DrawModel3DMesh(Model3D(2, c), 3, 0, 0, 0, 1, 1, 1)
 ) 
)
]);
SetStatus(0);
int018;
int007;
