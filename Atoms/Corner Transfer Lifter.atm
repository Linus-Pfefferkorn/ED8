

{Preregister functions}

PreregisterFunction([CTL_Output_Atom_Get_Rotation], 3, 3);
PreregisterFunction([CTL_Input_Atom_Get_Rotation], 3, 3);
PreregisterFunction([CTL_Input_Atom_Set_Table], 3, 3);
PreregisterFunction([CTL_Output_Atom_Set_Table], 3, 3);
PreregisterFunction([CTL_IsCTL], 1, 1);
PreregisterFunction([CTL_Change_Product_Z_Rotation], 2, 2);
PreregisterFunction([CTL_Detect_Collision], 1, 1);
PreregisterFunction([CTL_Change_Passing_Atom_Drawing], 1, 1);
PreregisterFunction([CTL_Set_Product_Location], 2, 2);
PreregisterFunction([CTL_Detect_Transfer_Time], 1, 1);
PreregisterFunction([CTL_Detect_Transport_Length], 1, 1);
PreregisterFunction([CTL_Change_Product_XY_Size], 2, 2);
PreregisterFunction([CTL_Change_Product_Translation_On_Entered], 2, 2);
PreregisterFunction([CTL_Adjust_Product_Rotation_As], 1, 1);
PreregisterFunction([CTL_Change_Product_Translation_On_Exited], 1, 1);
PreregisterFunction([CTL_3Ddraw_ctu_without_icon], 1, 1);
PreregisterFunction([CTL_3Ddraw_ctu_with_icon], 1, 1);
PreregisterFunction([CTL_2Ddraw_direction_arrows], 1, 1);
PreregisterFunction([CTL_3Ddraw_ctu_chain_conveyor_animated], 1, 1);
PreregisterFunction([CTL_3Ddraw_ctu_chain_conveyor], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_GetInStrategy], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetInStrategy], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetSendTo], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetSendTo], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetEntryTrigger], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetEntryTrigger], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetExitTrigger], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetExitTrigger], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetCurIC], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetCurIC], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetCurOC], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetCurOC], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetSpeed], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetSpeed], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetTransferTime], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetTransferTime], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetCurTransferTime], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetCurTransferTime], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetInitialRotation], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetInitialRotation], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetDrawLegs], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetDrawLegs], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetTransferAnimate], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetTransferAnimate], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetStraightFlag], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetStraightFlag], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetCTLAtom], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetCTLAtom], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLibCat], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLibCat], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLibSubCat], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLibSubCat], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetIsConveyor], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetIsConveyor], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetExitTime], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetExitTime], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetTransferTimeFlag], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetTransferTimeFlag], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetTransferTimeAhead], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetTransferTimeAhead], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetMoveInFlag], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetMoveInFlag], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetIcon3D], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetIcon3D], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetAutoDetect], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetAutoDetect], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLegExtend], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLegExtend], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetModifyProduct2D], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetModifyProduct2D], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetResetTrigger], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetResetTrigger], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLiftSpeed], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLiftSpeed], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLiftAcceleration], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLiftAcceleration], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLiftDeceleration], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLiftDeceleration], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetLoadTime], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetLoadTime], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetUnLoadTime], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetUnLoadTime], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetGoToParkingLocation], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetGoToParkingLocation], 2, 2);
PreregisterFunction([Corner_Transfer_Lifter_GetParkingZLocation], 1, 1);
PreregisterFunction([Corner_Transfer_Lifter_SetParkingZLocation], 2, 2);


{Atom: Corner Transfer Lifter}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
int023([Corner Transfer Lifter], 10789024, 66802);
DefineFunction([CTL_Output_Atom_Get_Rotation], [Conveyors], 3, 3, [do( var([valCTLoutputAtomAngle],vbValue),  {--get rotationas of connected input atom--} valCTLoutputAtomAngle :=    if(   Att([IsConveyor],p(1)) > 0,   {--Connected atom is from conveyors category--}   Case(    {--Identifier of conveyor category--}    Att([IsConveyor],p(1)),        {--Case 1 : Advanced Non Accumulating Conveyor Straight--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 2 : Advanced Non Accumulating Conveyor Curved--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3)    ),        {--Case 3 : Advanced Accumulating Conveyor Straight--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 4 : Advanced Accumulating Conveyor Curved--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3)    ),        {--Case 5 : Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 6 : Right Curved Accumulating Conveyor--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3)    ),        {--Case 7 : Left Curved Accumulating Conveyor--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3) - 180    ),    {--Case 8 : Non Accumulating Conveyor--}    do(          {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 9 : Left Curved Non Accumulating Conveyor--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3) - 180    ),        {--Case 10 : Right Curved Non Accumulating Conveyor--}    do(     {--Attribute "startangle"--}     Round(mod(Att([startangle],p(1)),360),3)    ),        {--Case 11 : Speed Changing Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 12 : Buffer Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 13 : Fast Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 14 : Fast Non Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 15 : Turntable Unit--}    do(     {--Angle from table--}     Round(mod(Cell( OcIcNo(p(3),p(2)), 1, p(1) ),360),3)    ),        {--Case 16 : Corner Transfer Lifter--}    do(     Round(      Mod(       {--rotationas of CTL--}       Corner_Transfer_Lifter_GetInitialRotation(p(2)) +            Case(        WhichIsTrue(         {--x positiv 0°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0          ),                   {--x positiv 90°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90          ),                   {--x positiv 180°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 180          ),                   {--x positiv 270°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = -90,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90          ),                 {--x positiv 0° + InitialRotation--}         and(          ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 45,          ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) > -45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >=  0         ),         {--y negativ 90° + InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 90,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 135,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  45         ),         {--x negativ 180° + InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 45,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) > -45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 180,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  135         ),         {--y positiv 270° + InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= -45,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >= -90,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 135,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  45         )                 ) + 1,                do(         msg(          Concat(           Name(p(2)),           [ is not able to detect rotation of output atom ],           Name(p(1)),           CR,           [Change rotation of input atom or switch off autofit angles on reset]          )         ),         -1        ),                180,        270,        0,        90,            180,        270,        0,        90       ),       360   {--mod--}      ),      3      {--round--}     )         ),        {--Case 17 : Bidirectional Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 18 : Other not yet defined--}    do(     a    )   ),   {--Connected atom ist from other category--}   do(    {--Rotationas--}    Round(mod(RotationAs(p(1)),360),3)   )  ),  {--bowdlerise angle to ease case-command--} if(  {--negativ angle--}  valCTLoutputAtomAngle < 0,  {--adjust--}  valCTLoutputAtomAngle := 360 + valCTLoutputAtomAngle ),  {--return rotationas of input atom--} valCTLoutputAtomAngle)], [Returns the rotationas of Atoms p(1) connected to oc p(3) of a CTL p(2). Detects straight conveyors, curved conveyors (no rotation but startangle) and CTLs (attribute IsConveyor as identifier).], [CTL_Input_Atom_Get_Rotation(out(1,c),c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Input_Atom_Get_Rotation], [Conveyors], 3, 3, [do( var([valCTLinputAtomAngle],vbValue), var([valTempInitialRotation],vbValue), {--get rotationas of connected input atom--} valCTLinputAtomAngle :=  if(   Att([IsConveyor],p(1)) > 0,   {--Connected atom is from conveyors category--}   Case(    {--Identifier of conveyor category--}    Att([IsConveyor],p(1)),        {--Case 1 : Advanced Non Accumulating Conveyor Straight--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 2 : Advanced Non Accumulating Conveyor Curved--}    do(     {--startangle + angle--}     Round(mod((Att([startangle],p(1)) + Abs(Att([angle],p(1)))),360),3)    ),        {--Case 3 : Advanced Accumulating Conveyor Straight--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 4 : Advanced Accumulating Conveyor Curved--}    do(     {--startangle + angle--}     Round(mod((Att([endangle],p(1))),360),3)    ),        {--Case 5 : Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 6 : Right Curved Accumulating Conveyor--}    do(     {--startangle + angle--}     Round(mod((Att([startangle],p(1)) + Abs(Att([angle],p(1)))),360),3)    ),        {--Case 7 : Left Curved Accumulating Conveyor--}    do(     {--startangle - 180° + angle--}     Round(mod((Att([startangle],p(1)) - 180 + Att([angle],p(1))),360),3)    ),        {--Case 8 : Non Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 9 : Left Curved Non Accumulating Conveyor--}    do(     {--startangle - 180° + angle--}     Round(mod((Att([startangle],p(1)) - 180 + Att([angle],p(1))),360),3)    ),        {--Case 10 : Right Curved Non Accumulating Conveyor--}    do(     {--startangle + angle--}     Round(mod((Att([startangle],p(1)) + Abs(Att([angle],p(1)))),360),3)    ),        {--Case 11 : Speed Changing Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 12 : Buffer Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 13 : Fast Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 14 : Fast Non Accumulating Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 15 : Turntable Unit--}    do(     {--Angle from table--}     Round(mod(Cell( IcOcNo(p(3), p(2)), 2, p(1) ),360),3)    ),        {--Case 16 : Corner Transfer Lifter--}    do(     valTempInitialRotation:=      if(Corner_Transfer_Lifter_GetInitialRotation(p(2)) > 45,       mod(Corner_Transfer_Lifter_GetInitialRotation(p(2)) - 360,45)      ),         Round(      Mod(       {--rotationas of CTL (initialrotation) + absolute position--}       Corner_Transfer_Lifter_GetInitialRotation(p(2)) +              Case(        WhichIsTrue(         {--x positiv 0°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0          ),                   {--x positiv 90°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90          ),                   {--x positiv 180°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 0,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 180          ),                   {--x positiv 270°and no InitialRotation--}          and(           Corner_Transfer_Lifter_GetInitialRotation(p(2)) = 0,           Round(ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = -90,           Round(ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1))))) = 90          ),                 {--x positiv 0° + InitialRotation--}         and(          ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation <= 45,          ArcSin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation >  -45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  0         ),         {--y negativ 90°+ InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation <= 90,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation >  45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 135,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  45         ),         {--x negativ 180° + InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation <= 45,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation >  -45,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 180,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  135         ),         {--y positiv 270° + InitialRotation--}         and(          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation <= -45,          arcsin((yAbsLoc(p(2),Model) - yAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) - valTempInitialRotation >  -90,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) <= 135,          ArcCos((xAbsLoc(p(2),Model) - xAbsLoc(p(1),Model)) / AtomDistance(p(2),(p(1)))) >  45         )        ) + 1,                do(         msg(          Concat(           Name(p(2)),           [ is not able to detect rotation of input atom ],           Name(p(1)),           CR,           [Change rotation of input atom or switch off autofit angles on reset]          )         ),         -1        ),                0,        90,        180,        270,        0,        90,        180,        270       ),              360    {--mod--}      ),            3       {-round---}     )    ),        {--Case 17 : Bidirectional Conveyor--}    do(     {--Rotationas--}     Round(mod(RotationAs(p(1)),360),3)    ),        {--Case 18 : Other not yet defined--}    do(     a    )   ),   {--Connected atom ist from other category--}   do(    {--Rotationas--}    Round(mod(RotationAs(p(1)),360),3)   )  ),  {--bowdlerise angle to ease case-command--} if(  {--negativ angle--}  valCTLinputAtomAngle < 0,  {--adjust--}  valCTLinputAtomAngle := 360 + valCTLinputAtomAngle ),  {--return rotationas of input atom--} valCTLinputAtomAngle)], [Returns the rotationas of Atoms p(1) connected to ic p(3) of a CTL p(2). Detects straight conveyors, curved conveyors (no rotation but startangle + angle) and CTLs (attribute IsConveyor as identifier).], [CTL_Input_Atom_Get_Rotation(in(1,c),c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Input_Atom_Set_Table], [Conveyors], 3, 3, [do( {--get the rotationas of every atom connected to an ic of the CTL--} var([valCTLangle],vbValue),   {--flag for range of rotation angle--} var([valAngleCase],vbValue),   if(  {--input atom connected ?--}  AtomExists(p(1)),  do(   {--row header is the input atoms index--}   cell(p(3), 0, p(2)):=    Concat([ic_],String(p(3))),   {--input atoms name--}   cell(p(3), 1, p(2)):=    Name(p(1)),       {--get rotationas of connected atom--}   valCTLangle :=     if(     {--CTL detects rotationas automatically--}     Corner_Transfer_Lifter_GetAutoDetect(p(2)),     {--Auto detect--}     CTL_INPUT_ATOM_GET_ROTATION( p(1), p(2), p(3) ),     {--pick existing rotationas--}     cell(p(3), 2, p(2) )    ),   {--input atoms rotationas--}   cell(p(3), 2, p(2) ):=    valCTLangle,   {--Find area of rotation for connected atom--}   Case(    WhichIsTrue(     or(valCTLangle > 315, valCTLangle <= 45),      {--from 315° to 45°--}     and(valCTLangle > 45, valCTLangle <= 135),     {--from 45° to 135°--}     and(valCTLangle > 135, valCTLangle <= 225),    {--from 135° to 225°--}     and(valCTLangle > 225, valCTLangle <= 315)     {--from 225° to 315°--}    ) + 1,    {--set flag for area of rotation--}    msg(Concat([Angle of ],Name(p(2)),[ can not be evaluated.])),  {--fail safe--}    valAngleCase := 1,    valAngleCase := 2,    valAngleCase := 3,    valAngleCase := 4   ),   {--store input atoms x_motion flag--}   cell(p(3),3,p(2)):=    case(valAngleCase,     1,     0,    -1,     0    ),   {--store input atoms y_motion flag--}   cell(p(3),4,p(2)):=    case(valAngleCase,     0,     1,     0,    -1    )  ),  msg(Concat(Name(p(2)),[ has no atom connected to ic ],String(p(3))))   {--fail safe--} ))], [Writes rotationas and x/y motiondirectionflags of all input atoms p(1) connected to CTL p(2) into row p(3) of CTL table.], [CTL_Input_Atom_Set_Table(in(count,c),c,count)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Output_Atom_Set_Table], [Conveyors], 3, 3, [do( {--get the rotationas of every atom connected to an ic of the CTL--} var([valCTLangle],vbValue),   {--flag for range of rotation angle--} var([valAngleCase],vbValue),   if(  {--output atom connected ?--}  AtomExists(p(1)),  do(   {--row header is the input atoms index--}   cell(p(3), 0, p(2) ):=    Concat([oc_],String(Count)),   {--input atoms name--}   cell( p(3), 1, p(2) ):=    Name(p(1)),   {--get rotationas of connected atom--}   valCTLangle :=     if(     {--CTL detects rotationas automatically--}     Corner_Transfer_Lifter_GetAutoDetect(p(2)),      {--Auto detect--}      CTL_OUTPUT_ATOM_GET_ROTATION( p(1), p(2), p(3)),      {--pick existing rotationas--}      cell( p(3), 2, p(2) )     ),   {--input atoms rotationas--}   cell( p(3), 2, p(2) ):=    valCTLangle,   {--Find area of rotation for connected atom--}   Case(    WhichIsTrue(     or(valCTLangle > 315, valCTLangle <= 45),      {--from 315° to 45°--}     and(valCTLangle > 45, valCTLangle <= 135),     {--from 45° to 135°--}     and(valCTLangle > 135, valCTLangle <= 225),    {--from 135° to 225°--}     and(valCTLangle > 225, valCTLangle <= 315)     {--from 225° to 315°--}    ) + 1,    {--set flag for area of rotation--}    msg(Concat([Angle of ],Name(p(2)),[ can not be evaluated.])),  {--fail safe--}    valAngleCase := 1,    valAngleCase := 2,    valAngleCase := 3,    valAngleCase := 4   ),   {--store input atoms x_motion flag--}   cell( p(3), 3, p(2) ):=    case(valAngleCase,     1,     0,    -1,     0    ),   {--store input atoms y_motion flag--}   cell( p(3), 4, p(2) ):=    case(valAngleCase,     0,     1,     0,    -1    )  ),  msg(Concat(Name(p(2)),[ has no atom connected to oc ],String(Count)))   {--fail safe--} ))], [Writes rotationas and x/y motiondirectionflags of all output atoms p(1) connected to CTL p(2) into row p(3) of CTL table.], [CTL_Output_Atom_Set_Table(out(count + nric(c),c),count)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_IsCTL], [Conveyors], 1, 1, [do( if(  Corner_Transfer_Lifter_GetIsConveyor(p(1)) = 16,  True,  False ))], [detects wheter an atom is a CTL], [CTL_IsCTL(in(1,c))], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Change_Product_Z_Rotation], [Conveyors], 2, 2, [do( {--rotationas of current output atom--} var([valOutputAngle],vbValue),  {--rotationas of current output atom--} valOutputAngle := Cell(Corner_Transfer_Lifter_GetCurOC(p(1)) + NrIC(p(1)),2,p(1),1), {--Change of product rotationas depends on rotationas of output atom--} case(  WhichIsTrue(   {--range from 315° to 45°--}   or(valOutputAngle > 315, valOutputAngle <= 45),   {--range from 45° to 135°--}   and(valOutputAngle > 45, valOutputAngle <= 135),   {--range from 135° to 225°--}   and(valOutputAngle > 135, valOutputAngle <= 225),   {--range from 225° to 315°--}   and(valOutputAngle > 225, valOutputAngle <= 315)  ),  {--adjust rotationas of product--}  - 0,  - 90,  - 180,  - 270 ))], [Calculates the change of rotationas for product p(2) caused by CTL p(1).], [CTL_Change_Product_Z_Rotation(c,i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Detect_Collision], [Conveyors], 1, 1, [do( {--rotationas of current input atom of CTL--} var(  [valInputAtomRotation],  vbValue,  Round(Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),2,p(1),1)) ), {--rotationas of current output atom of CTL--} var(  [valOutputAtomRotation],  vbValue,  Round(Cell(Corner_Transfer_Lifter_GetCurOC(p(1)) + NrIC(p(1)),2,p(1),1)) ), {--rotationas of output atom connected to current output channel of CTL--} var(  [valOutputOutputAtomRotation],  vbValue,  Round(Cell(Corner_Transfer_Lifter_GetCurOC(Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1))) + NrIC(Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1))),2,Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1)),1)) ), {--rotationas of output atom connected to current input channel of CTL--} var(  [valInputOutputAtomRotation],  vbValue,  Round(Cell(Corner_Transfer_Lifter_GetCurOC(In(Corner_Transfer_Lifter_GetCurIC(p(1)),p(1))) + NrIC(In(Corner_Transfer_Lifter_GetCurIC(p(1)),p(1))),2,In(Corner_Transfer_Lifter_GetCurIC(p(1)),p(1)),1)) ),  WhichIsTrue(   {--no collission with empty output atom--}  Content(Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1))) <= 0,   {--no turn (straight ahead) and no placing without input movement--}  and(   {--input movement enabled--}   not(Corner_Transfer_Lifter_GetMoveInFlag(p(1))),   {--straight ahead--}   valOutputAtomRotation = valInputAtomRotation  ),    {--CTL requires extra treatment, as it has no rotationas--}  Or(   And(    {--input movement enabled--}    not(Corner_Transfer_Lifter_GetMoveInFlag(p(1))),        if(CTL_IsCTL(Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1))),   {--CTL following--}     {--no turn causes collision--}     and(      Abs(valOutputAtomRotation - valOutputOutputAtomRotation) <> 90,      Abs(valOutputAtomRotation - valOutputOutputAtomRotation) <> 270     )    ),        if(CTL_IsCTL(In(Corner_Transfer_Lifter_GetCurIC(p(1)),p(1))),   {--CTL in front--}     {--no turn causes collision--}     and(      Abs(valOutputAtomRotation - valInputOutputAtomRotation) <> 90,      Abs(valOutputAtomRotation - valInputOutputAtomRotation) <> 270     )    )   ),  {--output movement has finished, no delay necessary to prevent collissions--}  Time - Corner_Transfer_Lifter_GetExitTime(p(1)) >= TravelTime(Corner_Transfer_Lifter_GetSpeed(Out(Corner_Transfer_Lifter_GetCurOC(p(1)),p(1))), xSize(vtp(Corner_Transfer_Lifter_GetCTLAtom(p(1)))))  )  {--true or false--} ) > 0)], [Check whether following product inside CTL p(1) has to wait in order to prevent collissions with previous product.], [CTL_Detect_Collision(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Change_Passing_Atom_Drawing], [Conveyors], 1, 1, [  do(   {--Set Flag for changed graphic code (CTL passing atoms only)--}   {--Prevent changing 2D and 3D code at every following CTL--}   Ddb([DrawFlag],p(1)) := 1,   Ddb([DrawXsize],p(1)) := xSize(p(1)),   Ddb([DrawYsize],p(1)) := ySize(p(1)),         {--adding rotation functionality to 3D eventhandler of entered atom--}   On3DDraw(p(1)) :=    Concat(     [do(],     CR,     Tab,     [{--Atom origin for testing purpose--}],            CR,          Tab,     [di3DBox(0, 0, 0, 0.1, 0.1, zSize * 2, Colorblack),di3DBox(0, 0, 0, xSize, ySize, zSize/2, Color),],     CR,          CR,     Tab,     [{--Corner Transfer Lifter added variables for rotationas in order to compensate change of transportation direction--}],     CR,     Tab,     [RotateCoords(Ddb([DrawRotationas],c),0,0,1,0,0,0),],     CR,     CR,     Tab,     [{--Corner Transfer Lifter added variables for translation in order to compensate change of transportation direction--}],     CR,     Tab,     [TranslateCoords(Ddb([DrawXtranslate],c),Ddb([DrawYtranslate],c),0),],     CR,      CR,          Tab,     [{--Corner Transfer Lifter replaced xsize and ysize by 2 variables in order to compensate change of transportation direction--}],     CR,     Tab,     do(      var([Product3DDrawing],vbString,On3DDraw(m(p(1)))),      Product3DDrawing:=       StringReplace(        Product3DDrawing,        [xsize],        [c.DrawXsize],        SR_IGNORE_CASE + SR_REPLACE_ALL       ),      Product3DDrawing:=       StringReplace(        Product3DDrawing,        [ysize],        [c.DrawYsize],        SR_IGNORE_CASE + SR_REPLACE_ALL       ),      Product3DDrawing     ),               CR,     [)]    ),       {--prepare 2D-Draw for rotated drawing of icon and 2D-commands--}   SetSetting(sa2DDraw,1,p(1)),   SetSetting(saRotate2d,1,p(1)),   SetSetting(saIcon,0,p(1))  )], [Change 2D-Draw and 3D-Draw Eventhandler of atoms p(1) entering a CTL. Necessary as the standard atoms do not have a variable to store rotation changes. Indeed this makes the CTL a slow atom, but changing code of the product/container is full of risk for backward compatibility and speed too.], [CTL_Change_Passing_Atom_Drawing(i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Set_Product_Location], [Conveyors], 2, 2, [do(  {--calculate x_location of product before starting the input movement--} xLoc(p(2)) :=  {--position depends on angle and position of connected input atom--}  Case(2 + Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1),   {--case 1 : movement into positiv x direction--}   xSize(p(1)),   {--case 2 : no movement into x direction--}   0,   {--case 3 : movement into negativ x direction--}   0 - xSize(p(2))  ),   {--calculate y_location of product before starting the input movement--} yLoc(p(2)) :=  {--position depends on angle and position of connected input atom--}  Case(2 + Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1),   {--case 1 : movement into positiv y direction--}   ySize(p(1)),   {--case 2 : no movement into x direction--}   0,   {--case 3 : movement into negativ y direction--}   0 - ySize(p(2))  ),  {--transport high is zsize of CTL--} zLoc(p(2)) := zSize(p(1)) )], [Calculates location of product p(2) inside CTL p(1) before starting the input movement.], [CTL_Set_Product_Location(c,i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Detect_Transfer_Time], [Conveyors], 1, 1, [if( {--turn or straight ahead ?--} Round(Cell(Corner_Transfer_Lifter_GetCurOC(p(1)) + NrIC(p(1)),2,p(1),1)) = Round(Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),2,p(1),1)), {--straight--} False, {--turn--} True)], [Check whether the CTL p(1) has to deal a transfer time in order to execute the turn of direction for current product.], [CTL_Detect_Transfer_Time(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Detect_Transport_Length], [Conveyors], 1, 1, [do( var([valSizeXorSizeY],vbValue),  valSizeXorSizeY :=  Case(   WhichIsTrue(    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1) <> 0,    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1) <> 0   ),   xSize(p(1)),   ySize(p(1))  ), valSizeXorSizeY)], [Returns the lengt taken from xsize or ysize of the CTL depending on Transport direction ], [CTL_Detect_Transport_Length(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Change_Product_XY_Size], [Conveyors], 2, 2, [do( {--rotationas of current output atom--} var([valAngleDiff],vbValue),  {--Flag if turn is true--} var([valTurnFlag],vbValue),  {--temp. xsize and ysize--} var([valTempX],vbValue), var([valTempY],vbValue),  {--diffrence between--} valAngleDiff :=  {--outputangle and--}  Cell(Corner_Transfer_Lifter_GetCurOC(p(1)) + NrIC(p(1)),2,p(1),1) -   {--inputangle--}  Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),2,p(1),1),   {--set flag if turn left or right--} valTurnFlag := Abs(Mod(valAngleDiff,180)) <> 0, if(  {--turn left or right is true--}  valTurnFlag,  do(   {--storing temp. xsize and ysize--}   valTempX := xSize(p(2)),   valTempY := ySize(p(2)),   {--changing x and y sizes in order to keep conveyors doing the correct setloc OnEntered of conveyor etc.--}    xSize(p(2)) := valTempY,   ySize(p(2)) := valTempX,   {--changing variables for drawing too if angle singnals turn--}   Case(    WhichIsTrue(     Ddb([DrawRotationas],p(2)) = 0,     Ddb([DrawRotationas],p(2)) = 90,     Ddb([DrawRotationas],p(2)) = 180,     Ddb([DrawRotationas],p(2)) = 270    ),    {--0°--}    do(     a    ),    {--90°--}    do(     Ddb([DrawXsize],p(2)) := ySize(p(2)),     Ddb([DrawYsize],p(2)) := xSize(p(2))    ),    {--180°--}    do(     a    ),    {--270°--}    do(     Ddb([DrawXsize],p(2)) := ySize(p(2)),     Ddb([DrawYsize],p(2)) := xSize(p(2))    )   )  ) ))], [On turn (left or right) a change of xsize and ysize is required in order to keep conveyors working correct], [CTL_Change_Product_XY_Size(c,i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Change_Product_Translation_On_Entered], [Conveyors], 2, 2, [do( var([atmTempAtom],vbAtom,p(2)),   Case(  WhichIsTrue(   {--Case 1 : Input from 0°--}   and(    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1) = 1,    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1) = 0   ),   {--Case 2 : Input from 90°--}   and(    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1) = 0,    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1) = 1   ),   {--Case 3 : Input from 180°--}   and(    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1) = -1,    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1) = 0   ),   {--Case 4 : Input from 270°--}   and(    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),3,p(1),1) = 0,    Cell(Corner_Transfer_Lifter_GetCurIC(p(1)),4,p(1),1) = -1   )  ),  {--Execute Case 1 : Input from 0°--}  Case(   WhichIsTrue(    Ddb([DrawRotationas],atmTempAtom) = 0,    Ddb([DrawRotationas],atmTempAtom) = 90,    Ddb([DrawRotationas],atmTempAtom) = 180,    Ddb([DrawRotationas],atmTempAtom) = 270   ),   {--SubCase 1 : drawing rotation of 0°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0   ),   {--SubCase 2 : drawing rotation of 90° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 3 : drawing rotation of 180°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 4 : drawing rotation of 270°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0   )  ),    {--Execute Case 2 : Input from 90°--}  Case(   WhichIsTrue(    Ddb([DrawRotationas],atmTempAtom) = 0,    Ddb([DrawRotationas],atmTempAtom) = 90,    Ddb([DrawRotationas],atmTempAtom) = 180,    Ddb([DrawRotationas],atmTempAtom) = 270   ),   {--SubCase 1 : drawing rotation of 0° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := Ddb([DrawXsize],atmTempAtom) - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 2 : drawing rotation of 90°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := Ddb([DrawYsize],atmTempAtom) - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 3 : drawing rotation of 180° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom)   ),   {--SubCase 4 : drawing rotation of 270° --}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0   )  ),    {--Execute Case 3 : Input from 180°--}  Case(   WhichIsTrue(    Ddb([DrawRotationas],atmTempAtom) = 0,    Ddb([DrawRotationas],atmTempAtom) = 90,    Ddb([DrawRotationas],atmTempAtom) = 180,    Ddb([DrawRotationas],atmTempAtom) = 270   ),   {--SubCase 1 : drawing rotation of 0°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0   ),   {--SubCase 2 : drawing rotation of 90° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 3 : drawing rotation of 180°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 4 : drawing rotation of 270°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0   )  ),  {--Execute Case 4 : Input from 270°--}  Case(   WhichIsTrue(    Ddb([DrawRotationas],atmTempAtom) = 0,    Ddb([DrawRotationas],atmTempAtom) = 90,    Ddb([DrawRotationas],atmTempAtom) = 180,    Ddb([DrawRotationas],atmTempAtom) = 270   ),   {--SubCase 1 : drawing rotation of 0°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0   ),   {--SubCase 2 : drawing rotation of 90° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0,    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 3 : drawing rotation of 180°--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)   ),   {--SubCase 4 : drawing rotation of 270° *--}   do(    Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),    Ddb([DrawYtranslate],atmTempAtom) := 0   )  )    ))], [Calculates the change of translation OnEntered of CTL p(1) for product p(2).], [CTL_Change_Product_Translation_On_Entered(c,i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Adjust_Product_Rotation_As], [Conveyors], 1, 1, [do( var([valTempAngle],vbValue,p(1)),  if(  {--More than 360° or equal to 360°--}  Abs(valTempAngle) >= 360,  {--adjust to range from -360° to 360°--}  valTempAngle := Mod(valTempAngle, 360) ),  if(  {--negativ angle--}  valTempAngle < 0,  {--adjust to positive angle--}  valTempAngle := 360 + valTempAngle ),   valTempAngle)], [Adjust angles stored in variable p(1) larger than 360° or lower than 0°], [CTL_Adjust_Product_Rotation_As(Ddb([DrawRotationas],i))], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_Change_Product_Translation_On_Exited], [Conveyors], 1, 1, [do( var([atmTempAtom],vbAtom,p(1)),  Case(  WhichIsTrue(   Ddb([DrawRotationas],atmTempAtom) = 0,   Ddb([DrawRotationas],atmTempAtom) = 90,   Ddb([DrawRotationas],atmTempAtom) = 180,   Ddb([DrawRotationas],atmTempAtom) = 270  ),  {--0°--}  do(   Ddb([DrawXtranslate],atmTempAtom) := 0,   Ddb([DrawYtranslate],atmTempAtom) := 0  ),  {--90°--}  do(   Ddb([DrawXtranslate],atmTempAtom) := 0,   Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)  ),  {--180°--}  do(   Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),   Ddb([DrawYtranslate],atmTempAtom) := 0 - Ddb([DrawYsize],atmTempAtom)  ),  {--270°--}  do(   Ddb([DrawXtranslate],atmTempAtom) := 0 - Ddb([DrawXsize],atmTempAtom),   Ddb([DrawYtranslate],atmTempAtom) := 0  ) ))], [Calculates the change of translation OnExited for product p(1).], [CTL_Change_Product_Translation_On_Exited(i)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_3Ddraw_ctu_without_icon], [Conveyors], 1, 1, [{--CTL with icon--}do( {--Legs--} if(  Corner_Transfer_Lifter_GetDrawLegs(p(1)),  do(   {--legs--}   di3DBox(-0.05, 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(-0.05, ySize(p(1)) - 0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(xSize(p(1)), 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(xSize(p(1)), ySize(p(1)) - 0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),      {--Leg supports--}   If(zSize(p(1)) > 0.3,    do(     di3DBox(-0.05, 0.05, zSize(p(1)) - 0.3, 0.03, ySize(p(1)) - 0.1, 0.03, Color(p(1)), 0),     di3DBox(xSize(p(1)), 0.05, zSize(p(1)) - 0.3, 0.03, ySize(p(1)) - 0.1, 0.03, Color(p(1)), 0),     di3DBox(0, 0, zSize(p(1)) - 0.3, xSize(p(1)), 0.03, 0.03, Color(p(1)), 0),     di3DBox(0, ySize(p(1)) - 0.05, zSize(p(1)) - 0.3, xSize(p(1)), 0.03, 0.03, Color(p(1)), 0)    )   )  ) ), {--Plate without icon--} di3DBox(0, 0.05, zSize(p(1))-0.11, xSize(p(1)), ySize(p(1))-0.1, 0.1, color(p(1))))], [Draws a Corner Transfer Lifter p(1) without icon on the plate], [CTL_3Ddraw_ctu_without_icon(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_3Ddraw_ctu_with_icon], [Conveyors], 1, 1, [{--CTL with icon--}do( {--Legs--} if(  Corner_Transfer_Lifter_GetDrawLegs(p(1)),  do(   {--legs--}   di3DBox(-0.05, 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(-0.05, ySize(p(1)) - 0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(xSize(p(1)), 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),   di3DBox(xSize(p(1)), ySize(p(1)) - 0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)), ColorSilver, 0),      {--Leg supports--}   If(zSize(p(1)) > 0.3,    do(     di3DBox(-0.05, 0.05, zSize(p(1)) - 0.3, 0.03, ySize(p(1)) - 0.1, 0.03, Color(p(1)), 0),     di3DBox(xSize(p(1)), 0.05, zSize(p(1)) - 0.3, 0.03, ySize(p(1)) - 0.1, 0.03, Color(p(1)), 0),     di3DBox(0, 0, zSize(p(1)) - 0.3, xSize(p(1)), 0.03, 0.03, Color(p(1)), 0),     di3DBox(0, ySize(p(1)) - 0.05, zSize(p(1)) - 0.3, xSize(p(1)), 0.03, 0.03, Color(p(1)), 0)    )   )  ) ), {--Plate with icon--} SetMaterialTexture(IconToTexture(Icon)), ScaleTextureCoords(Round(xSize(p(1))*2), Round(ySize(p(1))*2)), SetMaterialColor(Color, EMISSIVE_COLOR), di3DBox(0, 0.05, zSize(p(1))-0.11, xSize(p(1)), ySize(p(1))-0.1, 0.1, color(p(1))))], [Draws a Corner Transfer Lifter p(1) with icon on the plate], [CTL_3Ddraw_ctu_with_icon(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_2Ddraw_direction_arrows], [Conveyors], 1, 1, [do( var([valArrowLength], vbValue, Min(xSize(p(1))/2, ySize(p(1))/2)),  {--Text has same rotation as CTL--} RotateCoords(Corner_Transfer_Lifter_GetInitialRotation(p(1)), 0, 0, 1), {--Input arrows--} Repeat(  NrIC(p(1)),  do(   PushCoords,   {--Rotate according to input direction--}   RotateCoords(    Cell(Count, 2,  p(1), 1) - Corner_Transfer_Lifter_GetInitialRotation(p(1)),    0, 0, 1,    xSize/2,    ySize/2   ),   DrawArrow(    xSize(p(1))/2 - valArrowLength,     ySize(p(1))/2,     xSize(p(1))/2,     ySize(c)/2,     0,     0,     ColorWhite,     True,     100,     0   ),   PopCoords  ) ),  {--Output arrows--} Repeat(  NrOC(p(1)),  do(   PushCoords,   {--Rotate according to output direction--}   RotateCoords(    Cell(nRows(p(1)) + 1 - Count, 2,  c, 1) - Corner_Transfer_Lifter_GetInitialRotation(p(1)),    0, 0, 1,    xSize/2,    ySize/2   ),   DrawArrow(    xSize(p(1))/2,     ySize(p(1))/2,     xSize(p(1))/2 + valArrowLength,     ySize(p(1))/2,     0.15,     0.15,     ColorWhite,     True,     100,     0   ),   PopCoords  ) ))], [Draws arrows for p(1) according to rotation of atom connected to input and output channels], [CTL_2Ddraw_direction_arrows(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_3Ddraw_ctu_chain_conveyor_animated], [Conveyors], 1, 1, [{--chain conveyor--}do( { side supports } di3DBox(0.08, 0, zSize(p(1)) - 0.18, xSize(p(1)) - 0.16, 0.12, 0.16, Color(p(1))), di3DBox(0.08, ySize(p(1)) - 0.12, zSize(p(1)) - 0.18, xSize(p(1)) - 0.16, 0.12, 0.16, Color(p(1))),  { leg supports } di3DBox(0.1, -0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(0.1, ySize(p(1)) - 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(0.1, 0, zSize(p(1)) - 0.3, 0.03, ySize(p(1)), 0.03, ColorSilver),  di3DBox(xSize(p(1)) - 0.2, -0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.2, ySize(p(1)) - 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.2, 0, zSize(p(1)) - 0.3, 0.03, ySize(p(1)), 0.03, ColorSilver),  { outer conveyor chain } DrawCylinder(0.08, 0.06, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, 0.06, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), di3DBox(0.1, 0.05, zSize(p(1)) - 0.15, 0.12, ySize(p(1)) - 0.1, 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.22, 0.05, zSize(p(1)) - 0.15, 0.12, ySize(p(1)) - 0.1, 0.05, ColorSilver), di3DBox(0.08, 0.03, zSize(p(1)) - 0.02, xSize(p(1)) - 0.16, 0.06, 0.02, ColorBlack), di3DBox(0.08, ySize(p(1)) - 0.09, zSize(p(1)) - 0.02, xSize(p(1)) - 0.16, 0.06, 0.02, ColorBlack), DrawCylinder(0.08, 0.06, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, 0.06, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), { inner conveyor chain }  PushCoords,  if(ySize(p(1)) < xSize(p(1)),  Do(   RotateCoords(90, 0, 0, 1, 0, xSize(p(1)) / (xSize(p(1)) / ySize(p(1))) - ySize(p(1))),   TranslateCoords(0, 0 - xSize(p(1)), if(Content(p(1)) > 0, zloc(First(p(1))) - zSize(p(1)), 0))    ),  Do(   RotateCoords(90, 0, 0, 1, xSize(p(1)) / (xSize(p(1)) / ySize(p(1))) - ySize(p(1)), 0),   TranslateCoords(0, 0 - xSize(p(1)), if(Content(p(1)) > 0, zloc(First(p(1))) - zSize(p(1)), 0))    ) ),   di3DBox(0.24, 0.25, zSize(p(1)) - 0.14, ySize(p(1)) - 0.48, xSize(p(1)) - 0.5, 0.08, ColorSilver),  di3DBox(0.24, 0.24, zSize(p(1)) - 0.18, ySize(p(1)) - 0.48, 0.12, 0.16, Color(p(1))), di3DBox(0.24, xSize(p(1)) - 0.36, zSize(p(1)) - 0.18, ySize(p(1)) - 0.48, 0.12, 0.16, Color(p(1))),  di3DBox(0,0,0,0,0,0,ColorSilver),  DrawCylinder(0.24, 0.3, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, 0.3, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM),  di3DBox(0.24, 0.27, zSize(p(1)) - 0.02, ySize(p(1)) - 0.48, 0.06, 0.02, ColorBlack), di3DBox(0.24, xSize(p(1)) - 0.33, zSize(p(1)) - 0.02, ySize(p(1)) - 0.48, 0.06, 0.02, ColorBlack), DrawCylinder(0.24, 0.3, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, 0.3, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM),  PopCoords )], [Draws a Corner Transfer Lifter p(1) with animated chain conveyors], [CTL_3Ddraw_ctu_chain_conveyor_animated(c)], 0, [Corner Transfer Lifter]);
DefineFunction([CTL_3Ddraw_ctu_chain_conveyor], [Conveyors], 1, 1, [{--chain conveyor--}do( { side supports } di3DBox(0.08, 0, zSize(p(1)) - 0.18, xSize(p(1)) - 0.16, 0.12, 0.16, Color(p(1))), di3DBox(0.08, ySize(p(1)) - 0.12, zSize(p(1)) - 0.18, xSize(p(1)) - 0.16, 0.12, 0.16, Color(p(1))),  { leg supports } di3DBox(0.1, -0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(0.1, ySize(p(1)) - 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(0.1, 0, zSize(p(1)) - 0.3, 0.03, ySize(p(1)), 0.03, ColorSilver),  di3DBox(xSize(p(1)) - 0.2, -0.05, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.2, ySize(p(1)) - 0, zSize(p(1)) - Corner_Transfer_Lifter_GetLegExtend(p(1)) -  zLoc(p(1)), 0.05, 0.05, zSize(p(1)) + zLoc(p(1)) - 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.2, 0, zSize(p(1)) - 0.3, 0.03, ySize(p(1)), 0.03, ColorSilver),  { outer conveyor chain } DrawCylinder(0.08, 0.06, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, 0.06, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), di3DBox(0.1, 0.05, zSize(p(1)) - 0.15, 0.12, ySize(p(1)) - 0.1, 0.05, ColorSilver), di3DBox(xSize(p(1)) - 0.22, 0.05, zSize(p(1)) - 0.15, 0.12, ySize(p(1)) - 0.1, 0.05, ColorSilver),  di3DBox(0.08, 0.03, zSize(p(1)) - 0.02, xSize(p(1)) - 0.16, 0.06, 0.02, ColorBlack), di3DBox(0.08, ySize(p(1)) - 0.09, zSize(p(1)) - 0.02, xSize(p(1)) - 0.16, 0.06, 0.02, ColorBlack), DrawCylinder(0.08, 0.06, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, 0.06, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(xSize(p(1)) - 0.08, ySize(p(1)) - 0.06, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), { inner conveyor chain }  PushCoords,  if(ySize(p(1)) < xSize(p(1)),  Do(   RotateCoords(90, 0, 0, 1, 0, xSize(p(1)) / (xSize(p(1)) / ySize(p(1))) - ySize(p(1))),   TranslateCoords(0, 0 - xSize(p(1)), 0)    ),  Do(   RotateCoords(90, 0, 0, 1, xSize(p(1)) / (xSize(p(1)) / ySize(p(1))) - ySize(p(1)), 0),   TranslateCoords(0, 0 - xSize(p(1)), 0)    ) ),   di3DBox(0.24, 0.25, zSize(p(1)) - 0.14, ySize(p(1)) - 0.48, xSize(p(1)) - 0.5, 0.08, ColorSilver),  di3DBox(0.24, 0.24, zSize(p(1)) - 0.18, ySize(p(1)) - 0.48, 0.12, 0.16, Color(p(1))), di3DBox(0.24, xSize(p(1)) - 0.36, zSize(p(1)) - 0.18, ySize(p(1)) - 0.48, 0.12, 0.16, Color(p(1))),  di3DBox(0,0,0,0,0,0,ColorSilver),  DrawCylinder(0.24, 0.3, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.12, -0.06, -0.06, -180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, 0.3, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.12, 0.06, 0.06, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM),  di3DBox(0.24, 0.27, zSize(p(1)) - 0.02, ySize(p(1)) - 0.48, 0.06, 0.02, ColorBlack), di3DBox(0.24, xSize(p(1)) - 0.33, zSize(p(1)) - 0.02, ySize(p(1)) - 0.48, 0.06, 0.02, ColorBlack), DrawCylinder(0.24, 0.3, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.06, -0.08, -0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, 0.3, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM), DrawCylinder(ySize(p(1)) - 0.24, xSize(p(1)) - 0.3, zSize(p(1)) - 0.08, 0.06, 0.08, 0.08, 180, Y_AXIS, CP_SIDES + CP_TOP + CP_BOTTOM),  PopCoords )], [Draws a Corner Transfer Lifter p(1) with chain conveyors], [CTL_3Ddraw_ctu_chain_conveyor(c)], 0, [Corner Transfer Lifter]);
DefineFunction([Corner_Transfer_Lifter_GetInStrategy], [Atom Parameters], 1, 1, [Att(1, p(1))], [Returns the value of attribute InStrategy (# 1) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetInStrategy(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetInStrategy], [Atom Parameters], 2, 2, [Att(1, p(1)) := p(2)], [Sets the value of attribute InStrategy (# 1) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetInStrategy(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetSendTo], [Atom Parameters], 1, 1, [Att(2, p(1))], [Returns the value of attribute SendTo (# 2) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetSendTo(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetSendTo], [Atom Parameters], 2, 2, [Att(2, p(1)) := p(2)], [Sets the value of attribute SendTo (# 2) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetSendTo(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetEntryTrigger], [Atom Parameters], 1, 1, [Att(3, p(1))], [Returns the value of attribute EntryTrigger (# 3) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetEntryTrigger(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetEntryTrigger], [Atom Parameters], 2, 2, [Att(3, p(1)) := p(2)], [Sets the value of attribute EntryTrigger (# 3) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetEntryTrigger(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetExitTrigger], [Atom Parameters], 1, 1, [Att(4, p(1))], [Returns the value of attribute ExitTrigger (# 4) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetExitTrigger(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetExitTrigger], [Atom Parameters], 2, 2, [Att(4, p(1)) := p(2)], [Sets the value of attribute ExitTrigger (# 4) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetExitTrigger(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetCurIC], [Atom Parameters], 1, 1, [Att(5, p(1))], [Returns the value of attribute CurIC (# 5) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetCurIC(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetCurIC], [Atom Parameters], 2, 2, [Att(5, p(1)) := p(2)], [Sets the value of attribute CurIC (# 5) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetCurIC(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetCurOC], [Atom Parameters], 1, 1, [Att(6, p(1))], [Returns the value of attribute CurOC (# 6) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetCurOC(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetCurOC], [Atom Parameters], 2, 2, [Att(6, p(1)) := p(2)], [Sets the value of attribute CurOC (# 6) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetCurOC(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetSpeed], [Atom Parameters], 1, 1, [Att(7, p(1))], [Returns the value of attribute Speed (# 7) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetSpeed(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetSpeed], [Atom Parameters], 2, 2, [Att(7, p(1)) := p(2)], [Sets the value of attribute Speed (# 7) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetSpeed(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetTransferTime], [Atom Parameters], 1, 1, [Att(8, p(1))], [Returns the value of attribute TransferTime (# 8) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetTransferTime(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetTransferTime], [Atom Parameters], 2, 2, [Att(8, p(1)) := p(2)], [Sets the value of attribute TransferTime (# 8) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetTransferTime(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetCurTransferTime], [Atom Parameters], 1, 1, [Att(9, p(1))], [Returns the value of attribute CurTransferTime (# 9) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetCurTransferTime(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetCurTransferTime], [Atom Parameters], 2, 2, [Att(9, p(1)) := p(2)], [Sets the value of attribute CurTransferTime (# 9) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetCurTransferTime(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetInitialRotation], [Atom Parameters], 1, 1, [Att(10, p(1))], [Returns the value of attribute InitialRotation (# 10) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetInitialRotation(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetInitialRotation], [Atom Parameters], 2, 2, [Att(10, p(1)) := p(2)], [Sets the value of attribute InitialRotation (# 10) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetInitialRotation(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetDrawLegs], [Atom Parameters], 1, 1, [Att(11, p(1))], [Returns the value of attribute DrawLegs (# 11) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetDrawLegs(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetDrawLegs], [Atom Parameters], 2, 2, [Att(11, p(1)) := p(2)], [Sets the value of attribute DrawLegs (# 11) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetDrawLegs(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetTransferAnimate], [Atom Parameters], 1, 1, [Att(12, p(1))], [Returns the value of attribute TransferAnimate (# 12) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetTransferAnimate(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetTransferAnimate], [Atom Parameters], 2, 2, [Att(12, p(1)) := p(2)], [Sets the value of attribute TransferAnimate (# 12) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetTransferAnimate(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetStraightFlag], [Atom Parameters], 1, 1, [Att(13, p(1))], [Returns the value of attribute StraightFlag (# 13) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetStraightFlag(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetStraightFlag], [Atom Parameters], 2, 2, [Att(13, p(1)) := p(2)], [Sets the value of attribute StraightFlag (# 13) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetStraightFlag(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetCTLAtom], [Atom Parameters], 1, 1, [Att(14, p(1))], [Returns the value of attribute CTLAtom (# 14) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetCTLAtom(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetCTLAtom], [Atom Parameters], 2, 2, [Att(14, p(1)) := p(2)], [Sets the value of attribute CTLAtom (# 14) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetCTLAtom(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLibCat], [Atom Parameters], 1, 1, [Att(15, p(1))], [Returns the value of attribute LibCat (# 15) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLibCat(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLibCat], [Atom Parameters], 2, 2, [Att(15, p(1)) := p(2)], [Sets the value of attribute LibCat (# 15) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLibCat(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLibSubCat], [Atom Parameters], 1, 1, [Att(16, p(1))], [Returns the value of attribute LibSubCat (# 16) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLibSubCat(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLibSubCat], [Atom Parameters], 2, 2, [Att(16, p(1)) := p(2)], [Sets the value of attribute LibSubCat (# 16) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLibSubCat(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetIsConveyor], [Atom Parameters], 1, 1, [Att(17, p(1))], [Returns the value of attribute IsConveyor (# 17) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetIsConveyor(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetIsConveyor], [Atom Parameters], 2, 2, [Att(17, p(1)) := p(2)], [Sets the value of attribute IsConveyor (# 17) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetIsConveyor(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetExitTime], [Atom Parameters], 1, 1, [Att(18, p(1))], [Returns the value of attribute ExitTime (# 18) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetExitTime(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetExitTime], [Atom Parameters], 2, 2, [Att(18, p(1)) := p(2)], [Sets the value of attribute ExitTime (# 18) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetExitTime(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetTransferTimeFlag], [Atom Parameters], 1, 1, [Att(19, p(1))], [Returns the value of attribute TransferTimeFlag (# 19) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetTransferTimeFlag(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetTransferTimeFlag], [Atom Parameters], 2, 2, [Att(19, p(1)) := p(2)], [Sets the value of attribute TransferTimeFlag (# 19) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetTransferTimeFlag(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetTransferTimeAhead], [Atom Parameters], 1, 1, [Att(20, p(1))], [Returns the value of attribute TransferTimeAhead (# 20) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetTransferTimeAhead(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetTransferTimeAhead], [Atom Parameters], 2, 2, [Att(20, p(1)) := p(2)], [Sets the value of attribute TransferTimeAhead (# 20) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetTransferTimeAhead(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetMoveInFlag], [Atom Parameters], 1, 1, [Att(21, p(1))], [Returns the value of attribute MoveInFlag (# 21) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetMoveInFlag(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetMoveInFlag], [Atom Parameters], 2, 2, [Att(21, p(1)) := p(2)], [Sets the value of attribute MoveInFlag (# 21) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetMoveInFlag(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetIcon3D], [Atom Parameters], 1, 1, [Att(22, p(1))], [Returns the value of attribute Icon3D (# 22) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetIcon3D(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetIcon3D], [Atom Parameters], 2, 2, [Att(22, p(1)) := p(2)], [Sets the value of attribute Icon3D (# 22) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetIcon3D(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetAutoDetect], [Atom Parameters], 1, 1, [Att(23, p(1))], [Returns the value of attribute AutoDetect (# 23) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetAutoDetect(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetAutoDetect], [Atom Parameters], 2, 2, [Att(23, p(1)) := p(2)], [Sets the value of attribute AutoDetect (# 23) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetAutoDetect(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLegExtend], [Atom Parameters], 1, 1, [Att(24, p(1))], [Returns the value of attribute LegExtend (# 24) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLegExtend(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLegExtend], [Atom Parameters], 2, 2, [Att(24, p(1)) := p(2)], [Sets the value of attribute LegExtend (# 24) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLegExtend(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetModifyProduct2D], [Atom Parameters], 1, 1, [Att(25, p(1))], [Returns the value of attribute ModifyProduct2D (# 25) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetModifyProduct2D(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetModifyProduct2D], [Atom Parameters], 2, 2, [Att(25, p(1)) := p(2)], [Sets the value of attribute ModifyProduct2D (# 25) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetModifyProduct2D(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetResetTrigger], [Atom Parameters], 1, 1, [Att(26, p(1))], [Returns the value of attribute ResetTrigger (# 26) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetResetTrigger(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetResetTrigger], [Atom Parameters], 2, 2, [Att(26, p(1)) := p(2)], [Sets the value of attribute ResetTrigger (# 26) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetResetTrigger(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLiftSpeed], [Atom Parameters], 1, 1, [Att(27, p(1))], [Returns the value of attribute LiftSpeed (# 27) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLiftSpeed(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLiftSpeed], [Atom Parameters], 2, 2, [Att(27, p(1)) := p(2)], [Sets the value of attribute LiftSpeed (# 27) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLiftSpeed(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLiftAcceleration], [Atom Parameters], 1, 1, [Att(28, p(1))], [Returns the value of attribute LiftAcceleration (# 28) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLiftAcceleration(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLiftAcceleration], [Atom Parameters], 2, 2, [Att(28, p(1)) := p(2)], [Sets the value of attribute LiftAcceleration (# 28) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLiftAcceleration(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLiftDeceleration], [Atom Parameters], 1, 1, [Att(29, p(1))], [Returns the value of attribute LiftDeceleration (# 29) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLiftDeceleration(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLiftDeceleration], [Atom Parameters], 2, 2, [Att(29, p(1)) := p(2)], [Sets the value of attribute LiftDeceleration (# 29) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLiftDeceleration(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetLoadTime], [Atom Parameters], 1, 1, [Att(30, p(1))], [Returns the value of attribute LoadTime (# 30) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetLoadTime(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetLoadTime], [Atom Parameters], 2, 2, [Att(30, p(1)) := p(2)], [Sets the value of attribute LoadTime (# 30) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetLoadTime(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetUnLoadTime], [Atom Parameters], 1, 1, [Att(31, p(1))], [Returns the value of attribute UnLoadTime (# 31) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetUnLoadTime(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetUnLoadTime], [Atom Parameters], 2, 2, [Att(31, p(1)) := p(2)], [Sets the value of attribute UnLoadTime (# 31) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetUnLoadTime(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetGoToParkingLocation], [Atom Parameters], 1, 1, [Att(32, p(1))], [Returns the value of attribute GoToParkingLocation (# 32) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetGoToParkingLocation(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetGoToParkingLocation], [Atom Parameters], 2, 2, [Att(32, p(1)) := p(2)], [Sets the value of attribute GoToParkingLocation (# 32) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetGoToParkingLocation(c, 1)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_GetParkingZLocation], [Atom Parameters], 1, 1, [Att(33, p(1))], [Returns the value of attribute ParkingZLocation (# 33) of Corner Transfer Lifter e1], [Corner_Transfer_Lifter_GetParkingZLocation(c)], 0, [Corner Transfer Lifter.atm]);
DefineFunction([Corner_Transfer_Lifter_SetParkingZLocation], [Atom Parameters], 2, 2, [Att(33, p(1)) := p(2)], [Sets the value of attribute ParkingZLocation (# 33) of Corner Transfer Lifter e1 to e2], [Corner_Transfer_Lifter_SetParkingZLocation(c, 1)], 0, [Corner Transfer Lifter.atm]);
Set(Icon(a), 
	RegisterIcon(TexturesDir([tech\etopcromegunside2sml.jpg]), [etopcromegunside2sml.jpg], 1, 0, 0, 255, 255, false, 0));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
AddTexture(
	RegisterTexture(TexturesDir([tech\etopcromegunside2sml.jpg]), [etopcromegunside2sml.jpg], 256, 256, 1, 1, 0, 0, 0, 0), a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\Corner Transfer Lifter.ico]));
Set(Info, [
Last revision:
-------------------
July, 2008, CM
]);
SetChannels(1, 1);
SetChannelRanges(1, 255, 1, 255);
int001(72);
SetSize(1, 1, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(33);
SetAttributeName(r(1), [InStrategy]);
SetAttributeName(r(2), [SendTo]);
SetAttributeName(r(3), [EntryTrigger]);
SetAttributeName(r(4), [ExitTrigger]);
SetAttributeName(r(5), [CurIC]);
SetAttributeName(r(6), [CurOC]);
SetAttributeName(r(7), [Speed]);
SetAttributeName(r(8), [TransferTime]);
SetAttributeName(r(9), [CurTransferTime]);
SetAttributeName(r(10), [InitialRotation]);
SetAttributeName(r(11), [DrawLegs]);
SetAttributeName(r(12), [TransferAnimate]);
SetAttributeName(r(13), [StraightFlag]);
SetAttributeName(r(14), [CTLAtom]);
SetAttributeName(r(15), [LibCat]);
SetAttributeName(r(16), [LibSubCat]);
SetAttributeName(r(17), [IsConveyor]);
SetAttributeName(r(18), [ExitTime]);
SetAttributeName(r(19), [TransferTimeFlag]);
SetAttributeName(r(20), [TransferTimeAhead]);
SetAttributeName(r(21), [MoveInFlag]);
SetAttributeName(r(22), [Icon3D]);
SetAttributeName(r(23), [AutoDetect]);
SetAttributeName(r(24), [LegExtend]);
SetAttributeName(r(25), [ModifyProduct2D]);
SetAttributeName(r(26), [ResetTrigger]);
SetAttributeName(r(27), [LiftSpeed]);
SetAttributeName(r(28), [LiftAcceleration]);
SetAttributeName(r(29), [LiftDeceleration]);
SetAttributeName(r(30), [LoadTime]);
SetAttributeName(r(31), [UnLoadTime]);
SetAttributeName(r(32), [GoToParkingLocation]);
SetAttributeName(r(33), [ParkingZLocation]);
SetExprAtt(r(1), [{.openallic(c)|1. Any inputchannel.}openallic(c)]);
SetExprAtt(r(2), [1]);
SetExprAtt(r(7), [1]);
SetExprAtt(r(8), [0]);
SetExprAtt(r(9), [0]);
SetExprAtt(r(11), [1]);
SetExprAtt(r(12), [1]);
SetExprAtt(r(14), [1]);
SetExprAtt(r(17), [16]);
SetExprAtt(r(21), [0]);
SetExprAtt(r(22), [4]);
SetExprAtt(r(23), [1]);
SetExprAtt(r(24), [zSize(c)]);
SetAtt(r(27), 1);
SetAtt(r(28), 1);
SetAtt(r(29), 1);
SetExprAtt(r(33), [zSize(c)]);
int024;
SetTable(1, 4);
int015(0, 64, [`channel`
1
]);
int015(1, 64, [`atomname`
]);
int015(2, 64, [`rotationas`
]);
int015(3, 64, [`x_motionflag`
]);
int015(4, 64, [`y_motionflag`
]);
Set(OnEvent, [Case( EventCode, {--Event 1: input strategy--} Do(  {--status empty--}  Status(c) := 13,    {--input strategy--}  Corner_Transfer_Lifter_GetInStrategy(c) ),  {--Event 2: stop input movement, select oc and start transfer time--} do(  {--stop input movement--}  StopAtom(i),     {--Status distributing--}  Status(c) := 24,   {--select and store output channel--}  Corner_Transfer_Lifter_SetCurOC(c, Corner_Transfer_Lifter_GetSendTo(c)),    {--turn or straight ahead ?--}  Corner_Transfer_Lifter_SetTransferTimeFlag(   c,   Max(    {--straight ahead also requires Transfertime--}    Corner_Transfer_Lifter_GetTransferTimeAhead(c),     {--TransferTime only on turn left/right--}    CTL_Detect_Transfer_Time(c)   )  ),     {--calculate current transfer time--}  Corner_Transfer_Lifter_SetCurTransferTime(   c,   if(Corner_Transfer_Lifter_GetTransferTimeFlag(c), {--TransferTime necessary ?--}    Corner_Transfer_Lifter_GetTransferTime(c),       {--TransferTime--}    0                                                {--no Corner_Transfer_Lifter_GetTransferTime(c) --}   )  ),    {--animate Corner_Transfer_Lifter_GetTransferTime(c) (optional)--}  if(   and(    Corner_Transfer_Lifter_GetTransferAnimate(c),    {--animation--}    Corner_Transfer_Lifter_GetCurTransferTime(c) > 0 {--fail safe--}   ),   do(    {--set product Corner_Transfer_Lifter_GetSpeed(c) for part 1 of animation--}    SetSpeed(     0,     0,     0.1 / Corner_Transfer_Lifter_GetCurTransferTime(c) / 2, {--0.1 m elevation--}     i    ),    {--execute current transfer time (animated)--}    CreateEvent(0, c, 3, 0, i)   ),   do(    {--simply execute current transfer time--}    CreateEvent(Corner_Transfer_Lifter_GetCurTransferTime(c), c, 5, 0, i)   )  )   ),  {--Event 3: execute part 1 of current transfer time (animated)--} do(    {--set product Corner_Transfer_Lifter_GetSpeed(c) for part 1 of animation--}  SetSpeed(   0,   0,   0.1/ Corner_Transfer_Lifter_GetCurTransferTime(c) /2, {--0.1 m elevation up--}   i  ),    {--execute part 2 of current transfer time (animated)--}  CreateEvent(Corner_Transfer_Lifter_GetCurTransferTime(c) / 2, c, 4, 0, i) ), {--Event 4: execute part 2 of current transfer time (animated)--} do(  {--stop animation--}  StopAtom(i),     {--set product Corner_Transfer_Lifter_GetSpeed(c) for part 1 of animation--}  SetSpeed(   0,   0,   0 - 0.1/ Corner_Transfer_Lifter_GetCurTransferTime(c) /2, {--0.1 m elevation down--}   i  ),    {--execute part 2 of current transfer time (animated)--}  CreateEvent(Corner_Transfer_Lifter_GetCurTransferTime(c) / 2, c, 5, 0, i) ),  {--Event 5: stop part 2 of current transfer time (animated)--} do(  {--stop animation--}  StopAtom(i),    {--send on the product--}  CreateEvent(0, c, 6, 0, i) ),  {--Event 6: lift to dropoff--} do(  {--Status travel full--}  Status(c) := 6,     createevent(   MovingTo(    c,     0,     xloc(c),     yloc(c),    zloc(Out(Corner_Transfer_Lifter_GetCurOC(c), c)) + zsize(Out(Corner_Transfer_Lifter_GetCurOC(c), c)) - zsize(c),    Corner_Transfer_Lifter_GetLiftSpeed(c),    0,    Corner_Transfer_Lifter_GetLiftAcceleration(c),    Corner_Transfer_Lifter_GetLiftDeceleration(c)   ),   c,case(traveleventcode,6,7)  ) ), {--Event 7: send on the product--} Do(  {--status unload--}  Status(c) := 17,    {--Trigger to send on the product after unload time--}  CreateEvent(Corner_Transfer_Lifter_GetUnLoadTime(c), c, 11) ),  {--Event 8: lift to pickup--} do(  {--Status travel empty--}  Status(c) := 7,    createevent(   MovingTo(    c,     0,     xloc(c),     yloc(c),    zloc(In(Corner_Transfer_Lifter_GetCurIC(c), c)) + zsize(In(Corner_Transfer_Lifter_GetCurIC(c), c)) + Att([Elevation], In(Corner_Transfer_Lifter_GetCurIC(c), c)) - zsize(c),    Corner_Transfer_Lifter_GetLiftSpeed(c),    0,    Corner_Transfer_Lifter_GetLiftAcceleration(c),    Corner_Transfer_Lifter_GetLiftDeceleration(c)   ),   c,case(traveleventcode,8,9)  ) ),  {--Event 9: Trigger to open input after load time--} do(  {--status load--}  Status(c) := 16,      CreateEvent(Corner_Transfer_Lifter_GetLoadTime(c), c, 10) ),  {--Event 10: open input when product has left collision area--} do(  {--permission to enter without checking after collision time--}  c.CheckFlag := 0,    {--open stored ic to permit entrance of next product--}  OpenIC(Corner_Transfer_Lifter_GetCurIC(c), c) ),  {--Event 11: send on the product--} Do(  {--status blocked--}  Status(c) := 5,    {--ocready--}  OpenOc(Corner_Transfer_Lifter_GetCurOC(c), c) ),  {--Event 12: lift to default z location--} createevent(  MovingTo(   c,    0,    xloc(c),    yloc(c),   Corner_Transfer_Lifter_GetParkingZLocation(c) - zsize(c),   Corner_Transfer_Lifter_GetLiftSpeed(c),   0,   Corner_Transfer_Lifter_GetLiftAcceleration(c),   Corner_Transfer_Lifter_GetLiftDeceleration(c)  ),  c,case(traveleventcode,12, 1) ))]);
Set(OnEntered, [Do( {--close all ic--} CloseAllIc(c),  {--store input channel (necessary only for first product after Reset)--} Corner_Transfer_Lifter_SetCurIC(c, ic(c)),  {--Used in OnIcReady to check for next input atom--} c.CheckFlag := 1,  {--status conveying--} Status(c) := 26,  {--store atom (used in IcReady in order to get its xsize)--} Corner_Transfer_Lifter_SetCTLAtom(c, i),  {--rotationas of current input atom--} var([valInputangle], vbValue), {--diffrence of rotationas between CTL and current input atom--} var([valInputanglediff], vbValue),  {--rotationas of current input atom--} valInputangle := Cell(Corner_Transfer_Lifter_GetCurIC(c), 2, c, 1),   {--diffrence of rotationas between CTL and input atom--} valInputanglediff := mod(Round(Corner_Transfer_Lifter_GetInitialRotation(c) - valInputangle,3), 360), {--bowdlerised diffrence of rotationas between CTL and input atom--} if(  {--positiv angle--}  valInputanglediff > 0,  {--adjust--}  valInputanglediff := valInputanglediff - 360 ),    {--compensate diffrence of rotationas between CTL and input atom--} Ddb([DrawRotationas], i) := Ddb([DrawRotationas], i) - valInputanglediff,  {--bowdlerised rotation of input atom--} Ddb([DrawRotationas], i) := CTL_Adjust_Product_Rotation_As(Ddb([DrawRotationas], i)), {--Normally conveyors turn products into transport direction.--} {--Using a CTL this characteristics is undesired--}  if(  {--Product/Container first passing a CTL ?--}  not(Ddb([DrawFlag], i)),    do(   {--Set flag to change behavior of 2D and 3D Eventhandler.--}   Ddb([DrawFlag], i) := 1,      {--First setting of drawing variables--}   Ddb([DrawXsize],i) := xSize(i),   Ddb([DrawYsize],i) := ySize(i),      if(    {--Modify default 2D visualization of Product in order to display the detailed rotation behaviour--}    Corner_Transfer_Lifter_GetModifyProduct2D(c),    do(     {--Enable 2DDraw--}     SetSetting(sa2DDraw, 1, i),     SetSetting(saRotate2d, 1, i),     {--Disable Icon--}     SetSetting(saIcon, 0, i),     {--Disable 2DOutline--}     SetSetting(saIconContour, 0, i),     SetSetting(sa2DOutline, 0, i)    )   )  ) ),  {--The 2D- and 3D- Eventhandler of other passing atoms (in addition to Product or Container) can be changed to compensate rotationas--} {if(}  {--atoms first passing of a CTL ?--}  {not(Ddb([DrawFlag], i)),}   {--change 2D and 3D Eventhandler. Adding variable "ddb([DrawRotationas],product)" to rotate the product around self--}  {CTL_Change_Passing_Atom_Drawing(i)} {),}  {--get translation for drawing purpose of product to compensate the translation (caused by change of rotationas)--} CTL_Change_Product_Translation_On_Entered(c, i),  if(  Corner_Transfer_Lifter_GetMoveInFlag(c),  {--place without input movement--}  do(   {---location depends on size of product--}   SetLoc(0, 0, zSize(c), i),   {--immediately start transfer time--}   CreateEvent(0, c, 2, 0, i)  ),  {--input movement is enabled--}  do(   {--calculate x/y/z location of product before starting the input movement.--}   CTL_Set_Product_Location(c,i),      {--set product Corner_Transfer_Lifter_GetSpeed(c) for input movement--}   SetSpeed(    {--evaluate x_motion flag--}    Cell(Corner_Transfer_Lifter_GetCurIC(c), 3, c, 1) * Corner_Transfer_Lifter_GetSpeed(c),    {--evaluate y_motion flag--}    Cell(Corner_Transfer_Lifter_GetCurIC(c), 4, c, 1) * Corner_Transfer_Lifter_GetSpeed(c),    {--no elevation in z--}    0,    i   ),     {--stop product when input movement (xsize or ysize of CTL) has finished--}   CreateEvent(TravelTime(Corner_Transfer_Lifter_GetSpeed(c), CTL_Detect_Transport_Length(c)), c, 2, 0, i)  ) ),  Corner_Transfer_Lifter_GetEntryTrigger(c))]);
Set(OnExited, [do( {--close all oc--} CloseAllOc(c),  {--Store time when product has left the CTL--} Corner_Transfer_Lifter_SetExitTime(c, Time),    {--get rotationas of output atom in order to calculate variable for drawing the product with correct rotationas--} Ddb([DrawRotationas], i) := Ddb([DrawRotationas], i) + CTL_Change_Product_Z_Rotation(c, i),   {--Check whether a turn (left or right) requires a change of xsize and ysize of product in order to keep conveyors working correct--} CTL_Change_Product_XY_Size(c, i),  {--bowdlerised rotation of output atom--} Ddb([DrawRotationas], i) := CTL_Adjust_Product_Rotation_As(Ddb([DrawRotationas], i)),   {--get translation for drawing purpose of product to compensate the translation (caused by change of rotationas)--} CTL_Change_Product_Translation_On_Exited(i), if(  {--Default location ?--}  Corner_Transfer_Lifter_GetGoToParkingLocation(c),    do(   {--Status travel empty--}   Status(c) := 7,     {--Trigger movement to default z location--}   createEvent(0, c, 12)  ),      {--Trigger input strategy--}  createEvent(0, c, 1) ), Corner_Transfer_Lifter_GetExitTrigger(c))]);
Set(OnCreation, [AutoConnect]);
Set(OnReset, [do(  {--Store the time when output movement has finished (no use for first product)--} Corner_Transfer_Lifter_SetExitTime(c, 1E20), {--Used in OnIcReady to check for next input atom--} c.CheckFlag := 0, {--Status empty--} Status(c) := 13, {--Close all ic--} CloseAllIC(c), {--Close all oc--} CloseAllOc(c),  {--Bowdlerise rotation information (<= 360°)--} Corner_Transfer_Lifter_SetInitialRotation(c, mod(Corner_Transfer_Lifter_GetInitialRotation(c), 360)),  {--Bowdlerise rotation information (>= -45° and <= 45°)--} if(Corner_Transfer_Lifter_GetInitialRotation(c) < 0,  Corner_Transfer_Lifter_SetInitialRotation(c, 360 + InitialRotation) ),      {--Rotate atom--} RotationAs(c) := Corner_Transfer_Lifter_GetInitialRotation(c),  {--Reset elevation speed--} StopAtom(c),  {--Default position--} if(AtomExists(In(1,c)),  zLoc(c) := zloc(In(1, c)) + zsize(In(1, c)) - zsize(c),  zLoc(c) := 0 ),  {--Configure table based on nr of ic + oc--}  SetTable(NrIC(c) + NrOC(c), 4, c),  {--Column headers--} cell(0, 0, c) := [channel], cell(0, 1, c) := [atomname], cell(0, 2, c) := [rotationas], cell(0, 3, c) := [x_motionflag], cell(0, 4, c) := [y_motionflag],  {--Get angles and motion directions of connected input atom--} Repeat(NrIC(c),  CTL_Input_Atom_Set_Table(In(Count, c), c, Count) ),  {--Get angles and motion directions of connected output atom--} Repeat(NrOC(c),  CTL_Output_Atom_Set_Table(Out(Count, c), c, NrIC(c) + Count) ),  {--Input strategy--} CreateEvent(0, c, 1),  {--ResetTrigger--} Corner_Transfer_Lifter_GetResetTrigger(c))]);
Set(OnUser, [Do( { Delete any current instances of this form.}  GuiDestroy([Corner Transfer Lifter]), { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\Corner Transfer Lifter.gui]), 1), { Show the GUI-form.} GuiCreate([Corner Transfer Lifter], [Corner Transfer Lifter], 0, c, 0, 1))]);
Set(OnOcReady, [If( {--fail safe--} Content(c) > 0, {--send on the product to stored oc--} MoveRequest(First(c), Corner_Transfer_Lifter_GetCurOC(c)))]);
Set(OnIcReady, [do(
 if(
  {--check ic for next input atom--}
  c.CheckFlag,
  
  do(
   {--block all ic--}
   CloseAllIC(c),
   
   {--store ic that caused the ICReady--}
   Corner_Transfer_Lifter_SetCurIC(c, ic(c)),   
   
   {--Check whether following product has to wait in order to prevent collissions.--}
   Corner_Transfer_Lifter_SetStraightFlag(c, CTL_Detect_Collision(c)),
               
   if(
    {--collissions detected ?--}
    Corner_Transfer_Lifter_GetStraightFlag(c),
    
    {--Straight ahead. Check for Corner_Transfer_Lifter_GetSpeed(c) based collisions--}
    Case(
     WhichIsTrue(
      Corner_Transfer_Lifter_GetSpeed(Out(Corner_Transfer_Lifter_GetCurOC(c), c)) = Corner_Transfer_Lifter_GetSpeed(c),
      Corner_Transfer_Lifter_GetSpeed(Out(Corner_Transfer_Lifter_GetCurOC(c), c)) > Corner_Transfer_Lifter_GetSpeed(c),
      Corner_Transfer_Lifter_GetSpeed(Out(Corner_Transfer_Lifter_GetCurOC(c), c)) < Corner_Transfer_Lifter_GetSpeed(c) 
     ),
     {--Output atom has same speed. Open input immediately--}
     createEvent(0, c, 8),
     {--Output atom ist faster. Open input immediately--}
     createEvent(0, c, 8),
     {--Output atom ist slower. Open input when exited product has left collision area--}
     createEvent(
      if(
       AtomExists(vtp(Corner_Transfer_Lifter_GetCTLAtom(c)),Model),
       TravelTime(Att([Speed], Out(Corner_Transfer_Lifter_GetCurOC(c),c)),xSize(vtp(Corner_Transfer_Lifter_GetCTLAtom(c))))
      ), c, 8
     )
    ),
 
    {--Turn. Wait till exited product has left collision area before open input again--}
    createEvent(
     if(
      AtomExists(vtp(Corner_Transfer_Lifter_GetCTLAtom(c)),Model),
      TravelTime(Att([Speed], Out(Corner_Transfer_Lifter_GetCurOC(c), c)), xSize(vtp(Corner_Transfer_Lifter_GetCTLAtom(c))))
     ), c, 8
    )
   )
  )
  
  {--else the already checked ic is stored in Attribut CurIC--}
  {--entering of product coming from Corner_Transfer_Lifter_GetCurIC(c) triggers OnEntered--}
 )
)
]);
Set(On2DDraw, [do( {--Arrows of transport directions--} CTL_2Ddraw_direction_arrows(c))]);
Set(On3DDraw, [Case( Corner_Transfer_Lifter_GetIcon3D(c),  {--Non--} do(  Corner_Transfer_Lifter_SetIcon3D(c, Corner_Transfer_Lifter_GetIcon3D(c)) ),  {--Simple box--} do(  di3DBox(0, 0, 0, xSize, ySize, zSize, Color) ), {--Box with icon--} do(  di3DBox(0, 0, 0, xSize, ySize, zSize, Color,0, 0, Icon) ),   {--CTL without icon--} do(  CTL_3Ddraw_ctu_without_icon(c) ),  {--CTL with icon--} do(  CTL_3Ddraw_ctu_with_icon(c) ),  {--CTL with chain conveyors--} do(  CTL_3Ddraw_ctu_chain_conveyor(c) ),  {--CTL with animated chain conveyors--} do(  CTL_3Ddraw_ctu_chain_conveyor_animated(c) ))]);
SetStatus(0);
int018;
int007;
