

{Preregister functions}

PreregisterFunction([RFID_GATE__SetID], 2, 2);
PreregisterFunction([RFID_GATE__GetID], 1, 1);
PreregisterFunction([RFID_GATE__SetName], 2, 2);
PreregisterFunction([RFID_GATE__GetName], 1, 1);
PreregisterFunction([RFID_GATE__SetDescription], 2, 2);
PreregisterFunction([RFID_GATE__GetDescription], 1, 1);
PreregisterFunction([RFID_GATE__Initialize], 1, 1);
PreregisterFunction([RFID_GATE__Animate3DGate], 0, 0);
PreregisterFunction([RFID_GATE__Animate3D], 1, 1);
PreregisterFunction([RFID_GATE__SetEntryTrigger], 2, 2);
PreregisterFunction([RFID_GATE__GetEntryTrigger], 1, 1);
PreregisterFunction([RFID_GATE__SetExitTrigger], 2, 2);
PreregisterFunction([RFID_GATE__GetExitTrigger], 1, 1);
PreregisterFunction([RFID_GATE__SetDisplayTexture], 2, 2);
PreregisterFunction([RFID_GATE__GetDisplayTexture], 1, 1);
PreregisterFunction([RFID_GATE__SetxRepeatOfTexture], 2, 2);
PreregisterFunction([RFID_GATE__GetxRepeatOfTexture], 1, 1);
PreregisterFunction([RFID_GATE__SetyRepeatOfTexture], 2, 2);
PreregisterFunction([RFID_GATE__GetyRepeatOfTexture], 1, 1);
PreregisterFunction([RFID_GATE__SetMaterialTransparency], 2, 2);
PreregisterFunction([RFID_GATE__GetMaterialTransparency], 1, 1);
PreregisterFunction([RFID_GATE__SetIntelliNetzKnotenEingang], 2, 2);
PreregisterFunction([RFID_GATE__GetIntelliNetzKnotenEingang], 1, 1);
PreregisterFunction([RFID_GATE__SetIntelliNetzKnotenAusgang], 2, 2);
PreregisterFunction([RFID_GATE__GetIntelliNetzKnotenAusgang], 1, 1);
PreregisterFunction([RFID_GATE__RegisterSubatoms], 1, 1);
PreregisterFunction([RFID_GATE__Animate2D], 1, 1);
PreregisterFunction([RFID_GATE__ConnectNodes], 1, 1);
PreregisterFunction([RFID_GATE__SetTravelPath], 2, 2);
PreregisterFunction([RFID_GATE__GetTravelPath], 1, 1);
PreregisterFunction([RFID_GATE__SetReplacedTravelPath], 2, 2);
PreregisterFunction([RFID_GATE__GetReplacedTravelPath], 1, 1);
PreregisterFunction([RFID_GATE__SetReadData], 2, 2);
PreregisterFunction([RFID_GATE__GetReadData], 1, 1);
PreregisterFunction([RFID_GATE__SetLockNodeLocations], 2, 2);
PreregisterFunction([RFID_GATE__GetLockNodeLocations], 1, 1);
PreregisterFunction([RFID_GATE__WriteDataToTable], 1, 1);
PreregisterFunction([RFID_GATE__SetTabelleDatenAuslesen], 2, 2);
PreregisterFunction([RFID_GATE__GetTabelleDatenAuslesen], 1, 1);
PreregisterFunction([RFID_GATE__SetCurrentTransporter], 2, 2);
PreregisterFunction([RFID_GATE__GetCurrentTransporter], 1, 1);
PreregisterFunction([RFID_GATE__SetNumberOfLabels], 2, 2);
PreregisterFunction([RFID_GATE__GetNumberOfLabels], 1, 1);
PreregisterFunction([RFID_GATE__SetNumberOfAttributes], 2, 2);
PreregisterFunction([RFID_GATE__GetNumberOfAttributes], 1, 1);
PreregisterFunction([RFID_GATE__ConnectNodesExtended], 1, 1);


{Atom: RFID-Gate}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
Set(OnInit, [do( { Constants } dim([RFID_GATE_EVENTCODE_WRITEDATA], vbConstant, 1), dim([RFID_GATE_COLUMN_ATTRIBUTENAME], vbConstant, 1), dim([RFID_GATE_COLUMN_READDATA], vbConstant, 2), dim([RFID_GATE_TRAVELPATH_ONEWAY], vbConstant, 1), dim([RFID_GATE_TRAVELPATH_TWOWAY], vbConstant, 2), { table } dim([RFID_GATE_GUITABLE_TAGNAME], vbConstant, 1), dim([RFID_GATE_GUITABLE_REFERENCE], vbConstant, 2), dim([RFID_GATE_GUITABLE_MODE], vbConstant, 3), dim([RFID_GATE_GUITABLE_VALUE], vbConstant, 4), dim([RFID_GATE_GUITABLE_COLUMNS], vbConstant, 5), { Preregister functions } PreregisterFunction([RFID_GATE__SetID], 2, 2), PreregisterFunction([RFID_GATE__GetID], 1, 1), PreregisterFunction([RFID_GATE__SetName], 2, 2), PreregisterFunction([RFID_GATE__GetName], 1, 1), PreregisterFunction([RFID_GATE__SetDescription], 2, 2), PreregisterFunction([RFID_GATE__GetDescription], 1, 1), PreregisterFunction([RFID_GATE__Initialize], 1, 1), PreregisterFunction([RFID_GATE__Animate3DGate], 0, 0), PreregisterFunction([RFID_GATE__Animate3D], 1, 1), PreregisterFunction([RFID_GATE__SetEntryTrigger], 2, 2), PreregisterFunction([RFID_GATE__GetEntryTrigger], 1, 1), PreregisterFunction([RFID_GATE__SetExitTrigger], 2, 2), PreregisterFunction([RFID_GATE__GetExitTrigger], 1, 1), PreregisterFunction([RFID_GATE__SetDisplayTexture], 2, 2), PreregisterFunction([RFID_GATE__GetDisplayTexture], 1, 1), PreregisterFunction([RFID_GATE__SetxRepeatOfTexture], 2, 2), PreregisterFunction([RFID_GATE__GetxRepeatOfTexture], 1, 1), PreregisterFunction([RFID_GATE__SetyRepeatOfTexture], 2, 2), PreregisterFunction([RFID_GATE__GetyRepeatOfTexture], 1, 1), PreregisterFunction([RFID_GATE__SetMaterialTransparency], 2, 2), PreregisterFunction([RFID_GATE__GetMaterialTransparency], 1, 1), PreregisterFunction([RFID_GATE__SetIntelliNetzKnotenEingang], 2, 2), PreregisterFunction([RFID_GATE__GetIntelliNetzKnotenEingang], 1, 1), PreregisterFunction([RFID_GATE__SetIntelliNetzKnotenAusgang], 2, 2), PreregisterFunction([RFID_GATE__GetIntelliNetzKnotenAusgang], 1, 1), PreregisterFunction([RFID_GATE__RegisterSubatoms], 1, 1), PreregisterFunction([RFID_GATE__Animate2D], 1, 1), PreregisterFunction([RFID_GATE__ConnectNodes], 1, 1), PreregisterFunction([RFID_GATE__SetTravelPath], 2, 2), PreregisterFunction([RFID_GATE__GetTravelPath], 1, 1), PreregisterFunction([RFID_GATE__SetReplacedTravelPath], 2, 2), PreregisterFunction([RFID_GATE__GetReplacedTravelPath], 1, 1), PreregisterFunction([RFID_GATE__SetReadData], 2, 2), PreregisterFunction([RFID_GATE__GetReadData], 1, 1), PreregisterFunction([RFID_GATE__SetLockNodeLocations], 2, 2), PreregisterFunction([RFID_GATE__GetLockNodeLocations], 1, 1), PreregisterFunction([RFID_GATE__WriteDataToTable], 1, 1), PreregisterFunction([RFID_GATE__SetTabelleDatenAuslesen], 2, 2), PreregisterFunction([RFID_GATE__GetTabelleDatenAuslesen], 1, 1), PreregisterFunction([RFID_GATE__SetCurrentTransporter], 2, 2), PreregisterFunction([RFID_GATE__GetCurrentTransporter], 1, 1), PreregisterFunction([RFID_GATE__SetNumberOfLabels], 2, 2), PreregisterFunction([RFID_GATE__GetNumberOfLabels], 1, 1), PreregisterFunction([RFID_GATE__SetNumberOfAttributes], 2, 2), PreregisterFunction([RFID_GATE__GetNumberOfAttributes], 1, 1), PreregisterFunction([RFID_GATE__ConnectNodesExtended], 1, 1))]);
int023([RFID-Gate], 255, 11312);
DefineFunction([RFID_GATE__SetID], [RFID-Gate], 2, 2, [Att([ID], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property ID of RFID-Gate.], [RFID_GATE__SetID( atmRFIDGate, newID )], 0, []);
DefineFunction([RFID_GATE__GetID], [RFID-Gate], 1, 1, [Att([ID], p(1))], [p(1) as RFID-GateResult: integer. Get the property ID of RFID-Gate.], [newID := RFID_GATE__GetID( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetName], [RFID-Gate], 2, 2, [Att([Name], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as stringResult: none. Sets the property Name of RFID-Gate.], [RFID_GATE__SetName( atmRFIDGate, newName )], 0, []);
DefineFunction([RFID_GATE__GetName], [RFID-Gate], 1, 1, [Att([Name], p(1))], [p(1) as RFID-GateResult: string. Get the property Name of RFID-Gate.], [newName := RFID_GATE__GetName( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetDescription], [RFID-Gate], 2, 2, [Att([Description], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as stringResult: none. Sets the property Description of RFID-Gate.], [RFID_GATE__SetDescription( atmRFIDGate, newDescription )], 0, []);
DefineFunction([RFID_GATE__GetDescription], [RFID-Gate], 1, 1, [Att([Description], p(1))], [p(1) as RFID-GateResult: string. Get the property Description of RFID-Gate.], [newDescription := RFID_GATE__GetDescription( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__Initialize], [RFID-Gate], 1, 1, [do( CloseAllOC(p(1)), SetStatus(1, p(1)), { idle }  RFID_GATE__RegisterSubatoms(p(1)),  RFID_GATE__ConnectNodesExtended(p(1)),  if(  RFID_GATE__GetLockNodeLocations(p(1)) = true,  do(   LockPosition(1, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),   LockPosition(1, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1)))  ),  do(   LockPosition(0, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),   LockPosition(0, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1)))  )  ))], [p(1) as RFID-GateResult: none. Initializes the atom 'RFID-Gate'.], [RFID_GATE__Reset (atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__Animate3DGate], [RFID-Gate], 0, 0, [do( { left side } di3DBox(0, -0.1, 0.1, 0.2, 0.1, ZSize(p(1)), ColorGray ),  { right side } di3DBox(0.8, -0.1, 0.1, 0.2, 0.1, ZSize(p(1)), ColorGray ),  { lower side } di3DBox(0.2, -0.1, 0.1, 0.6, 0.1, 0.3, ColorBlack),  { upper side } di3DBox(0.2, -0.1, (ZSize(p(1)) -0.1) {1.9},  0.6, 0.1, 0.2, ColorGray ),   { base } di3DBox(0, -0.2, 0,  1, 0.3, 0.1, ColorBlack),  { inside } SetMaterialColor(ColorBlack), DrawPlane(  0.2, -0.05, (ZSize(p(1)) -1.2) {0.8},   0.6, 0, 0.5,  0, 0, 0.3 ))], [p(1) as RFID-Gate], [RFID_GATE__Animate3DGate (atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__Animate3D], [RFID-Gate], 1, 1, [do( { transparency } SetMaterialTransparency(RFID_GATE__GetMaterialTransparency(p(1))),  { texture yes / no } if(  RFID_GATE__GetDisplayTexture(p(1)),  do(   SetMaterialTexture(IconToTexture(Icon)),   ScaleTextureCoords(    RFID_GATE__GetxRepeatOfTexture(p(1)),     RFID_GATE__GetyRepeatOfTexture(p(1))   )  ) ),   RFID_GATE__Animate3DGate,  PushCoords, TranslateCoords(0, ySize(p(1)), 0), RFID_GATE__Animate3DGate, if(  and(   AtomExists(rank(2, p(1))),   AtomExists(rank(3, p(1)))  ),  do(   yLoc(rank(2, p(1))) := ysize(p(1)) /2,   yLoc(rank(3, p(1))) := ysize(p(1)) /2  ) ), PopCoords)], [p(1) as RFID-GateResult: none. 3D animation of atom 'RFID-Gate'.], [RFID_GATE__Animate3D (atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__SetEntryTrigger], [RFID-Gate], 2, 2, [Att([EntryTrigger], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as 4DScriptResult: none. Sets the property EntryTrigger of RFID-Gate.], [RFID_GATE__SetEntryTrigger( atmRFIDGate, newEntryTrigger )], 0, []);
DefineFunction([RFID_GATE__GetEntryTrigger], [RFID-Gate], 1, 1, [Att([EntryTrigger], p(1))], [p(1) as RFID-GateResult: 4DScript. Get the property EntryTrigger of RFID-Gate.], [newEntryTrigger := RFID_GATE__GetEntryTrigger( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetExitTrigger], [RFID-Gate], 2, 2, [Att([ExitTrigger], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as 4DScriptResult: none. Sets the property ExitTrigger of RFID-Gate.], [RFID_GATE__SetExitTrigger( atmRFIDGate, newExitTrigger )], 0, []);
DefineFunction([RFID_GATE__GetExitTrigger], [RFID-Gate], 1, 1, [Att([ExitTrigger], p(1))], [p(1) as RFID-GateResult: 4DScript. Get the property ExitTrigger of RFID-Gate.], [newExitTrigger := RFID_GATE__GetExitTrigger( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetDisplayTexture], [RFID-Gate], 2, 2, [Att([DisplayTexture], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as booleanResult: none. Sets the property DisplayTexture of RFID-Gate.], [RFID_GATE__SetDisplayTexture( atmRFIDGate, newDisplayTexture )], 0, []);
DefineFunction([RFID_GATE__GetDisplayTexture], [RFID-Gate], 1, 1, [Att([DisplayTexture], p(1))], [p(1) as RFID-GateResult: boolean. Get the property DisplayTexture of RFID-Gate.], [newDisplayTexture := RFID_GATE__GetDisplayTexture( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetxRepeatOfTexture], [RFID-Gate], 2, 2, [Att([xRepeatOfTexture], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property xRepeatOfTexture of RFID-Gate.], [RFID_GATE__SetxRepeatOfTexture( atmRFIDGate, newxRepeatOfTexture )], 0, []);
DefineFunction([RFID_GATE__GetxRepeatOfTexture], [RFID-Gate], 1, 1, [Att([xRepeatOfTexture], p(1))], [p(1) as RFID-GateResult: integer. Get the property xRepeatOfTexture of RFID-Gate.], [newxRepeatOfTexture := RFID_GATE__GetxRepeatOfTexture( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetyRepeatOfTexture], [RFID-Gate], 2, 2, [Att([yRepeatOfTexture], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property yRepeatOfTexture of RFID-Gate.], [RFID_GATE__SetyRepeatOfTexture( atmRFIDGate, newyRepeatOfTexture )], 0, []);
DefineFunction([RFID_GATE__GetyRepeatOfTexture], [RFID-Gate], 1, 1, [Att([yRepeatOfTexture], p(1))], [p(1) as RFID-GateResult: integer. Get the property yRepeatOfTexture of RFID-Gate.], [newyRepeatOfTexture := RFID_GATE__GetyRepeatOfTexture( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetMaterialTransparency], [RFID-Gate], 2, 2, [Att([MaterialTransparency], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as doubleResult: none. Sets the property MaterialTransparency of RFID-Gate.], [RFID_GATE__SetMaterialTransparency( atmRFIDGate, newMaterialTransparency )], 0, []);
DefineFunction([RFID_GATE__GetMaterialTransparency], [RFID-Gate], 1, 1, [Att([MaterialTransparency], p(1))], [p(1) as RFID-GateResult: double. Get the property MaterialTransparency of RFID-Gate.], [newMaterialTransparency := RFID_GATE__GetMaterialTransparency( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetIntelliNetzKnotenEingang], [RFID-Gate], 2, 2, [Att([objIntelliNetzKnotenEingang], p(1)) := ptv(p(2))], [p(1) as RFID-Gatep(2) as IntelliNetzKnotenEingangResult: none. Sets the property IntelliNetzKnotenEingang of RFID-Gate.], [RFID_GATE__SetIntelliNetzKnotenEingang( atmRFIDGate, newIntelliNetzKnotenEingang )], 0, []);
DefineFunction([RFID_GATE__GetIntelliNetzKnotenEingang], [RFID-Gate], 1, 1, [vtp(Att([objIntelliNetzKnotenEingang], p(1)))], [p(1) as RFID-GateResult: IntelliNetzKnotenEingang. Get the property IntelliNetzKnotenEingang of RFID-Gate.], [newIntelliNetzKnotenEingang := RFID_GATE__GetIntelliNetzKnotenEingang( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetIntelliNetzKnotenAusgang], [RFID-Gate], 2, 2, [Att([objIntelliNetzKnotenAusgang], p(1)) := ptv(p(2))], [p(1) as RFID-Gatep(2) as IntelliNetzKnotenAusgangResult: none. Sets the property IntelliNetzKnotenAusgang of RFID-Gate.], [RFID_GATE__SetIntelliNetzKnotenAusgang( atmRFIDGate, newIntelliNetzKnotenAusgang )], 0, []);
DefineFunction([RFID_GATE__GetIntelliNetzKnotenAusgang], [RFID-Gate], 1, 1, [vtp(Att([objIntelliNetzKnotenAusgang], p(1)))], [p(1) as RFID-GateResult: IntelliNetzKnotenAusgang. Get the property IntelliNetzKnotenAusgang of RFID-Gate.], [newIntelliNetzKnotenAusgang := RFID_GATE__GetIntelliNetzKnotenAusgang( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__RegisterSubatoms], [RFID-Gate], 1, 1, [do( { register result / product data table } RFID_GATE__SetTabelleDatenAuslesen(p(1), ptv(AtomByName([DataTable], p(1)))),   { register node (Netzknoten) for entry & exit } RFID_GATE__SetIntelliNetzKnotenEingang(p(1), ptv(rank(1, p(1)))), RFID_GATE__SetIntelliNetzKnotenAusgang(p(1), ptv(rank(2, p(1)))))], [p(1) as RFID-GateResult: none. Registers pointer references of corresponding node atoms & result / data table.], [RFID_GATE__RegisterAtoms ( atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__Animate2D], [RFID-Gate], 1, 1, [do( diShape(0, 0, xSize(p(1)), ySize(p(1)), 0.01, ColorBlack, ColorTransparent, 0),  DrawRectangle(0, 0, xSize(p(1)), 0.2, Color(p(1)), ColorBlack), DrawRectangle(0, ySize(p(1)) - 0.2, xSize(p(1)), ySize(p(1)), Color(p(1)), ColorBlack),  {--Sign node as inbound--} if(  AtomExists(Rank(1, p(1))),  do(   PushCoords,   TranslateCoords(xLoc(Rank(1, p(1))) + 0.1, yLoc(Rank(1, p(1))) + 0.1,  0),   diText(0, 0, [In], ColorBlack, ColorTransparent, 0.4, [Arial], 1, 1),   PopCoords  ) ),  {--Sign node as outbound--} if(  AtomExists(Rank(2, p(1))),  do(   PushCoords,   TranslateCoords(xLoc(Rank(2, p(1))) + 0.1, yLoc(Rank(2, p(1))) + 0.1,  0),   diText(0, 0, [Out], ColorBlack, ColorTransparent, 0.4, [Arial], 1, 1),   PopCoords  ) ))], [p(1) as RFID-GateResult: none. 2D animation of the atom 'RFID-Gate'.], [RFID_GATE__Animate2D ( atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__ConnectNodes], [RFID-Gate], 1, 1, [do( { connect entry and exit nodes } Case(  Inlist(   RFID_GATE__GetTravelPath(p(1)),   RFID_GATE_TRAVELPATH_ONEWAY,   RFID_GATE_TRAVELPATH_TWOWAY  ),    { 1 - one way connection }  do(   if(    not(RFID_GATE__GetReplacedTravelPath(p(1)) = RFID_GATE_TRAVELPATH_ONEWAY),    do(     SetChannels(0, 0, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),     SetChannels(0, 0, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1))),          SetChannels(0, 1, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),     Connect(1, RFID_GATE__GetIntelliNetzKnotenEingang(p(1)), 0, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1))),          RFID_GATE__SetReplacedTravelPath(p(1), RFID_GATE_TRAVELPATH_ONEWAY)    )   )    ),    { 2 - two way connection }  do(   if(    not(RFID_GATE__GetReplacedTravelPath(p(1)) = RFID_GATE_TRAVELPATH_TWOWAY),     do(     SetChannels(0, 0, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),     SetChannels(0, 0, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1))),          SetChannels(0, 1, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),     SetChannels(0, 1, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1))),     Connect(1, RFID_GATE__GetIntelliNetzKnotenEingang(p(1)), 0, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1))),     Connect(1, RFID_GATE__GetIntelliNetzKnotenAusgang(p(1)), 0, RFID_GATE__GetIntelliNetzKnotenEingang(p(1))),          RFID_GATE__SetReplacedTravelPath(p(1), RFID_GATE_TRAVELPATH_TWOWAY)    )   )   ) ) )], [p(1) as RFID-GateResult: none. Connects the entry and exit node with each other either as a one way or a two way connection.], [RFID_GATE__ConnectNodes ( atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__SetTravelPath], [RFID-Gate], 2, 2, [Att([TravelPath], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property TravelPath of RFID-Gate.], [RFID_GATE__SetTravelPath( atmRFIDGate, newTravelPath )], 0, []);
DefineFunction([RFID_GATE__GetTravelPath], [RFID-Gate], 1, 1, [Att([TravelPath], p(1))], [p(1) as RFID-GateResult: integer. Get the property TravelPath of RFID-Gate.], [newTravelPath := RFID_GATE__GetTravelPath( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetReplacedTravelPath], [RFID-Gate], 2, 2, [Att([ReplacedTravelPath], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property ReplacedTravelPath of RFID-Gate.], [RFID_GATE__SetReplacedTravelPath( atmRFIDGate, newReplacedTravelPath )], 0, []);
DefineFunction([RFID_GATE__GetReplacedTravelPath], [RFID-Gate], 1, 1, [Att([ReplacedTravelPath], p(1))], [p(1) as RFID-GateResult: integer. Get the property ReplacedTravelPath of RFID-Gate.], [newReplacedTravelPath := RFID_GATE__GetReplacedTravelPath( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetReadData], [RFID-Gate], 2, 2, [Att([ReadData], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as booleanResult: none. Sets the property ReadData of RFID-Gate.], [RFID_GATE__SetReadData( atmRFIDGate, newReadData )], 0, []);
DefineFunction([RFID_GATE__GetReadData], [RFID-Gate], 1, 1, [Att([ReadData], p(1))], [p(1) as RFID-GateResult: boolean. Get the property ReadData of RFID-Gate.], [newReadData := RFID_GATE__GetReadData( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetLockNodeLocations], [RFID-Gate], 2, 2, [Att([LockNodeLocations], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as booleanResult: none. Sets the property LockNodeLocations of RFID-Gate.], [RFID_GATE__SetLockNodeLocations( atmRFIDGate, newLockNodeLocations )], 0, []);
DefineFunction([RFID_GATE__GetLockNodeLocations], [RFID-Gate], 1, 1, [Att([LockNodeLocations], p(1))], [p(1) as RFID-GateResult: boolean. Get the property LockNodeLocations of RFID-Gate.], [newLockNodeLocations := RFID_GATE__GetLockNodeLocations( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__WriteDataToTable], [RFID-Gate], 1, 1, [do( var([atmReference], vbAtom), var([atmDataTable], vbAtom), var([atmRFIDGate], vbAtom),  var([CurrentRow], vbValue), var([CurrentCounter], vbValue), var([valAttributeRows], vbValue), var([valLabelRows], vbValue), var([valColOffset], vbValue, 1), var([valColCounter], vbValue, 1), var([valCountProductsInTransporterForAdditionalRows], vbValue, 1),  var([indexerRFIDGate], vbValue, 1), var([indexerOfProductsInTransporter], vbValue, 0), var([bolFirstExecution], vbValue, true),  atmRFIDGate := p(1), atmDataTable := RFID_GATE__GetTabelleDatenAuslesen(atmRFIDGate),  { we need the starting row for the current run } { + 1 because we start writing in the second row } var([valRowCounter], vbValue, nRows(atmDataTable) + 1), { Go through the internal table where the labels are defined and check what has to be done } Repeat(  nRows(atmRFIDGate),   do(    Case(     WhichIsTrue(      Cell(indexerRFIDGate, RFID_GATE_GUITABLE_MODE, atmRFIDGate) = 1,      Cell(indexerRFIDGate, RFID_GATE_GUITABLE_MODE, atmRFIDGate) = 2,      Cell(indexerRFIDGate, RFID_GATE_GUITABLE_MODE, atmRFIDGate) = 3     ),          { Read }     if(      Cell(indexerRFIDGate, RFID_GATE_GUITABLE_REFERENCE, atmRFIDGate) = 1,            { Reference: Transporter }      do(       atmReference := RFID_GATE__GetCurrentTransporter(atmRFIDGate),              if(        bolFirstExecution,        do(         SetTable(nRows(atmDataTable) + 1, nCols(atmDataTable), atmDataTable),         Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time),                  bolFirstExecution := false        )       ),              Cell(valRowCounter, valColCounter + valColOffset, atmDataTable) :=         label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference),              inc(valColCounter)      ),            do(       valCountProductsInTransporterForAdditionalRows := 1,       { Reference: Product - go through all products on the transporter }       Repeat(        Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),        do(         atmReference := rank(count, RFID_GATE__GetCurrentTransporter(atmRFIDGate)),                       if(          bolFirstExecution,          do(           SetTable(nRows(atmDataTable) + 1, nCols(atmDataTable), atmDataTable),           Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time),                      bolFirstExecution := false          )         ),                  if(          and(           Count = 1,           Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)) > 1          ),          do(           SetTable(Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)) + valRowCounter - 1, nCols(atmDataTable), atmDataTable),                      Repeat(            Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),            Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time)           )          )         ),               Cell(valRowCounter + Count - 1, valColCounter + valColOffset, atmDataTable) :=           label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference),                   inc(valCountProductsInTransporterForAdditionalRows)        )       ),       inc(valColCounter)             )     ),          { Write }     if(      Cell(indexerRFIDGate, RFID_GATE_GUITABLE_REFERENCE, atmRFIDGate) = 1,            { Reference: Transporter }      do(       atmReference := RFID_GATE__GetCurrentTransporter(atmRFIDGate),              label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference) :=        if(         IsNumeric(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate, 2)),         Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate),         ExecString(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate))        )      ),            { Reference: Product - go through all products on the transporter }      do(       indexerOfProductsInTransporter := 1,              Repeat(        Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),        do(         atmReference := rank(indexerOfProductsInTransporter, RFID_GATE__GetCurrentTransporter(atmRFIDGate)),                  label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference) :=          if(           IsNumeric(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate, 2)),           Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate),           ExecString(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate))          ),                            inc(indexerOfProductsInTransporter)        )       )      )     ),          { Read / Write }     do(            { ** Reading... ** }      if(       Cell(indexerRFIDGate, RFID_GATE_GUITABLE_REFERENCE, atmRFIDGate) = 1,              { Reference: Transporter }       do(        atmReference := RFID_GATE__GetCurrentTransporter(atmRFIDGate),                if(         bolFirstExecution,         do(          SetTable(nRows(atmDataTable) + 1, nCols(atmDataTable), atmDataTable),          Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time),                    bolFirstExecution := false         )        ),                Cell(valRowCounter, valColCounter + valColOffset, atmDataTable) :=          label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference),                inc(valColCounter)       ),              do(        valCountProductsInTransporterForAdditionalRows := 1,        { Reference: Product - go through all products on the transporter }        Repeat(         Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),         do(          atmReference := rank(count, RFID_GATE__GetCurrentTransporter(atmRFIDGate)),                         if(           bolFirstExecution,           do(            SetTable(nRows(atmDataTable) + 1, nCols(atmDataTable), atmDataTable),            Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time),                        bolFirstExecution := false           )          ),                    if(           and(            Count = 1,            Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)) > 1           ),           do(            SetTable(Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)) + valRowCounter - 1, nCols(atmDataTable), atmDataTable),                        Repeat(             Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),             Cell(nRows(atmDataTable), valColOffset, atmDataTable) := Round(Time)            )           )          ),                 Cell(valRowCounter + Count - 1, valColCounter + valColOffset, atmDataTable) :=            label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference),                     inc(valCountProductsInTransporterForAdditionalRows)         )        ),        inc(valColCounter)               )      ),            { ** Writing... ** }      if(       Cell(indexerRFIDGate, RFID_GATE_GUITABLE_REFERENCE, atmRFIDGate) = 1,              { ** Reference: Transporter ** }       do(        atmReference := RFID_GATE__GetCurrentTransporter(atmRFIDGate),                label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference) :=         if(          IsNumeric(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate, 2)),          Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate),          ExecString(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate))         )       ),              { Reference: Product - go through all products on the transporter }       do(        indexerOfProductsInTransporter := 1,                Repeat(         Content(RFID_GATE__GetCurrentTransporter(atmRFIDGate)),         do(          atmReference := rank(indexerOfProductsInTransporter, RFID_GATE__GetCurrentTransporter(atmRFIDGate)),                   label(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_TAGNAME, atmRFIDGate, 2), atmReference) :=          if(           IsNumeric(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate, 2)),           Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate),           ExecString(Cell(indexerRFIDGate, RFID_GATE_GUITABLE_VALUE, atmRFIDGate))          ),                     inc(indexerOfProductsInTransporter)         )        )       )      )     )    ),    inc(indexerRFIDGate),        { the RowCounter needs to be updated _after_ the last label }    { that's why it is checked for the indexer - 1 }    if(     indexerRFIDGate - 1 = nRows(atmRFIDGate),     inc(valRowCounter)    )      )  ) )], [p(1) as RFID-GateExecutes the table in RFID-Gate.], [RFID_GATE__WriteDataToTable  (atmRFIDGate )], 0, [Markus Holzner]);
DefineFunction([RFID_GATE__SetTabelleDatenAuslesen], [RFID-Gate], 2, 2, [Att([objTabelleDatenAuslesen], p(1)) := ptv(p(2))], [p(1) as RFID-Gatep(2) as TabelleDatenAuslesenResult: none. Sets the property TabelleDatenAuslesen of RFID-Gate.], [RFID_GATE__SetTabelleDatenAuslesen( atmRFIDGate, newTabelleDatenAuslesen )], 0, []);
DefineFunction([RFID_GATE__GetTabelleDatenAuslesen], [RFID-Gate], 1, 1, [vtp(Att([objTabelleDatenAuslesen], p(1)))], [p(1) as RFID-GateResult: TabelleDatenAuslesen. Get the property TabelleDatenAuslesen of RFID-Gate.], [newTabelleDatenAuslesen := RFID_GATE__GetTabelleDatenAuslesen( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetCurrentTransporter], [RFID-Gate], 2, 2, [Att([objCurrentTransporter], p(1)) := ptv(p(2))], [p(1) as RFID-Gatep(2) as CurrentTransporterResult: none. Sets the property CurrentTransporter of RFID-Gate.], [RFID_GATE__SetCurrentTransporter( atmRFIDGate, newCurrentTransporter )], 0, []);
DefineFunction([RFID_GATE__GetCurrentTransporter], [RFID-Gate], 1, 1, [vtp(Att([objCurrentTransporter], p(1)))], [p(1) as RFID-GateResult: CurrentTransporter. Get the property CurrentTransporter of RFID-Gate.], [newCurrentTransporter := RFID_GATE__GetCurrentTransporter( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetNumberOfLabels], [RFID-Gate], 2, 2, [Att([NumberOfLabels], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property NumberOfLabels of RFID-Gate.], [RFID_GATE__SetNumberOfLabels( atmRFIDGate, newNumberOfLabels )], 0, []);
DefineFunction([RFID_GATE__GetNumberOfLabels], [RFID-Gate], 1, 1, [Att([NumberOfLabels], p(1))], [p(1) as RFID-GateResult: integer. Get the property NumberOfLabels of RFID-Gate.], [newNumberOfLabels := RFID_GATE__GetNumberOfLabels( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__SetNumberOfAttributes], [RFID-Gate], 2, 2, [Att([NumberOfAttributes], p(1)) := p(2)], [p(1) as RFID-Gatep(2) as integerResult: none. Sets the property NumberOfAttributes of RFID-Gate.], [RFID_GATE__SetNumberOfAttributes( atmRFIDGate, newNumberOfAttributes )], 0, []);
DefineFunction([RFID_GATE__GetNumberOfAttributes], [RFID-Gate], 1, 1, [Att([NumberOfAttributes], p(1))], [p(1) as RFID-GateResult: integer. Get the property NumberOfAttributes of RFID-Gate.], [newNumberOfAttributes := RFID_GATE__GetNumberOfAttributes( atmRFIDGate )], 0, []);
DefineFunction([RFID_GATE__ConnectNodesExtended], [RFID-Gate], 1, 1, [do( var([atmEntryNode], vbAtom), var([atmExitNode], vbAtom), var([atmCurrentNode], vbAtom),  var([strListPointerOfNodesConnectedToEntry], vbString, []), var([strListPointerOfNodesConnectedToExit], vbString, []), var([valNumberOfConnectionsToEntry], vbValue, 0), var([valNumberOfConnectionsToExit], vbValue, 0),   atmEntryNode := RFID_GATE__GetIntelliNetzKnotenEingang(p(1)), atmExitNode := RFID_GATE__GetIntelliNetzKnotenAusgang(p(1)),  Case(  Inlist(   RFID_GATE__GetTravelPath(p(1)),   RFID_GATE_TRAVELPATH_ONEWAY,   RFID_GATE_TRAVELPATH_TWOWAY  ),    { 1 - one way connection }  do(   if(    not(RFID_GATE__GetReplacedTravelPath(p(1)) = RFID_GATE_TRAVELPATH_ONEWAY),    Do(     { * start with entry node * }          { // store connection info with other atoms }     Repeat(      NrOC(atmEntryNode),      do(       if(        and(         AtomExists(Out(count, atmEntryNode)),         ptv(Out(count, atmEntryNode)) <> ptv(atmExitNode)        ),        do(         inc(valNumberOfConnectionsToEntry),         if(          valNumberOfConnectionsToEntry = 1,          strListPointerOfNodesConnectedToEntry := String(ptv(Out(count, atmEntryNode))),          strListPointerOfNodesConnectedToEntry := concat(strListPointerOfNodesConnectedToEntry, [/], String(ptv(Out(count, atmEntryNode))))         )        )       )      )     ),               SetChannels(0, 0, atmEntryNode),     SetChannels(0, valNumberOfConnectionsToEntry + 1, atmEntryNode), { add 1 more for connection with exit node }          { // connect with other atoms outside - except exit node! }     Repeat(      valNumberOfConnectionsToEntry,      do(       atmCurrentNode := vtp(Value(StrSeparate(strListPointerOfNodesConnectedToEntry, [/], Count))),             Connect(Count, atmEntryNode, 0, atmCurrentNode)      )     ),     { // eventually connect with exit node }     Connect(NrOC(atmEntryNode), atmEntryNode, 0, atmExitNode),          { * now for exit node * }     Repeat(      NrOC(atmExitNode),      do(       if(        and(         AtomExists(Out(count, atmExitNode)),         ptv(Out(count, atmExitNode)) <> ptv(atmEntryNode)        ),        do(         inc(valNumberOfConnectionsToExit),         if(          valNumberOfConnectionsToExit = 1,          strListPointerOfNodesConnectedToExit := String(ptv(Out(count, atmExitNode))),          strListPointerOfNodesConnectedToExit := concat(strListPointerOfNodesConnectedToExit, [/], String(ptv(Out(count, atmExitNode))))         )        )       )      )     ),     {Trace(Concat([Exit: ], strListPointerOfNodesConnectedToExit)),}          SetChannels(0, 0, atmExitNode),     SetChannels(0, valNumberOfConnectionsToExit, atmExitNode),          Repeat(      valNumberOfConnectionsToExit,      do(       atmCurrentNode := vtp(Value(StrSeparate(strListPointerOfNodesConnectedToExit, [/], Count))),             Connect(Count, atmExitNode, 0, atmCurrentNode)      )     ),              { // set attribute to indicate which connection is currently used - one way }     RFID_GATE__SetReplacedTravelPath(p(1), RFID_GATE_TRAVELPATH_ONEWAY),          { set internal tables of nodes }     settable(1, 2, atmEntryNode),     Cell(1, 1, atmEntryNode) := 1000000    )   )    ),    { 2 - two way connection }  do(   if(    not(RFID_GATE__GetReplacedTravelPath(p(1)) = RFID_GATE_TRAVELPATH_TWOWAY),     do(     { * start with entry node * }          { // store connection info with other atoms }     Repeat(      NrOC(atmEntryNode),      do(       if(        and(         AtomExists(Out(count, atmEntryNode)),         ptv(Out(count, atmEntryNode)) <> ptv(atmExitNode)        ),        do(         inc(valNumberOfConnectionsToEntry),         if(          valNumberOfConnectionsToEntry = 1,          strListPointerOfNodesConnectedToEntry := String(ptv(Out(count, atmEntryNode))),          strListPointerOfNodesConnectedToEntry := concat(strListPointerOfNodesConnectedToEntry, [/], String(ptv(Out(count, atmEntryNode))))         )        )       )      )     ),     SetChannels(0, 0, atmEntryNode),     SetChannels(0, valNumberOfConnectionsToEntry + 1, atmEntryNode), { add 1 more for connection with exit node }          { // connect with other atoms outside - except exit node! }     Repeat(      valNumberOfConnectionsToEntry,      do(       atmCurrentNode := vtp(Value(StrSeparate(strListPointerOfNodesConnectedToEntry, [/], Count))),             Connect(Count, atmEntryNode, 0, atmCurrentNode)      )     ),     { // eventually connect with exit node }     Connect(NrOC(atmEntryNode), atmEntryNode, 0, atmExitNode),          { * now for exit node * }     Repeat(      NrOC(atmExitNode),      do(       if(        and(         AtomExists(Out(count, atmExitNode)),         ptv(Out(count, atmExitNode)) <> ptv(atmEntryNode)        ),        do(         inc(valNumberOfConnectionsToExit),         if(          valNumberOfConnectionsToExit = 1,          strListPointerOfNodesConnectedToExit := String(ptv(Out(count, atmExitNode))),          strListPointerOfNodesConnectedToExit := concat(strListPointerOfNodesConnectedToExit, [/], String(ptv(Out(count, atmExitNode))))         )        )       )      )     ),     SetChannels(0, 0, atmExitNode),     SetChannels(0, valNumberOfConnectionsToExit + 1, atmExitNode), { add 1 more for connection with entry node }          Repeat(      valNumberOfConnectionsToExit,      do(       atmCurrentNode := vtp(Value(StrSeparate(strListPointerOfNodesConnectedToExit, [/], Count))),             Connect(Count, atmExitNode, 0, atmCurrentNode)      )     ),     { // eventually connect with entry node }     Connect(NrOC(atmExitNode), atmExitNode, 0, atmEntryNode),     { // set attribute to indicate which connection is currently used - two way }     RFID_GATE__SetReplacedTravelPath(p(1), RFID_GATE_TRAVELPATH_TWOWAY),          { set internal tables of nodes }     settable(1, 2, atmEntryNode),     Cell(1, 1, atmEntryNode) := 1000000,          settable(1, 2, atmExitNode),     Cell(1, 1, atmExitNode) := 1000000    )   )   ) ))], [p(1) as RFID-GateResult: none. Connects the entry and exit node with each other either as a one way or a two way connection - existing connections with other atoms are saved and restored!                       Therefore this function has replaced function 'RFID_GATE__ConnectNodes'.], [RFID_GATE__ConnectNodesExtended ( atmRFIDGate )], 0, [Markus Holzner]);
Set(Icon(a), 
	RegisterIcon(pDir([media\images\default.jpg]), [default.jpg]));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 0);
SetTreeIcon(pDir([Media\Icons\RFID-Gate.ico]));
Set(Info, [Attributes:

TravelPath:
-----------
1 = einseitig (one way)
2 = beidseitig (two way) 
]);
int001(83);
SetSize(1, 3, 2);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(23);
SetAttributeName(r(1), [ID]);
SetAttributeName(r(2), [Name]);
SetAttributeName(r(3), [Description]);
SetAttributeName(r(4), [********]);
SetAttributeName(r(5), [EntryTrigger]);
SetAttributeName(r(6), [ExitTrigger]);
SetAttributeName(r(7), [********]);
SetAttributeName(r(8), [objIntelliNetzKnotenEingang]);
SetAttributeName(r(9), [objIntelliNetzKnotenAusgang]);
SetAttributeName(r(10), [objTabelleDatenAuslesen]);
SetAttributeName(r(11), [objCurrentTransporter]);
SetAttributeName(r(12), [********]);
SetAttributeName(r(13), [TravelPath]);
SetAttributeName(r(14), [ReplacedTravelPath]);
SetAttributeName(r(15), [ReadData]);
SetAttributeName(r(16), [LockNodeLocations]);
SetAttributeName(r(17), [NumberOfAttributes]);
SetAttributeName(r(18), [NumberOfLabels]);
SetAttributeName(r(19), [********]);
SetAttributeName(r(20), [DisplayTexture]);
SetAttributeName(r(21), [xRepeatOfTexture]);
SetAttributeName(r(22), [yRepeatOfTexture]);
SetAttributeName(r(23), [MaterialTransparency]);
SetTextAtt(r(4), [********]);
SetTextAtt(r(7), [********]);
SetTextAtt(r(12), [********]);
SetAtt(r(13), 2);
SetAtt(r(15), 1);
SetAtt(r(16), 1);
SetAtt(r(17), 16);
SetTextAtt(r(19), [********]);
SetAtt(r(20), 1);
SetAtt(r(21), 1);
SetAtt(r(22), 1);
int024;
Set(OnEvent, [do( RFID_GATE__GetEntryTrigger(c),  RFID_GATE__WriteDataToTable(c),  RFID_GATE__GetExitTrigger(c))]);
Set(OnCreation, [do( var([atmNode], vbAtom), CreateAtom(AtomByName([Network Node], Library), c, Concat([Inbound Node ],Name(c))), atmNode := Last(c), { Identify node } Label([IntelliNode], atmNode) := 1, { Change OnEvents }  OnUser(atmNode) := [0], OnMessage(atmNode) := [do( var([valCurrentTransporterReference], vbValue), valCurrentTransporterReference := Value(StringPar(Message, 2)), SendMessageDirect(up(c), ParString([ReadData], valCurrentTransporterReference))) ], SetLoc(-1, 1.5, 0), Label([t-nocreate], atmNode) := 1, { Set reference } RFID_GATE__SetIntelliNetzKnotenEingang(c, atmNode), CreateAtom(AtomByName([Network Node], Library), c, Concat([Outbound Node ],Name(c))), atmNode := Last(c), { Create attributes } Label([IntelliNode], atmNode) := 2, { Change OnEvents } OnUser(atmNode) := [0],  OnMessage(atmNode) := [do( var([valCurrentTransporterReference], vbValue), valCurrentTransporterReference := Value(StringPar(Message, 2)), SendMessageDirect(up(c), ParString([ReadData], valCurrentTransporterReference))) ], SetLoc(1, 1.5, 0), Label([t-nocreate], atmNode) := 1, { Set reference } RFID_GATE__SetIntelliNetzKnotenAusgang(c, atmNode))]);
Set(OnReset, [RFID_GATE__Initialize(c)]);
Set(OnUser, [do( RFID_GATE__RegisterSubatoms(c),  { Delete any current instances of this form.}  GuiDestroy([RFID-Gate]), { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\RFID-Gate.gui]), 1), { Show the GUI-form.} GuiCreate([frmRFID-Gate], [RFID-Gate], 0, c, 0, 1))]);
Set(On2DDraw, [RFID_GATE__Animate2D(c)]);
Set(On3DDraw, [RFID_GATE__Animate3D(c)]);
Set(OnMessage, [do( Att([objCurrentTransporter], c) := Value(StringPar(Message, 2)), CreateEvent(0, c, 1, 1, vtp(Att([objCurrentTransporter], c))))]);
SetStatus(0);
int018;


{Atom: DataTable}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
int023([DataTable], 0, 2048);
Set(Icon(a), 
	RegisterIcon(IconsDir([bmp\atoms\tedatom.bmp]), [ed]));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 0);
SetTreeIcon(pDir([Media\Icons\Prohibited.ico]));
Set(DdbRec, [>t-nocreate:1.]);
int001(84);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
int024;
Set(OnCreation, [Label([t-nocreate], c) := 1]);
Set(OnReset, [SetTable(1, nCols(c), c)]);
SetStatus(0);
int018;
Up;
int007;
