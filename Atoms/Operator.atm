

{Preregister functions}

PreregisterFunction([Walkoperator], 0, 6);
PreregisterFunction([Operator_Animate3D_Walking], 1, 1);
PreregisterFunction([Operator_Animate3D_Simple], 1, 1);
PreregisterFunction([Operator_Animate3D_Standing], 1, 1);
PreregisterFunction([Operator_Animate3D_Sitting], 1, 1);


{Atom: Operator}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
Set(OnInit, [Do( If(  Not(FunctionExists([AdvancedTransporter_CalculateDistance])),  Do(   Msg([Operator requires the atom 'Advanced Transporter.atm' loaded into your library.], 3)  ) ))]);
int023([Operator], 767720, 68721);
DefineFunction([Walkoperator], [Icons3D], 0, 6, [Do( If(  BoxVisible(-1,  -1,  0,  2,  2,  2),  Do(   {under}   EllipseCone(0,  0,  0.75,  0.15,  360,  0.08,  0.1,  0.11,  0.15,  0,  90,  0,  p(2)),   {body}   EllipseCone(0, 0, 0.9, 0.45, 360, 0.12, 0.2, 0.08, 0.1, 0, -(90, p(3)), 0, p(1)),   {top}   SetVector(0, 0, 0.9, 0.45, 0, -(90, p(3)), 0),   EllipseCone(vx, vy, vz, 0.1, 360, 0.08, 0.1, 0.12, 0.2, 0, -(90, p(3)), 0, p(1)),   SetVector(vx, vy, vz, 0.2, 0, -(90, p(3)), 0),   Ball(vx, vy, vz, 0.1, 180, 360, 0, -90, 0, 7846395),   SetVector(vx, vy, vz, -0.2, 0, -(90, p(3)), 0),   {arm}   Cylinder(vx, 0.15, vz, 0.30, 360, 0.05, 0, -(p(4), 90), 0, p(1)),   Cylinder(vx, -0.15, vz, 0.30, 360, 0.05, 0, -(p(4), 90), 0, p(1)),   SetVector(vx, vy, vz, 0.3, 0, -(p(4), 90), 0),   Cylinder(vx, 0.15, vz, 0.30, 360, 0.04, 0, -(+(p(4), p(5)), 90), 0, p(1)),   Cylinder(vx, -0.15, vz, 0.30, 360, 0.04, 0, -(+(p(4), p(5)), 90), 0, p(1)),   SetVector(vx, vy, vz, 0.3, 0, -(+(p(4), p(5)), 90), 0),   Cylinder(vx, 0.15, vz, 0.10, 360, 0.02, 0, -(+(p(4), p(5)), 90), 0, 7846395),   Cylinder(vx, -0.15, vz, 0.10, 360, 0.02, 0, -(+(p(4), p(5)), 90), 0, 7846395),   Do(    {leg1}    If(     =(p(6), 0),     SetLabel([t-walk], 0),     SetLabel([t-walk], -(20, *(Abs(Cos(*(xLoc, 180))), 40)))    ),    If(     =(p(6), 0),     SetLabel([t-walk], 0),     SetLabel([t-walk], *(Cos(*(xLoc, 300)), 30))    ),    Cone(0, 0.075, 0.75,  0.38, 0.08, 0.06, 0, +(-80, Label([t-walk])), 0, p(2)),    SetVector(0, 0, 0.75, 0.35, 0, +(-80, Label([t-walk])), 0),    Cone(vx, 0.075, vz, 0.38, 0.06, 0.04, 0, -110, 0, p(2)),    SetVector(vx, vy, vz, 0.38, 0, -(110), 0),    EllipseCone(vx, 0.07, -(vz, 0.05), 0.2, 180, 0.01, 0.03, 0.04, 0.05, 0, 0, 0, ColorGray),    {leg2}    Cone(0, -0.075, 0.75, 0.38, 0.08, 0.06, 0, -(-80, Label([t-walk])), 0, p(2)),    SetVector(0, 0, 0.75, 0.35, 0, -(-80, Label([t-walk])), 0),    Cone(vx, -0.075, vz, 0.38, 0.06, 0.04, 0, -110, 0, p(2)),    SetVector(vx, vy, vz, 0.38,  0, -110, 0),    EllipseCone(vx, -0.07, -(vz, 0.05), 0.2, 180, 0.01, 0.03, 0.04, 0.05,  0, 0, 0, ColorGray)   )  ) ))], [draws a person with shirt color e1,  trouser color e2,  rotations e3 (body),  e4(upper arm),  e5 (lower arm). If e6 is 1 the person can walk.], [person(color, colorblue, 30, 30, 45, 1)], 0, [Operator.etm]);
DefineFunction([Operator_Animate3D_Walking], [Icons3D], 1, 1, [Do(   var([atmC], vbAtom, p(1)),  var ([valAngle], vbValue),  var ([valDistance], vbValue),  var ([CurAngle], vbValue),  {MaterialOverride of shirt}  SetMaterialColor(Color(p(1)), DIFFUSE_AND_AMBIENT_COLOR),   valDistance := Sqrt(    sqr(xAbsLoc(c, model) - Label([xAbsOld], atmC))+    sqr(yAbsLoc(c, model) - Label([yAbsOld], atmC))+    sqr(zAbsLoc(c, model) - Label([zAbsOld], atmC))  ),     valAngle := Label([OldAngle], atmC) + (valDistance / 0.35) * 25,    if(    mod(valAngle, 100) < 50,    If(      mod(valAngle, 50) < 25,      CurAngle := mod(valAngle,50),      CurAngle := 25 - (mod(valAngle, 50)-25)    ),        If(      mod(valAngle, 50)<25,      CurAngle := -(mod(valAngle, 50)),      CurAngle := -(25 - (mod(valAngle, 50)-25))    )  ),  pushCoords,    If(      mod(valangle, 50)<25,      translateCoords(0,0,-(1/25 * mod(valAngle, 50) * 0.01)),        translateCoords(0,0,-(1/25 * (50- mod(valAngle, 50)) *0.01))    ),    SetMaterialOverride(True),     {Set material color}    DrawModel3DMesh(Model3D(1, atmC),3 , 0,0,0.95,1,1,1), {Shirt}    SetMaterialOverride(False),    DrawModel3DMesh(Model3D(1, atmC),11 , 0,0,0.95,1,1,1), {Bottom shirt}        DrawModel3DMesh(Model3D(1 ,atmC),4 , 0,0,0.95,1,1,1), {Face}    DrawModel3DMesh(Model3D(1 ,atmC),5 , 0,0,0.95,1,1,1), {Head}        DrawModel3DMesh(Model3D(1 ,atmC),6 , 0,0,0.95,1,1,1), {Hair}    DrawModel3DMesh(Model3D(1 ,atmC),16 , 0,0,0.95,1,1,1), {Hips}         PushCoords,    TranslateCoords(0,0,0.95+0.48),    RotateCoords(if(Content(atmC) > 0, 45, CurAngle), 1, 0,0),      DrawModel3DMesh(Model3D(1, atmC),7 , 0,0,0,1,1,1), {Left arm}    SetMaterialOverride(True),     {Set material color}    DrawModel3DMesh(Model3D(1, atmC),8 , 0,0,0,1,1,1), {Left shoulder}    SetMaterialOverride(False),    PopCoords,        PushCoords,    TranslateCoords(0,0,0.95+0.48),    RotateCoords(-(if(Content(atmC) > 0, 45, CurAngle)), 1, 0,0),       DrawModel3DMesh(Model3D(1, atmC),9 , 0,0,0,1,1,1), {Right arm}    SetMaterialOverride(True),     {Set material color}    DrawModel3DMesh(Model3D(1, atmC),10 , 0,0,0,1,1,1), {Right shoulder}    SetMaterialOverride(False),    PopCoords,        PushCoords,    TranslateCoords(0,0,0.95),    RotateCoords(CurAngle, 1, 0,0),    DrawModel3DMesh(Model3D(1, atmC),13 , 0,0,0,1,1,1), {Right upper leg}        TranslateCoords(0,0,-(0.41)),    if(      CurAngle<0,      RotateCoords(CurAngle, 1, 0,0)    ),    DrawModel3DMesh(Model3D(1, atmC),1 , 0,0,0,1, 1,1), {Right lower leg}        DrawModel3DMesh(Model3D(1, atmC),12 , 0,0,-(0.51),1,1,1), {Right foot}    PopCoords,        PushCoords,    TranslateCoords(0,0,0.95),    RotateCoords(-(CurAngle), 1, 0,0),      DrawModel3DMesh(Model3D(1, atmC),14 , 0,0,0,1,1,1), {Left upper leg}    TranslateCoords(0,0,-(0.41)),    if(      CurAngle>0,      RotateCoords(-(CurAngle), 1, 0,0)    ),    DrawModel3DMesh(Model3D(1, atmC),15 , 0,0,0,1,1,1), {Left lower leg}    DrawModel3DMesh(Model3D(1, atmC),2 , 0,0, -(0.51),1,1,1), {Left Foot}        PopCoords,        Label([xAbsOld], atmC) := xAbsLoc(c, model),    Label([yAbsOld], atmC) := yAbsLoc(c, model),    Label([zAbsOld], atmC) := zAbsLoc(c, model),    Label([OldAngle], atmC):= valAngle,    PopCoords)], [Enter helptext], [Operator_Animate3D_Walking(c)], 0, [Operator]);
DefineFunction([Operator_Animate3D_Simple], [Icons3D], 1, 1, [do(  var([atmC], vbAtom, p(1)),   {MaterialOverride of shirt}  SetMaterialColor(Color(p(1)), DIFFUSE_AND_AMBIENT_COLOR),  If(    viewerdist(xLoc(atmC), yLoc(atmC), zLoc(atmC))>1500,    Do(      0    ),    Do(      var ([valAngle], vbValue),      var ([valDistance], vbValue),      var ([CurAngle], vbValue),           valDistance := Sqrt(        sqr(xAbsLoc(c, model) - Label([xAbsOld], atmC))+        sqr(yAbsLoc(c, model) - Label([yAbsOld], atmC))+        sqr(zAbsLoc(c, model) - Label([zAbsOld], atmC))      ),            valAngle := Label([OldAngle], atmC) + (valDistance / 0.35) * 25,            if(        mod(valAngle, 100)<50,        If(          mod(valAngle, 50)<25,          CurAngle := mod(valAngle,50),          CurAngle := 25 - (mod(valAngle, 50)-25)        ),                If(          mod(valAngle, 50)<25,          CurAngle := -(mod(valAngle, 50)),          CurAngle := -(25 - (mod(valAngle, 50)-25))        )      ),            SetMaterialOverride(True),     {Set material color}      DrawModel3DMesh(Model3D(2, atmC),2 , 0,0,0.95,1,1,1), {Shirt}      SetMaterialOverride(False),      DrawModel3DMesh(Model3D(2, atmC),3 , 0,0,0.95,1,1,1), {Face}      DrawModel3DMesh(Model3D(2, atmC),4 , 0,0,0.95,1,1,1), {Head}      DrawModel3DMesh(Model3D(2, atmC),5 , 0,0,0.95,1,1,1), {Hair}      DrawModel3DMesh(Model3D(2, atmC),14 , 0,0,0.95,1,1,1), {Hips}      DrawModel3DMesh(Model3D(2 ,atmC),10 , 0,0,0.95,1,1,1), {Bottom shirt}      PushCoords,      TranslateCoords(0,0,0.95),      RotateCoords(CurAngle, 1, 0,0),         DrawModel3DMesh(Model3D(2, atmC),11 , 0,0,0,1,1,1), {Right foot}      DrawModel3DMesh(Model3D(2, atmC),12 , 0,0,0,1,1,1), {Right leg}      popCoords,            PushCoords,      TranslateCoords(0,0,0.95+0.48),      RotateCoords(CurAngle, 1, 0,0),                 DrawModel3DMesh(Model3D(2, atmC),6 , 0,0,0,1,1,1), {Left arm}      SetMaterialOverride(True),     {Set material color}      DrawModel3DMesh(Model3D(2, atmC),7 , 0,0,0,1,1,1), {Left shoulder}      SetMaterialOverride(False),      PopCoords,      PushCoords,      TranslateCoords(0,0,0.95),      RotateCoords(-(CurAngle), 1, 0,0),         DrawModel3DMesh(Model3D(2, atmC),1 , 0,0,0,1,1,1), {Left Foot}      DrawModel3DMesh(Model3D(2, atmC),13 , 0,0,0,1,1,1), {Left leg}      PopCoords,            PushCoords,      TranslateCoords(0,0,0.95+0.48),      RotateCoords(-(CurAngle), 1, 0,0),      DrawModel3DMesh(Model3D(2, atmC),8 , 0,0,0,1,1,1), {Right arm}      SetMaterialOverride(True),     {Set material color}      DrawModel3DMesh(Model3D(2, atmC),9 , 0,0,0,1,1,1), {Right shoulder}      SetMaterialOverride(False),      PopCoords,                      Label([xAbsOld], atmC) := xAbsLoc(c, model),      Label([yAbsOld], atmC) := yAbsLoc(c, model),      Label([zAbsOld], atmC) := zAbsLoc(c, model),      Label([OldAngle], atmC):= valAngle    )  ))], [Enter helptext], [Operator_Animate3D_Simple(c)], 0, [Operator]);
DefineFunction([Operator_Animate3D_Standing], [Icons3D], 1, 1, [do(    var([atmC], vbAtom, p(1)),  var([valAngle], vbValue),    {MaterialOverride of shirt}  SetMaterialColor(Color(p(1)), DIFFUSE_AND_AMBIENT_COLOR),   valAngle :=    Case(    WhichIsTrue(     {--Transportation--}     Content(atmC) > 0,     {--Busy--}     Status(atmC) = 2,     {--All others--}     True    ),    45,    70,    0   ),  SetMaterialOverride(True),     {Set material color}  DrawModel3DMesh(Model3D(1, atmC),3 , 0,0,0.95,1,1,1), {Shirt}  SetMaterialOverride(False),  DrawModel3DMesh(Model3D(1 ,atmC),11 , 0,0,0.95,1,1,1), {Bottom shirt}      DrawModel3DMesh(Model3D(1 ,atmC),4 , 0,0,0.95,1,1,1), {Face}  DrawModel3DMesh(Model3D(1 ,atmC),5 , 0,0,0.95,1,1,1), {Head}      DrawModel3DMesh(Model3D(1 ,atmC),6 , 0,0,0.95,1,1,1), {Hair}  DrawModel3DMesh(Model3D(1 ,atmC),16 , 0,0,0.95,1,1,1), {Hips}    PushCoords,  RotateCoords(valAngle, 1, 0, 0, 0, 0, 0.95 + 0.48 + valAngle/90 * 0.05),     DrawModel3DMesh(Model3D(1, atmC),7 , 0,0,0.95 + 0.48 + valAngle/90 * 0.05,1,1,1), {Left arm}  DrawModel3DMesh(Model3D(1, atmC),9 , 0,0,0.95+0.48 + valAngle/90 * 0.05,1,1,1), {Right arm}  SetMaterialOverride(True),     {Set material color}  DrawModel3DMesh(Model3D(1, atmC),8 , 0,0,0.95 + 0.48 + valAngle/90 * 0.05,1,1,1), {Left shoulder}  DrawModel3DMesh(Model3D(1, atmC),10 , 0,0,0.95+0.48 + valAngle/90 * 0.05,1,1,1), {Right shoulder}  SetMaterialOverride(False),  PopCoords,  DrawModel3DMesh(Model3D(1, atmC),14 , 0,0,0.95,1,1,1), {Left upper leg}  DrawModel3DMesh(Model3D(1, atmC),15 , 0,0,0.54,1,1,1), {Left lower leg}  DrawModel3DMesh(Model3D(1, atmC),2 , 0,0,0.05,1,1,1), {Left Foot}  DrawModel3DMesh(Model3D(1, atmC),13 , 0,0,0.95,1,1,1), {Right upper leg}     DrawModel3DMesh(Model3D(1, atmC),1 , 0,0,0.54,1,1,1), {Right lower Leg}  DrawModel3DMesh(Model3D(1, atmC),12 , 0,0,0.05,1,1,1) {Right foot}    )], [Enter helptext], [Operator_Animate3D_Standing(c)], 0, [Operator]);
DefineFunction([Operator_Animate3D_Sitting], [Icons3D], 1, 1, [Do(   var([atmC], vbAtom, p(1)),  var([valAngle], vbValue),    {MaterialOverride of shirt}  SetMaterialColor(Color(p(1)), DIFFUSE_AND_AMBIENT_COLOR),   valAngle :=    Case(    WhichIsTrue(     {--Idle or not defined--}     Status(atmC) = 1,     {--Busy--}     Status(atmC) = 2,     {--Travel to job--}     Status(atmC) = 33,     {--Not Available--}     Status(atmC) = 12,     {--All others--}     True    ),    0,    60,    60,    0,    0   ),   PushCoords,     TranslateCoords(0,0,-0.34),    SetMaterialOverride(True),     {Set material color}    DrawModel3DMesh(Model3D(1, atmC),3 , 0,0,0.95,1,1,1), {Shirt}    SetMaterialOverride(False),    DrawModel3DMesh(Model3D(1, atmC),11 , 0,0,0.95,1,1,1), {Bottom shirt}        DrawModel3DMesh(Model3D(1, atmC),4 , 0,0,0.95,1,1,1), {Face}    DrawModel3DMesh(Model3D(1, atmC),5 , 0,0,0.95,1,1,1), {Head}        DrawModel3DMesh(Model3D(1, atmC),6 , 0,0,0.95,1,1,1), {Hair}    DrawModel3DMesh(Model3D(1, atmC),16 , 0,0,0.95,1,1,1), {Hips}        PushCoords,    RotateCoords(valAngle, 1, 0, 0, 0, 0, 0.95 + 0.48 + valAngle/90 * 0.05),       DrawModel3DMesh(Model3D(1, atmC),7 , 0,0,0.95 + 0.48 + valAngle/90 * 0.05,1,1,1), {Left arm}    DrawModel3DMesh(Model3D(1, atmC),9 , 0,0,0.95+0.48 + valAngle/90 * 0.05,1,1,1), {Right arm}    SetMaterialOverride(True),     {Set material color}    DrawModel3DMesh(Model3D(1, atmC),8 , 0,0,0.95 + 0.48 + valAngle/90 * 0.05,1,1,1), {Left shoulder}    DrawModel3DMesh(Model3D(1, atmC),10 , 0,0,0.95+0.48 + valAngle/90 * 0.05,1,1,1), {Right shoulder}    SetMaterialOverride(False),    PopCoords,      PushCoords,    TranslateCoords(0,0,0.95),    RotateCoords(90, 1, 0,0),    DrawModel3DMesh(Model3D(1, atmC),14 , 0,0,0,1,1,1), {Left upper leg}    RotateCoords(-(90), 1, 0,0),    TranslateCoords(0,0.48,-(0.05)),    DrawModel3DMesh(Model3D(1, atmC),15 , 0,0,0,1,1,1), {Left lower leg}    TranslateCoords(0,0,-0.51),    DrawModel3DMesh(Model3D(1, atmC),2 , 0,0,0,1,1,1), {Left Foot}    PopCoords,    pushCoords,    TranslateCoords(0,0,0.95),    RotateCoords(90, 1, 0,0),    DrawModel3DMesh(Model3D(1, atmC),13 , 0,0,0,1,1,1), {Right upper leg}       RotateCoords(-(90), 1, 0,0),    TranslateCoords(0,0.48,-(0.05)),        DrawModel3DMesh(Model3D(1, atmC),1 , 0,0,0,1,1,1), {Right lower Leg}    TranslateCoords(0,0,-0.51),    DrawModel3DMesh(Model3D(1, atmC),12 , 0,0,0,1,1,1), {Right foot}        PopCoords,  PopCoords)], [Enter helptext], [Operator_Animate3D_Sitting(c)], 0, [Operator]);
Set(Icon(a), 
	RegisterIcon(IconsDir([bmp\atoms\operator.bmp]), [operator]));
AddModel3D(
	RegisterModel3D(Model3DDir([Persons\Men\Man_subdivided.wrl]), [Man_subdivided.wrl], 0, 0, 0, 1, 1, -1, -90, 0, 0), a);
AddModel3D(
	RegisterModel3D(Model3DDir([Persons\Men\Man_divided.wrl]), [Man_divided.wrl], 0, 0, 0, 1, 1, -1, -90, 0, 0), a);
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\Operator.ico]));
Set(Info, [Last Revision:
---------------------
March, 2008
]);
Set(DdbRec, [>t999-transporter:1.]);
SetChannels(3, 3);
SetChannelRanges(3, 3, 3, 3);
int001(212);
int013(1, 0, false, false, 0, 0, [Do not connect.], []);
int013(2, 0, false, false, 0, 0, [], []);
int013(3, 0, false, false, 1, 0, [Do not connect.], []);
SetSize(1, 1, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(36);
SetAttributeName(r(1), [NextChannel]);
SetAttributeName(r(2), [PrevChannel]);
SetAttributeName(r(3), [curxdest]);
SetAttributeName(r(4), [curydest]);
SetAttributeName(r(5), [curzdest]);
SetAttributeName(r(6), [keepspeed]);
SetAttributeName(r(7), [speed]);
SetAttributeName(r(8), [acceleration]);
SetAttributeName(r(9), [deceleration]);
SetAttributeName(r(10), [betweennodes]);
SetAttributeName(r(11), [picking]);
SetAttributeName(r(12), [usetravel]);
SetAttributeName(r(13), [loadtime]);
SetAttributeName(r(14), [unloadtime]);
SetAttributeName(r(15), [loadquantity]);
SetAttributeName(r(16), [offroad]);
SetAttributeName(r(17), [offnetwork]);
SetAttributeName(r(18), [prevatom]);
SetAttributeName(r(19), [xoffpick]);
SetAttributeName(r(20), [yoffpick]);
SetAttributeName(r(21), [atdestination]);
SetAttributeName(r(22), [finalrotation]);
SetAttributeName(r(23), [picking]);
SetAttributeName(r(24), [freeaction]);
SetAttributeName(r(25), [3dicon]);
SetAttributeName(r(26), [curload]);
SetAttributeName(r(27), [callaction]);
SetAttributeName(r(28), [loadclose]);
SetAttributeName(r(29), [isplacing]);
SetAttributeName(r(30), [destnode]);
SetAttributeName(r(31), [startnode]);
SetAttributeName(r(32), [endnode]);
SetAttributeName(r(33), [distancetable]);
SetAttributeName(r(34), [nodetable]);
SetAttributeName(r(35), [pointertable]);
SetAttributeName(r(36), [connectiontable]);
SetAtt(r(1), 1);
SetAtt(r(7), 1);
SetExprAtt(r(13), [0]);
SetExprAtt(r(14), [0]);
SetExprAtt(r(15), [1]);
SetExprAtt(r(19), [{.+(~1(in(2,c)),~2)|5. Destination size --> apply an offset equal to the ~xsize~ of the destination plus ~-1~ meter..}+(xsize(in(2,c)),-1)]);
SetExprAtt(r(20), [{.~1|1. Fixed --> always apply an offset of ~-1~ meter..}-1]);
SetTextAtt(r(21), [not used]);
SetAtt(r(25), 1);
int024;
Set(OnEvent, [Case( EventCode, {* 1: Start travelling or continue travelling at maximum speed *} Do(  Status( c) := 33,    {* Travel to Job *}  CreateEvent(   TravelTo( c, 1, curxdest, curydest, zLoc( c), speed, keepspeed * speed, acceleration, deceleration),   c,    TravelEventCode  ) ), {* 2: Arrival at next node or final destination *} CreateEvent( 0, c, keepspeed + 3), {* 3: Arrival at job, signal atom *} Do(  atdestination := true,  If(   Label( [t-setdestination], c),   Do(    SetLabel( [t-setdestination], 0, c),    OpenInput( c),    CreateEvent( 0, In( 1, c), 2)   ),   Do(    StopAtom( c),    Status( c) := 30,    picking := False,    SetCs( In( 2, c)),    SetLabel( [t-opnumber], Label( [t-opnumber], cs) - 1, cs),    If(     usetravel,      SetLoc(xloc(c)+(ddb([t-opnumber],cs)*att(6,in(1,c))*att(5,in(1,c))),yloc(c),zloc(c),c),      SetLoc(      +( xLoc( c), -( xAbsLoc( In( 3, c), Model), xAbsLoc( c, Model)), xSize( In( 3, c)), -( *( Att( 5, In( 1, c)), Att( 6, In( 1, c)), Label( [t-opnumber], c)))),      +( yLoc( c), -( yAbsLoc( In( 3, c), Model), yAbsloc( c, Model)),-( yLoc( In( 3, c)) + 1)),      zLoc( c),      c     )    ),    If(     Label( [t-opnumber], cs) = 0,     Do(      Repeat(       NrOc( In( 1, c)),       If(        And(         AtomExists( Out( Count, In( 1, c))),         AtomExists( In( 2, Out( Count, In( 1, c)))),         AtomId( In( 2, Out( Count, In( 1, c)))) = AtomId( cs)        ),        Status( Out( Count, In( 1, c))) := 2   {* Busy *}       )      ),      Status( cs) := 2, {Label( [oldstatus], cs),}      Color( cs) := Label( [t-color], c),      DelayEvents( Time - Label( [t-calltime], c) - 1000000000000,cs)     )    )   )  ) ), {* 4: Arrival at node, select next destination *} Do(  keepspeed := False,  If(   offroad,   If(    Label( [t-node1], In( 2, c)) = Att( [nodenumber], Out( 2, c)),    NextChannel := Label( [t-node2], In( 2, c)),    NextChannel := Label( [t-node1], In( 2, c))   ),   NextChannel := Cell( Att( [nodenumber], Out( 2, c)), destnode, Vtp( nodetable))  ),  If(   NextChannel = 0,   Do(    Msg( Concat([Simulation stopped. ], Name( In( 2, c)), [ cannot be reached from ], Name( Out( 2, c)),[. Check the network for one-way connections from ],name(out(2,c)),[ to ],name(in(2,c)),[. Check if two network controllers control the same network. Rebuild the network.]), 3),    Stop   ),   Do(    SetCs( Out( Att( 1, c), Vtp( pointertable))),    Connect( 3, c, 0, Out( 2, c)),    Connect( 2, c, 0, cs),    If(     offroad,     {* Travel off the road to the final destination *}     AdvancedTransporter_t-calcoffset,     Do(      curxdest := xLoc( c) + xAbsLoc( cs, Model) - xAbsLoc( c, Model),      curydest := yLoc( c) + yAbsLoc( cs, Model) - yAbsLoc( c, Model),      keepspeed := True,      If(       Att( [nodenumber], cs) = destnode,       Do(        offroad := Min( 1, Label( [t-node2], In( 2, c))),        keepspeed := offroad       )      )     )    )   )  ),  CreateEvent( 0, c, 1) ), {* 5: Free destination *} Do(  freeaction,  OpenIc( 1, c) ), {* 6: Travel between destination/origin and first node *} If(  usetravel,  Do(   offnetwork := true,   If(    And(     AtomExists( Out( 2, c)),     AtomExists( Vtp( Label( [t-netreference], Out( 2, c))))    ),    Do(     offnetwork := False,     distancetable := Ptv( First( Vtp( Label( [t-netreference], Out( 2, c))))),      nodetable := Ptv( Next( Vtp( distancetable))),     pointertable := Ptv( Next( Vtp( nodetable))),     connectiontable := Ptv( Up( Vtp( distancetable)))    )   ),   If(    Or(     Label( [t-node1], In( 2, c)) = 0,     offnetwork    ),    Do(     keepspeed := 0,     curxdest := xLoc( c) + xAbsLoc( In( 2, c), Model) - xAbsLoc( c, Model),     curydest := yLoc( c) + yAbsLoc( In( 2, c), Model) - yAbsLoc( c, Model),     offnetwork := True,     offroad := False    ),    Do(     keepspeed := 1,     betweennodes := 0,     SetCs( Out( 2, c)),     If(      offroad,      If(       And(        Label( [t-node2], In( 2, c)) > 0,        Label( [t-node1], In( 2, c)) = Label( [t-node1], Vtp( prevatom)),        Label( [t-node2], In( 2, c)) = Label( [t-node2], Vtp( prevatom))       ),       {* Next pick/place is along the same section *}       Do(        AdvancedTransporter_t-calcoffset,        If(         Or(          Cell( Att( [nodenumber], Out( 2, c)), Att( [nodenumber], Out( 3, c)), Vtp( connectiontable)),          AtomDistance( c, cs) + 0.001 >= Sqrt( Sqr( xLoc( cs) - curxdest) + Sqr( yLoc( cs) - curydest))         ),         {* Transporter can move backwards or next pick is down the road *}         keepspeed := 0,         {* Transporter must move to second node on this path, destination stays the same *}         offroad := false        )       ),       {* Next pick/place is in another atom, determine the correct node to travel to *}       offroad := false      )     ),     If(      Not( offroad),      Do(       {* If it's a one-way section, the transporter must move forward *}       If(        Not( Cell( Att( [nodenumber], Out( 2, c)), Att( [nodenumber], Out( 3, c)), Vtp( connectiontable))),        SetLabel( [t-oneway], 1, c),        SetLabel( [t-oneway], 0, c)       ),       AdvancedTransporter_CalculateDistance      )     ),     If(      Att( [nodenumber], Out( 2, c)) = destnode,      Do(       offroad := Min( 1, Label( [t-node2], In( 2, c))),       keepspeed := offroad      )     )    )   ),   prevatom := Ptv( In( 2, c)),   If(    atdestination,     CreateEvent( 0, c, 1)   ),   atdestination := false  ),  CreateEvent( 0, c, 3) ))]);
Set(OnCreation, [SetLabel( [t-operator], 1, c)]);
Set(OnDestruction, [If( AtomExists( In( 2, c)), Color( In( 2, c)) := Label( [t-color], c))]);
Set(OnReset, [Do( If(  And(   AtomExists( In( 2, c)),   picking  ),  Do(   Color( In( 2, c)) := Label( [t-color], c),   SetLabel( [t-opnumber], 0, In( 2, c))  ) ), If(
  AtomExists( Out( 2, c)),
  Do(
   SetLoc( xLoc( Out( 2, c)) + 1, yLoc( Out( 2, c)), zLoc( Out( 2, c)), c),
   Connect( 3, c, 0, Out( 2, c)),
   Connect( 0, Out( 2, c), 2, c)
  ),
  Connect( 0, c, 2, c)
 ),
 If(  Or(   Not( AtomExists( In( 1, c))),   Not( Label( [t-team], In( 1, c)))  ),  Do(   Connect( 0, c, 1, c),   Trace( Concat( Name( c), [ is not connected to a team. Click atom to connect.])),   displaytracer  ) ), StopAtom( c), Status( c) := 1,     {* Idle *} RotationAs( c) := 0, {* set attributes *} offroad := False, offnetwork := False, picking := True, atdestination := True, NextChannel := 0, PrevChannel := 1, keepspeed : =1, betweennodes := 0, loadclose := 0, isplacing := 0, {* set label values *} SetLabel( [t-start], 1, c), SetLabel( [t-oneway], 0, c), SetLabel( [t-lastop], 0, c), SetLabel( [t-free], 0, c), SetLabel( [t-arrived], 0, c), SetLabel( [t-calltime], 0, c), SetLabel( [t-setdestination], 0, c) )]);
Set(OnUser, [Do( { Delete any current instances of this form.}  GuiDestroy([Operator]), { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\Operator.gui]), 1), { Show the GUI-form.} GuiCreate([Operator], [Operator], 0, c, 0, 1))]);
Set(On2DDraw, [If( AtomExists( In( 3, c)), If(  Not( usetravel),  Do(   SetCs( In( 3, c)),   SetLoc(    +( xLoc( c), -( xAbsLoc( cs, Model), xAbsLoc( c, Model)), xSize( cs), -( Max( 1, *( Att( 5, In( 1, c)), Att( 6, In( 1, c)), Label( [t-opnumber], c))))),    +( yLoc( c), -( yAbsLoc( cs, Model), yAbsLoc( c, Model)), -( yLoc( cs) + 1)),    zLoc( c),    c   )  ) ))]);
Set(On3DDraw, [Do( PushCoords, RotateCoords(-90, 0, 0, 1), If(  {--Speed optimization--}  InViewField(0.5 * xSize(c), 0.5 * ySize(c), 0.5 * zSize(c) + 0.5, 0.5 * zSize(c)),  If(   {---Dinstant view--}    viewerdist(xLoc(c), yLoc(c), zLoc(c)) > 200,    {--Close view--}    Operator_Animate3D_Simple(c),    Case(       Att([3dicon], c),      {--Standing--}      Operator_Animate3D_Standing(c),      {--Walking--}      if(       Status(c) = 33,       {--Travel to Job--}       Operator_Animate3D_Walking(c),       {--On the Job--}       Operator_Animate3D_Standing(c)      ),      {---Sitting--}      Operator_Animate3D_Sitting(c),      {--Simple--}      Operator_Animate3D_Simple(c),      {--None--}      a    )  ) ), PopCoords, If(  AtomExists( In( 3, c)),  If(   Not( usetravel),   Do(    SetCs( In( 3, c)),    SetLoc(     +( xLoc( c), -( xAbsLoc( Cs, Model), xAbsLoc( c, Model)), xSize( cs), -( Max( 1, *( Att( 5, In( 1 ,c)), Att( 6, In( 1, c)), Label( [t-opnumber], c))))),     +( yLoc( c), -( yAbsLoc( In( 3, c), Model), yAbsLoc( c, Model)), -( yLoc( cs) + 1)),     zLoc( c),     c    )   )  ) ))]);
Set(OnMessage, [If( IcReady( 1, c), Do(  CloseAllIc( c),  picking := True,  If(   AtomExists( In( 2, c)),   PrevAtom := Ptv( In( 2, c))  ),  SetCs( Vtp( message)),  Connect( 0, In( 1, cs), 2, c),  Connect( 0, In( 3, cs), 3, c),  SetLabel( [t-color], Label( [t-color], cs), c),  SetLabel( [t-calltime], Label( [t-calltime], cs), c),  SetLabel( [t-opnumber], Label( [t-opnumber], cs), c),  SetLabel( [t-opnumber], Label( [t-opnumber], cs) - 1, cs),  If(   Label( [t-opnumber], cs) = 0,   Do(    SetLabel( [t-lastop], 1, c),    DestroyAtom( cs)   )  ),  callaction,  If(   Content( In( 1, c)) > 0,   CreateEvent( 0, In( 1, c), 2)  ),  CreateEvent( 0, c, 6) ))]);
SetStatus(0);
int018;
int007;
