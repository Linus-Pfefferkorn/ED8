

{Preregister functions}

PreregisterFunction([StatusIndicator_SetNumberOfSegments], 2, 2);
PreregisterFunction([StatusIndicator_Initialize], 1, 1);
PreregisterFunction([StatusIndicator_SetSegmentColor], 3, 3);
PreregisterFunction([StatusIndicator_SetSegmentScore], 3, 3);
PreregisterFunction([StatusIndicator_Animate2D], 1, 1);
PreregisterFunction([StatusIndicator_SetSegmentName], 3, 3);
PreregisterFunction([StatusIndicator_GetSegmentColor], 2, 2);
PreregisterFunction([StatusIndicator_SetBorderColor], 2, 2);
PreregisterFunction([StatusIndicator_GetBorderColor], 1, 1);
PreregisterFunction([StatusIndicator_GetSegmentScore], 2, 2);
PreregisterFunction([StatusIndicator_UseDefaultColours], 1, 1);
PreregisterFunction([StatusIndicator_SetTitle], 2, 2);
PreregisterFunction([StatusIndicator_GetTitle], 1, 1);
PreregisterFunction([StatusIndicator_SetTitleVisible], 2, 2);
PreregisterFunction([StatusIndicator_GetTitleVisible], 1, 1);
PreregisterFunction([StatusIndicator_SetTextColor], 2, 2);
PreregisterFunction([StatusIndicator_GetTextColor], 1, 1);
PreregisterFunction([StatusIndicator_SetTextSizeTitle], 2, 2);
PreregisterFunction([StatusIndicator_GetTextSizeTitle], 1, 1);
PreregisterFunction([StatusIndicator_SetTextSizeLegend], 2, 2);
PreregisterFunction([StatusIndicator_GetTextSizeLegend], 1, 1);
PreregisterFunction([StatusIndicator_GuiDataTypeAndRangeValidation], 1, 1);
PreregisterFunction([StatusIndicator_GuiApplyChanges], 1, 1);
PreregisterFunction([StatusIndicator_GetSegmentName], 2, 2);
PreregisterFunction([StatusIndicator_SetRefreshRate], 2, 2);
PreregisterFunction([StatusIndicator_GetRefreshRate], 1, 1);
PreregisterFunction([StatusIndicator_Refresh], 1, 1);
PreregisterFunction([StatusIndicator_InitializeStatuses], 1, 1);
PreregisterFunction([StatusIndicator_SetStatusesInitialized], 2, 2);
PreregisterFunction([StatusIndicator_GetStatusesInitialized], 1, 1);
PreregisterFunction([StatusIndicator_GetNumberOfSegments], 1, 1);
PreregisterFunction([StatusIndicator_SetSelectedStatusColor], 2, 2);
PreregisterFunction([StatusIndicator_GetSelectedStatusColor], 1, 1);
PreregisterFunction([StatusIndicator_SetSelectedStatusBorderColor], 2, 2);
PreregisterFunction([StatusIndicator_GetSelectedStatusBorderColor], 1, 1);
PreregisterFunction([StatusIndicator_SetStatusSelected], 2, 2);
PreregisterFunction([StatusIndicator_GetStatusSelected], 1, 1);
PreregisterFunction([StatusIndicator_SetSelectedStatusMaximumLength], 2, 2);
PreregisterFunction([StatusIndicator_GetSelectedStatusMaximumLength], 1, 1);
PreregisterFunction([StatusIndicator_StartCollectingStatusInformation], 1, 1);
PreregisterFunction([StatusIndicator_Animate3D], 1, 1);
PreregisterFunction([StatusIndicator_GetNumberOfSegmentsDrawn], 1, 1);
PreregisterFunction([StatusIndicator_SetNumberOfSegmentsDrawn], 2, 2);
PreregisterFunction([StatusIndicator_GetAutomaticScaling], 1, 1);
PreregisterFunction([StatusIndicator_SetAutomaticScaling], 2, 2);


{Atom: StatusIndicator}

sets;
BaseClass;
CreateAtom(a, s, [], 1, false);
Set(OnInit, [do( { This constant is set according to the number of statuses in the StatusList atom.   If you added statuses manually then change this constant to represent the number   of available statuses. } dim([StatusIndicator_NUMBEROFSTATUSES], vbConstant, 33), { Define some columnnumber constants for the Status Indicator} dim([STATUSINDICATOR_COLUMNNUMBER_SEGMENTSCORE], vbValue, 1), dim([STATUSINDICATOR_COLUMNNUMBER_SEGMENTCOLOR], vbValue, 2), dim([STATUSINDICATOR_COLUMNNUMBER_SEGMENTNAME], vbValue, 3), { Event Code constants } dim([STATUSINDICATOR_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION], vbConstant, 3001), dim([STATUSINDICATOR_EVENTCODE_REFRESH], vbConstant, 3002))]);
int023([StatusIndicator], 0, 48);
DefineFunction([StatusIndicator_SetNumberOfSegments], [StatusIndicator], 2, 2, [do( Att([NumberOfSegments], p(1)) := p(2), nrows(p(1)) := p(2))], [p(1) as StatusIndicatorp(2) as integer, the number of segmentsResult: none. Sets the property NumberOfSegments of StatusIndicator.], [StatusIndicator_SetNumberOfSegments( atmStatusIndicator, newNumberOfSegments )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_Initialize], [StatusIndicator], 1, 1, [do( var([indexer], vbValue, 0),  {--Activate 3D animation of existing models--} SetSetting(sa3DOutline, 0, p(1)), SetSetting(sa3DDraw, 1, p(1)), { Put all segment scores back to zero. } for(  indexer := 1, indexer <= StatusIndicator_GetNumberOfSegments(p(1)), inc(indexer),  StatusIndicator_SetSegmentScore(p(1), indexer, false) ), { Set StatusSelected to zero so that the default animation is shown } StatusIndicator_SetStatusSelected(p(1), false),  StatusIndicator_SetSelectedStatusMaximumLength(p(1), 0),  if(  AtomExists(in(1, p(1))) = true,  do(   { create an event to start collecting status information. This is done by an event because     if we call EnableStatusMonitor here directly and the monitor has a lower rank than the atom to be     monitored this atom's onReset event will fire later and will DisableTheStatusMonitor. Creating an event     at time 0 will occur after all onReset eventHandlers are fired. You see...}   createevent(0, p(1), STATUSINDICATOR_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION),      { And create an event to start up the Refreshment Cycle. This is an almost immediate event so      that the user directly sees something on the diagram. Afterwards the refresh event is created with an interval     equal to the Refresh Rate. See the Refresh function for further details. }   createEvent(1, p(1), STATUSINDICATOR_EVENTCODE_REFRESH)     ) ))], [p(1) as StatusIndicatorResult: none. INitializes the diagram.], [StatusIndicator_Initialize(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSegmentColor], [StatusIndicator], 3, 3, [cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTCOLOR, p(1)) := p(3)], [p(1) as StatusIndicatorp(2) as integer, Segment Indexp(3) as ColorResult: none. Sets the color for the specified Segment], [StatusIndicator_SetSegmentColor(c, 1, RgbColor(cred, cgreen, cblue))], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSegmentScore], [StatusIndicator], 3, 3, [do( if(  p(3) >= 0,  cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTSCORE, p(1)) := p(3),  do(   cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTSCORE, p(1)) := 0,   trace(    concat(     [The score of segment ],     string(p(2)),     [ has been set to zero because an attempt was made to set it to a value lower than zero. StatusIndicator: ],     string(name),     [, Atomid: ],     String(atomid(p(1)))    )   ),   displaytracer  ) ) )], [p(1) as StatusIndicatorp(2) as integer, Segment Indexp(3) as double, ScoreResult: none. Sets the socre for the specified Segment], [StatusIndicator_SetSegmentScore(c, index, 3)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_Animate2D], [StatusIndicator], 1, 1, [do(
 var([atmC], vbAtom, p(1)),
 var([indexer], vbValue, 0),
 var([segmentsdrawn], vbValue, 0),
 var([connected], vbValue, 0),
 
 connected := atomexists(in(1, atmC)),

 if(
   {**Check if automatic scaling is turned on**}
   StatusIndicator_GetAutomaticScaling(atmC) = True,
   do(
     StatusIndicator_SetTextSizeTitle(atmC, ySize(atmC) / 10),    
     if(
       StatusIndicator_GetNumberOfSegmentsDrawn(atmC) > 0,   
       StatusIndicator_SetTextSizeLegend(atmC, (ySize(atmC) - 2 * StatusIndicator_GetTextSizeTitle(atmC)) / (2 * StatusIndicator_GetNumberOfSegmentsDrawn(atmC)))
     ),
     xSize(atmC) := (2/3) * Max(StatusIndicator_GetTextSizeTitle(atmC), StatusIndicator_GetTextSizeLegend(atmC)) * StringLength(StatusIndicator_GetTitle(atmC))
   )        
 ),
 
 { Do a Check if the current Status already has a score administrated in the tabel if not, do a refresh quickly. 
   This way the active status will always be visible in the status indicator. }
 if(
  and(
   connected = True,
   cell(Status(in(1, atmC)), StatusIndicator_COLUMNNUMBER_SEGMENTSCORE, atmC) = False,
   { APP-124 JG (29-04-2008) Only refresh when runspeed is not at it's maximum...}
   RunSpeed < 1E40
  ),
  StatusIndicator_Refresh(atmC)
 ), 

 { APP-124 JG (29-04-2008) Show a message when the diagram is not refreshed...}
 if(
  runspeed = 1E40,
  DrawText(
   0,
   -4 * StatusIndicator_GetTextSizeTitle(atmC),
   StatusIndicator_GetTextSizeTitle(atmC) * 40,
   StatusIndicator_GetTextSizeTitle(atmC) * 4,
   Concat(
    [Refresment has been paused.],
    CR,
    [(Lower the runspeed to refresh the diagram)]
   ),
   ColorRed,
   StatusIndicator_GetTextSizeTitle(atmC),
   [Arial],
   True,
   0,
   0,
   HA_LEFT + VA_TOP
  )
 ),

 { default View when not connected or no scores yet available. }
 if(
  connected = false,
  do(
   DrawRectangle(
    0,
    0,
    StatusIndicator_GetTextSizeLegend(atmC),
    ySize(atmC) - 2 * StatusIndicator_GetTextSizeTitle(atmC),
    colorblack,
    colorblack
   ),
   DrawText(
    0,
    ySize(atmC) - 2 * StatusIndicator_GetTextSizeTitle(atmC),
    StringLength(StatusIndicator_GetTitle(atmC)) * StatusIndicator_GetTextSizeTitle(atmC),
    StatusIndicator_GetTextSizeTitle(atmC) * 2,
    StatusIndicator_GetTitle(atmC),
    StatusIndicator_GetTextColor(atmC),
    StatusIndicator_GetTextSizeTitle(atmC),
    [Arial],
    0,
    0,
    0,
    HA_LEFT + VA_TOP
   ),  
   { Return nothing to quit the function. }
   return(0)
  )
 ),
 
 { Animation of the colored segments }
 for(
  indexer := 1, indexer <= StatusIndicator_GetNumberOfSegments(atmC), inc(indexer),
  do(
   if(
    StatusIndicator_GetSegmentScore(atmC, indexer) = True,
    do(
     inc(segmentsdrawn),

     { ***************** LEGEND ************************ }
     do(
      { ******************* CURRENT STATUS ******************** }
      { Check out if this segment corresponds to the current status, if so draw a nice box around it. }
      if(
       { APP-124 JG (29-04-2008) Only draw selected status when runspeed is not at it's maximum...}
       and(
        Status(in(1, atmC)) = indexer,
        runspeed < 1E40
       ),
       do(
        DrawRectangle(
         -1/4 * StatusIndicator_GetTextSizeLegend(atmC),
         StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - 1/4 * StatusIndicator_GetTextSizeLegend(atmC),
         5/4 * StatusIndicator_GetTextSizeLegend(atmC) + StatusIndicator_GetSelectedStatusMaximumLength(atmC) * StatusIndicator_GetTextSizeLegend(atmC),
         StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 1) + 1/4 * StatusIndicator_GetTextSizeLegend(atmC),
         StatusIndicator_GetSelectedStatusColor(atmC),
         StatusIndicator_GetSelectedStatusBorderColor(atmC)
        )
       )
      ),
      
      { The box for the color }
      DrawRectangle(
       0,
       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),
       StatusIndicator_GetTextSizeLegend(atmC),
       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 1),
       StatusIndicator_GetSegmentColor(atmC, indexer),
       StatusIndicator_GetBorderColor(atmC)
      ),
      
      { The name of the segment }
      DrawText(
       2 * StatusIndicator_GetTextSizeLegend(atmC),
       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) {- 1/4 * StatusIndicator_GetTextSizeLegend(atmC) ***used as correction for incorrect drawtext functionality***},
       StringLength(String(cell(indexer, StatusIndicator_COLUMNNUMBER_SEGMENTNAME, atmC))) * StatusIndicator_GetTextSizeLegend(atmC),
       2 * StatusIndicator_GetTextSizeLegend(atmC),
       String(cell(indexer, StatusIndicator_COLUMNNUMBER_SEGMENTNAME, atmC)),
       StatusIndicator_GetTextColor(atmC),
       StatusIndicator_GetTextSizeLegend(atmC),
       [Arial],
       0,
       0,
       0,
       HA_LEFT + VA_TOP
      )
     )
    )
   )   
  )
 ),
 { The Diagram's Title }
 if(
  StatusIndicator_GetTitleVisible(atmC),
  DrawText(
   0,
   if(
     segmentsdrawn > 0,
     StatusIndicator_GetTextSizeLegend(atmC) * 2 * segmentsdrawn,
     ySize(atmC) - 2 * StatusIndicator_GetTextSizeTitle(atmC)
   ),
   StringLength(StatusIndicator_GetTitle(atmC)) * StatusIndicator_GetTextSizeTitle(atmC),
   StatusIndicator_GetTextSizeTitle(atmC) * 2,
   StatusIndicator_GetTitle(atmC),
   StatusIndicator_GetTextColor(atmC),
   StatusIndicator_GetTextSizeTitle(atmC),
   [Arial],
   0,
   0,
   0,
   HA_LEFT + VA_TOP
  )
 ),
 StatusIndicator_SetNumberOfSegmentsDrawn(atmC, segmentsdrawn)
)
], [p(1) as StatusIndicator
], [StatusIndicator_Animate2D(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSegmentName], [StatusIndicator], 3, 3, [cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTNAME, p(1)) := p(3)], [p(1) as StatusIndicatorp(2) as integer, Segment indexp(3) as string, Segment Name], [StatusIndicator_SetSegmentName(c, 1,[myname])], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSegmentColor], [StatusIndicator], 2, 2, [cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTCOLOR, p(1))], [p(1) as StatusIndicatorp(2) as integer, Segment indexResult: Color. The color pointer for the requested Segmetn index], [StatusIndicator_GetSegmentColor(c, 1)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetBorderColor], [StatusIndicator], 2, 2, [Att([BorderColor], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as DoubleResult: none. Sets the property BorderColor of StatusIndicator.], [StatusIndicator_SetBorderColor( atmStatusIndicator, newBorderColor )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetBorderColor], [StatusIndicator], 1, 1, [Att([BorderColor], p(1))], [p(1) as StatusIndicatorResult: Double. Get the property BorderColor of StatusIndicator.], [newBorderColor := StatusIndicator_GetBorderColor( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSegmentScore], [StatusIndicator], 2, 2, [cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTSCORE, p(1))], [p(1) as StatusIndicatorp(2) as integer, Segment indexResult: Double. The score for the segment with index p(2) of StatusIndicator p(1)], [StatusIndicator_GetSegmentScore(e1, e2)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_UseDefaultColours], [StatusIndicator], 1, 1, [do( var([indexer], vbValue, 0), var([indexer2], vbValue, 0), var([cred], vbValue, 0), var([cgreen], vbValue, 0), var([cblue], vbValue, 0),  { We divide the number of segments in 5 ranges. Every range will vary one of the color components Red, Green or Blue.   This way we get smoothly changing colors from red to purple to blue to green to yellow. Some understanding of color profiles is assumed.} var([b1], vbValue, 0), var([b2], vbValue, 0), var([b3], vbValue, 0), var([b4], vbValue, 0), var([b5], vbValue, 0),  { Obtain the ranges borders depending on the number of segments } b1 := Round(StatusIndicator_GetNumberOfSegments(p(1)) / 5 * 1), b2 := 2 * b1, b3 := 3 * b1, b4 := 4 * b1, b5 := 5 * b1,  { Define the default coloring of the segments. } for(  indexer2 := 1, indexer2 <= StatusIndicator_GetNumberOfSegments(p(1)), inc(indexer2),    do(   indexer := mod(indexer2, 5),      if(    indexer = 0,    indexer := 5   ),      indexer := indexer / 5,    indexer := indexer * StatusIndicator_GetNumberOfSegments(p(1)),   indexer := indexer - b1 + 1,   indexer := indexer + trunc(indexer2 / 5),   if(    indexer <= b1,    do(     cred := 255,     cgreen := 0,     cblue := indexer / b1 * 255    )   ),     if(    and(     indexer > b1,     indexer <= b2    ),    do(     cred := 255 - ((indexer - b1)/ (b2 - b1)) * 255,     cgreen := 0,     cblue := 255    )   ),       if(    and(     indexer > b2,     indexer <= b3    ),    do(     cred := 0,     cgreen := ((indexer - b2) / (b3 - b2)) * 255,     cblue := 255    )   ),      if(    and(     indexer > b3,     indexer <= b4    ),    do(     cred := 0,     cgreen := 255,     cblue := 255 - ((indexer - b3) / (b4 - b3)) * 255    )   ),        if(    and(     indexer > b4,     indexer <= b5    ),    do(     cred := ((indexer - b4) / (b5 - b4)) * 255,     cgreen := 255,     cblue := 0    )   ),     StatusIndicator_SetSegmentColor(p(1), indexer2, RgbColor(cred, cgreen, cblue))  ) ))], [p(1) as StatusIndicatorResult: none. set the default color at the connected atom.], [StatusIndicator_UseDefaultColours(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetTitle], [StatusIndicator], 2, 2, [Att([Title], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as StringResult: none. Sets the property Title of StatusIndicator.], [StatusIndicator_SetTitle( atmStatusIndicator, newTitle )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetTitle], [StatusIndicator], 1, 1, [Att([Title], p(1))], [p(1) as StatusIndicatorResult: String. Get the property Title of StatusIndicator.], [newTitle := StatusIndicator_GetTitle( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetTitleVisible], [StatusIndicator], 2, 2, [Att([TitleVisible], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as BooleanResult: none. Sets the property TitleVisible of StatusIndicator.], [StatusIndicator_SetTitleVisible( atmStatusIndicator, newTitleVisible )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetTitleVisible], [StatusIndicator], 1, 1, [Att([TitleVisible], p(1))], [p(1) as StatusIndicatorResult: Boolean. Get the property TitleVisible of StatusIndicator.], [newTitleVisible := StatusIndicator_GetTitleVisible( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetTextColor], [StatusIndicator], 2, 2, [Att([TextColor], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as ColorResult: none. Sets the property TextColor of StatusIndicator.], [StatusIndicator_SetTextColor( atmStatusIndicator, newTextColor )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetTextColor], [StatusIndicator], 1, 1, [Att([TextColor], p(1))], [p(1) as StatusIndicatorResult: Color. Get the property TextColor of StatusIndicator.], [newTextColor := StatusIndicator_GetTextColor( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetTextSizeTitle], [StatusIndicator], 2, 2, [Att([TextSizeTitle], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as DoubleResult: none. Sets the property TextSizeTitle of StatusIndicator.], [StatusIndicator_SetTextSizeTitle( atmStatusIndicator, newTextSizeTitle )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetTextSizeTitle], [StatusIndicator], 1, 1, [Att([TextSizeTitle], p(1))], [p(1) as StatusIndicatorResult: Double. Get the property TextSizeTitle of StatusIndicator.], [newTextSizeTitle := StatusIndicator_GetTextSizeTitle( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetTextSizeLegend], [StatusIndicator], 2, 2, [Att([TextSizeLegend], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as DoubleResult: none. Sets the property TextSizeLegend of StatusIndicator.], [StatusIndicator_SetTextSizeLegend( atmStatusIndicator, newTextSizeLegend )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetTextSizeLegend], [StatusIndicator], 1, 1, [Att([TextSizeLegend], p(1))], [p(1) as StatusIndicatorResult: Double. Get the property TextSizeLegend of StatusIndicator.], [newTextSizeLegend := StatusIndicator_GetTextSizeLegend( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GuiDataTypeAndRangeValidation], [StatusIndicator], 1, 1, [do( var([PassCheck], vbValue, true), var([TextValue], vbString, 0), var([NumericValue], vbValue, 0), { First we do a DataType and DataRange validation before we really apply the changes...} { TITLE } textvalue := GuiControl([ebTitle], GuiGet([Text])),  if(  StringLength(textvalue) = 0,  do(   passcheck := false,      msg([The title has to contain at least one character.]),   return(passcheck)  ) ),  { REFRESH RATE } textvalue := GuiControl([ebRefreshRate], GuiGet([Text])), numericvalue := Value(GuiControl([ebRefreshRate], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the refresh rate is invalid.]),   return(passcheck)  ) ),  { TEXTSIZE TITLE }  textvalue := GuiControl([ebTextSizeTitle], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeTitle], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the title is invalid.]),   return(passcheck)  ) ), { TEXTSIZE LEGEND }  textvalue := GuiControl([ebTextSizeLegend], GuiGet([Text])), numericvalue := Value(GuiControl([ebTextSizeLegend], GuiGet([Text]))), if(  or(   StringLength(textvalue) = 0,   numericvalue <= 0  ),  do(   passcheck := false,      msg([The inserted value for the textsize of the legend is invalid.]),   return(passcheck)  ) ), { If the check succeeds then apply the changes to the StatusIndicator } StatusIndicator_GuiApplyChanges(p(1)),  return(passcheck))], [p(1) as StatusIndicatorResult: Boolean. Returns tru if the data validation succeeds else false ], [StatusIndicator_GuiDataTypeAndRangeValidation(GuiAtom)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GuiApplyChanges], [StatusIndicator], 1, 1, [do(
 var([atmC], vbAtom, p(1)), 

 StatusIndicator_SetTitle(
  atmC,
  GuiControl([ebTitle], GuiGet([Text]))
 ),
   
 StatusIndicator_SetRefreshRate(
  atmC,
  Value(GuiControl([ebRefreshRate], GuiGet([Text])))
 ),

 StatusIndicator_SetTextColor(
  atmC,
  GuiControl([cpText], GuiGet([Color]))
 ),

 StatusIndicator_SetBorderColor(
  atmC,
  GuiControl([cpBorder], GuiGet([Color]))
 ),

 StatusIndicator_SetSelectedStatusColor(
  atmC,
  GuiControl([cpSelectedStatusColor], GuiGet([Color]))
 ),

 StatusIndicator_SetSelectedStatusBorderColor(
  atmC,
  GuiControl([cpSelectedStatusBorderColor], GuiGet([Color]))
 ),

 StatusIndicator_SetAutomaticScaling(
  atmC,
  GuiControl([cbAutomaticScaling], GuiGet([Checked])) 
 ),

 {**Update GUI**}
 if(
   StatusIndicator_GetAutomaticScaling(atmC) = True,
   do(    
     GuiControl(
      [ebTextSizeTitle], 
      GuiSet([Text], String(StatusIndicator_GetTextSizeTitle(GuiAtom)))
     ),
     
     GuiControl(
      [ebTextSizeLegend], 
      GuiSet([Text], String(StatusIndicator_GetTextSizeLegend(GuiAtom)))
     )
   )
 ),
 
 StatusIndicator_SetTextSizeTitle(
  atmC,
  Value(GuiControl([ebTextSizeTitle], GuiGet([Text])))
 ),

 StatusIndicator_SetTextSizeLegend(
  atmC,
  Value(GuiControl([ebTextSizeLegend], GuiGet([Text])))
 ),
 
 StatusIndicator_SetTitleVisible(
  atmC,
  GuiControl([cbTitleVisible], GuiGet([Checked]))
 ),

 {**Adjust atom size according to scaling**}
 if(
   StatusIndicator_GetNumberOfSegmentsDrawn(atmC) > 0,
   ySize(atmC) := StatusIndicator_GetTextSizeLegend(atmC) * StatusIndicator_GetNumberOfSegmentsDrawn(atmC) * 2 + 2 * StatusIndicator_GetTextSizeTitle(atmC)
 ),
 xSize(atmC) := (2/3) * Max(StatusIndicator_GetTextSizeTitle(atmC), StatusIndicator_GetTextSizeLegend(atmC)) * StringLength(StatusIndicator_GetTitle(atmC)),
 
 UpdateAnimator
)
], [p(1) as StatusIndicator

Result: none. Applies all the inserted values for the StatusIndicator atom
], [StatusIndicator_GuiApplyChanges(GuiATom)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSegmentName], [StatusIndicator], 2, 2, [cell(p(2), StatusIndicator_COLUMNNUMBER_SEGMENTNAME, p(1), 2)], [p(1) as StatusIndicatorp(2) as Integer, index of the segmentResult: String. The name og the segment with index p(2)], [StatusIndicator_GetSegmentName(e1, e2)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetRefreshRate], [StatusIndicator], 2, 2, [Att([RefreshRate], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as IntegerResult: none. Sets the property RefreshRate of StatusIndicator.], [StatusIndicator_SetRefreshRate( atmStatusIndicator, newRefreshRate )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetRefreshRate], [StatusIndicator], 1, 1, [Att([RefreshRate], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property RefreshRate of StatusIndicator.], [newRefreshRate := StatusIndicator_GetRefreshRate( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_Refresh], [StatusIndicator], 1, 1, [{ APP-124 when speed is set to unlimited we cancel the refresh procedure...for slowing down reasons...}do( if(  RunSpeed < 1e40,  if(   atomexists(in(1, c)) = True,     do(    var([indexer], vbValue, 0),    var([timeinstatus], vbValue, 0),        do(      for(      indexer:=1, indexer <= 255, inc(indexer),      do(       timeinstatus := StatusTime(in(1, p(1)), indexer),             if(        timeinstatus > 0,        { We just store the fact that the status has a time bigger than zero, only those statusses will be displayed. }        do(         StatusIndicator_SetSegmentScore(p(1), indexer, true),                  { Set StatusSelected to zero so that the default animation is shown }         StatusIndicator_SetStatusSelected(p(1), true),                  { Check if this status has the biggest stringlength and adjust the SelectedStatusMaximumWidth accordingly. }         if(          StatusIndicator_GetSelectedStatusMaximumLength(p(1)) < StringLength(StatusName(indexer)),          StatusIndicator_SetSelectedStatusMaximumLength(p(1), StringLength(StatusName(indexer)))         )         )       )      )     )    )   )  ) ), { create a new event to trigger the refresh procedure. } createEvent(StatusIndicator_GetRefreshRate(p(1)), p(1), STATUSINDICATOR_EVENTCODE_REFRESH))], [p(1) as StatusIndicatorResult: none. Refreshes the information of the StatusIndicator, is only executed in Pull mode], [StatusIndicator_Refresh(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_InitializeStatuses], [StatusIndicator], 1, 1, [do( { Only initialize the status when the atom is created for the first time in the model. When an atom is duplicated in the model we don't want the statuses to be   initialized again because then coloring information can get lost. And that's exactly something why you want to duplicate a StatusIndicator because you want to   reuse self defined coloring of the segments. }  if(  StatusIndicator_GetStatusesInitialized(p(1)) = false,  do(   var([indexer], vbValue, 0),      StatusIndicator_SetNumberOfSegments(p(1), StatusIndicator_NUMBEROFSTATUSES),     for(    indexer := 1, indexer <= StatusIndicator_GetNumberOfSegments(p(1)), inc(indexer),    StatusIndicator_SetSegmentName(p(1), indexer, statusname(indexer))   ),      StatusIndicator_UseDefaultColours(p(1)),     StatusIndicator_SetStatusesInitialized(p(1), true)   ) ))], [p(1) as StatusIndicatorResult: none. Initializes the available statuses for the Status Indicator], [StatusIndicator_InitializeStatuses(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetStatusesInitialized], [StatusIndicator], 2, 2, [Att([StatusesInitialized], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as BooleanResult: none. Sets the property StatusesInitialized of StatusIndicator.], [StatusIndicator_SetStatusesInitialized( atmStatusIndicator, newStatusesInitialized )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetStatusesInitialized], [StatusIndicator], 1, 1, [Att([StatusesInitialized], p(1))], [p(1) as StatusIndicatorResult: Boolean. Get the property StatusesInitialized of StatusIndicator.], [newStatusesInitialized := StatusIndicator_GetStatusesInitialized( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetNumberOfSegments], [StatusIndicator], 1, 1, [Att([NumberOfSegments], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property NumberOfSegments of StatusIndicator.], [newNumberOfSegments := StatusIndicator_GetNumberOfSegments( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSelectedStatusColor], [StatusIndicator], 2, 2, [Att([SelectedStatusColor], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as IntegerResult: none. Sets the property SelectedStatusColor of StatusIndicator.], [StatusIndicator_SetSelectedStatusColor( atmStatusIndicator, newSelectedStatusColor )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSelectedStatusColor], [StatusIndicator], 1, 1, [Att([SelectedStatusColor], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property SelectedStatusColor of StatusIndicator.], [newSelectedStatusColor := StatusIndicator_GetSelectedStatusColor( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSelectedStatusBorderColor], [StatusIndicator], 2, 2, [Att([SelectedStatusBorderColor], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as IntegerResult: none. Sets the property SelectedStatusBorderColor of StatusIndicator.], [StatusIndicator_SetSelectedStatusBorderColor( atmStatusIndicator, newSelectedStatusBorderColor )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSelectedStatusBorderColor], [StatusIndicator], 1, 1, [Att([SelectedStatusBorderColor], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property SelectedStatusBorderColor of StatusIndicator.], [newSelectedStatusBorderColor := StatusIndicator_GetSelectedStatusBorderColor( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetStatusSelected], [StatusIndicator], 2, 2, [Att([StatusSelected], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as IntegerResult: none. Sets the property StatusSelected of StatusIndicator.], [StatusIndicator_SetStatusSelected( atmStatusIndicator, newStatusSelected )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetStatusSelected], [StatusIndicator], 1, 1, [Att([StatusSelected], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property StatusSelected of StatusIndicator.], [newStatusSelected := StatusIndicator_GetStatusSelected( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetSelectedStatusMaximumLength], [StatusIndicator], 2, 2, [Att([SelectedStatusMaximumLength], p(1)) := p(2)], [p(1) as StatusIndicatorp(2) as IntegerResult: none. Sets the property SelectedStatusMaximumWidth of StatusIndicator.], [StatusIndicator_SetSelectedStatusMaximumWidth( atmStatusIndicator, newSelectedStatusMaximumWidth )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetSelectedStatusMaximumLength], [StatusIndicator], 1, 1, [Att([SelectedStatusMaximumLength], p(1))], [p(1) as StatusIndicatorResult: Integer. Get the property SelectedStatusMaximumWidth of StatusIndicator.], [newSelectedStatusMaximumWidth := StatusIndicator_GetSelectedStatusMaximumWidth( atmStatusIndicator )], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_StartCollectingStatusInformation], [StatusIndicator], 1, 1, [if( atomexists(in(1, c)) = True, { When an atom is connected to the Status Monitor   start collecting status information on this atom } EnableStatusMonitor(in(1, p(1)), true))], [p(1) as StatusIndicatorResult: none. Starts collecting status information at the connected atom.], [Enter Syntax Example], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_Animate3D], [StatusIndicator], 1, 1, [do( var([atmC], vbAtom, p(1)), var([indexer], vbValue, 0), var([segmentsdrawn], vbValue, 0), var([connected], vbValue, 0),  connected := atomexists(in(1, atmC)), { Do a Check if the current Status already has a score administrated in the tabel if not, do a refresh quickly.    This way the active status will always be visible in the status indicator. } if(  and(   connected = True,   cell(Status(in(1, atmC)), StatusIndicator_COLUMNNUMBER_SEGMENTSCORE, atmC) = False,   { APP-124 JG (29-04-2008) Only refresh when runspeed is not at it's maximum...}   RunSpeed < 1E40  ),  StatusIndicator_Refresh(atmC) ),  { APP-124 JG (29-04-2008) Show a message when the diagram is not refreshed...} if(  runspeed = 1E40,  DrawText(   0,   -4 * StatusIndicator_GetTextSizeTitle(atmC),   StatusIndicator_GetTextSizeTitle(atmC) * 40,   StatusIndicator_GetTextSizeTitle(atmC) * 4,   Concat(    [Refresment has been paused.],    CR,    [(Lower the runspeed to refresh the diagram)]   ),   ColorRed,   StatusIndicator_GetTextSizeTitle(atmC),   [Arial],   True,   0,   0,   HA_LEFT + VA_TOP  ) ),  { default View when not connected or no scores yet available. } if(  connected = false,  { Return nothing to quit the function. }  return(0) ),  { Animation of the colored segments } for(  indexer := 1, indexer <= StatusIndicator_GetNumberOfSegments(atmC), inc(indexer),  do(   if(    StatusIndicator_GetSegmentScore(atmC, indexer) = True,    do(     inc(segmentsdrawn),     { ***************** LEGEND ************************ }     do(      { ******************* CURRENT STATUS ******************** }      { Check out if this segment corresponds to the current status, if so draw a nice box around it. }      if(       { APP-124 JG (29-04-2008) Only draw selected status when runspeed is not at it's maximum...}       and(        Status(in(1, atmC)) = indexer,        runspeed < 1E40       ),       do(        di3DBox(         -1/4 * StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - 1/4 * StatusIndicator_GetTextSizeLegend(atmC),         -0.01,         6/4 * StatusIndicator_GetTextSizeLegend(atmC) + StatusIndicator_GetSelectedStatusMaximumLength(atmC) * StatusIndicator_GetTextSizeLegend(atmC),         6/4 * StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetSelectedStatusColor(atmC)        ),        SetMaterialWireFrame(True),        di3DBox(         -1/4 * StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) - 1/4 * StatusIndicator_GetTextSizeLegend(atmC),         -0.01,         6/4 * StatusIndicator_GetTextSizeLegend(atmC) + StatusIndicator_GetSelectedStatusMaximumLength(atmC) * StatusIndicator_GetTextSizeLegend(atmC),         6/4 * StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetTextSizeLegend(atmC),         StatusIndicator_GetSelectedStatusBorderColor(atmC)        ),        SetMaterialWireFrame(False)       )      ),            {** The box for the color **}      di3DBox(       0,       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),       0,       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetSegmentColor(atmC, indexer)      ),      SetMaterialWireFrame(1),            di3DBox(       0,       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2),       0,       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetBorderColor(atmC)      ),      SetMaterialWireFrame(0),                {** The name of the segment **}      DrawText(       2 * StatusIndicator_GetTextSizeLegend(atmC),       StatusIndicator_GetTextSizeLegend(atmC) * (2 * segmentsdrawn - 2) {- 1/4 * StatusIndicator_GetTextSizeLegend(atmC) ***used as correction for incorrect drawtext functionality***},       StringLength(String(cell(indexer, StatusIndicator_COLUMNNUMBER_SEGMENTNAME, atmC))),       2 * StatusIndicator_GetTextSizeLegend(atmC),       String(cell(indexer, StatusIndicator_COLUMNNUMBER_SEGMENTNAME, atmC)),       StatusIndicator_GetTextColor(atmC),       StatusIndicator_GetTextSizeLegend(atmC),       [Arial],       0,       0,       0,       HA_LEFT + VA_TOP      )     )    )   )     ) ), { The Diagram's Title } if(  StatusIndicator_GetTitleVisible(atmC),  DrawText(   0,   if(     segmentsdrawn > 0,     StatusIndicator_GetTextSizeLegend(atmC) * 2 * segmentsdrawn,     ySize(atmC) - 2 * StatusIndicator_GetTextSizeTitle(atmC)   ),   StringLength(StatusIndicator_GetTitle(atmC)) * StatusIndicator_GetTextSizeTitle(atmC),   StatusIndicator_GetTextSizeTitle(atmC) * 2,   StatusIndicator_GetTitle(atmC),   StatusIndicator_GetTextColor(atmC),   StatusIndicator_GetTextSizeTitle(atmC),   [Arial],   0,   0,   0,   HA_LEFT + VA_TOP  ) ))], [p(1) as StatusIndicator], [StatusIndicator_Animate3D(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetNumberOfSegmentsDrawn], [Atom Parameters], 1, 1, [Att(14, p(1))], [Returns the value of attribute NumberOfSegmentsDrawn (# 14) of StatusIndicator e1], [StatusIndicator_GetNumberOfSegmentsDrawn(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetNumberOfSegmentsDrawn], [Atom Parameters], 2, 2, [Att(14, p(1)) := p(2)], [Sets the value of attribute NumberOfSegmentsDrawn (# 14) of StatusIndicator e1 to e2], [StatusIndicator_SetNumberOfSegmentsDrawn(c, 1)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_GetAutomaticScaling], [Atom Parameters], 1, 1, [Att(15, p(1))], [Returns the value of attribute AutomaticScaling (# 15) of StatusIndicator e1], [StatusIndicator_GetAutomaticScaling(c)], 0, [StatusIndicator.atm]);
DefineFunction([StatusIndicator_SetAutomaticScaling], [Atom Parameters], 2, 2, [Att(15, p(1)) := p(2)], [Sets the value of attribute AutomaticScaling (# 15) of StatusIndicator e1 to e2], [StatusIndicator_SetAutomaticScaling(c, 1)], 0, [StatusIndicator.atm]);
Set(Icon(a), 
	RegisterIcon(pDir([media\images\default.jpg]), [default.jpg]));
SetMaterial(
	RegisterMaterial([Default], 8421504, 8421504, 3289650, 0, 0.100000001490116, 0, false, false, 1, 0), 1, a);
Set(Version(a), 7.3);
SetTreeIcon(pDir([Media\Icons\StatusIndicator.ico]));
SetChannels(1, 0);
SetChannelRanges(1, 1, 0, 0);
int001(75);
SetSize(6.4, 6, 1);
LockPosition(false);
LockSize(false);
DisableIconRotation(false);
SetProductCode([]);
CreateAttributes(15);
SetAttributeName(r(1), [NumberOfSegments]);
SetAttributeName(r(2), [Title]);
SetAttributeName(r(3), [RefreshRate]);
SetAttributeName(r(4), [StatusSelected]);
SetAttributeName(r(5), [StatusesInitialized]);
SetAttributeName(r(6), [TextColor]);
SetAttributeName(r(7), [BorderColor]);
SetAttributeName(r(8), [TextSizeTitle]);
SetAttributeName(r(9), [TextSizeLegend]);
SetAttributeName(r(10), [TitleVisible]);
SetAttributeName(r(11), [SelectedStatusColor]);
SetAttributeName(r(12), [SelectedStatusBorderColor]);
SetAttributeName(r(13), [SelectedStatusMaximumLength]);
SetAttributeName(r(14), [NumberOfSegmentsDrawn]);
SetAttributeName(r(15), [AutomaticScaling]);
SetAtt(r(1), 3);
SetTextAtt(r(2), [Status Indicator]);
SetAtt(r(3), 60);
SetExprAtt(r(6), [colorblack]);
SetExprAtt(r(7), [colorblack]);
SetAtt(r(8), 0.6);
SetAtt(r(9), 0.4);
SetAtt(r(10), 1);
SetExprAtt(r(11), [ColorOrange]);
SetExprAtt(r(12), [ColorRed]);
SetAtt(r(15), 1);
int024;
SetTable(1, 3);
int015(0, 64, [ 
1
]);
int015(1, 64, [`SegmentScore`
]);
int015(2, 64, [`SegmentColor`
]);
int015(3, 64, [`SegmentName`
]);
Set(OnEvent, [case(  inlist(   eventcode,   {1} STATUSINDICATOR_EVENTCODE_STARTCOLLECTINGSTATUSINFORMATION,   {2} STATUSINDICATOR_EVENTCODE_REFRESH  ),  { 1 }  { Start the operation. }  StatusIndicator_StartCollectingStatusInformation(c),    { 2 }  { Start the operation. }  StatusIndicator_Refresh(c))]);
Set(OnCreation, [StatusIndicator_InitializeStatuses(c)
]);
Set(OnReset, [StatusIndicator_Initialize(c)
]);
Set(OnUser, [Do( { Delete any current instances of this form.}  GuiDestroy([StatusIndicator]),  { Register the GUI-form for this atom.} GuiRegister(PDir([\Atoms\StatusIndicator.gui]), 1), { Show the GUI-form.} Guicreate([formStatusIndicator], [StatusIndicator], 0, c, 0, 1))]);
Set(On2DDraw, [StatusIndicator_Animate2D(c)]);
Set(On3DDraw, [StatusIndicator_Animate3D(c)]);
SetStatus(0);
int018;
int007;
