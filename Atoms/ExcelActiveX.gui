EDControl(EditForm:
  BorderIcons = set(SystemMenu),
  BorderStyle = Single,
  Caption = str('ExcelActiveX'),
  Height = 645,
  Left = 1161,
  Name = str('ExcelActiveX'),
  Position = Default,
  ShowHint = True,
  Top = 130,
  Visible = False,
  Width = 391,
  Controls(
    EDControl(MultiPage:
      ActivePage = 1,
      Align = Client,
      Anchors = set(Left,Top,Right,Bottom),
      Height = 605,
      Left = 0,
      Name = str('MultiPage1'),
      TabOrder = 1,
      Top = 0,
      Width = 391,
      Controls(
        EDControl(SinglePage:
          Caption = str('General'),
          Name = str('SinglePage1'),
          PageIndex = 1,
          Controls(
            EDControl(GroupBox:
              Caption = str('Settings'),
              Height = 144,
              Left = 8,
              Name = str('GroupBox1'),
              TabOrder = 2,
              Top = 88,
              Width = 370,
              Controls(
                EDControl(Button:
                  Caption = str('C&onnect'),
                  Hint = str('Pushing this button will automatically apply the changes'),
                  Left = 21,
                  Name = str('btnConnect'),
                  TabOrder = 3,
                  Top = 99,
                  Width = 74,
                  Events(
                    Click = str('do('#13' '#13' { First apply the changes }'#13' GuiControl([btnApply]),'#13' GuiRun([Click]),'#13' '#13' '#13' var([FileName], vbString, ExcelActiveX_FindExcelFile(ExcelActiveX_GetFileName(GuiAtom))),'#13' '#13' if('#13'  CompareText(FileName, []),'#13'  Do('#13#13'   { No excel file was found. If a full path was given offer to create a excel workbook in this directory otherwise '#13'     make path full to moddir if no moddir exists the workdir will be used. }'#13'   var([strFullPath], vbString, ExcelActiveX_MakePathFullToModDir(ExcelActiveX_GetFileName(GuiAtom))),'#13#13'   { check if directory exists }'#13'   if('#13'    not(DirectoryExists(ExtractDir(strFullPath))),'#13'    Do('#13'     Msg('#13'      Concat('#13'       [Directory "], ExtractDir(strFullPath), [" does not exsist. ], CR,'#13'       [Connection cannot be created.]'#13'      )'#13'     ),'#13'     Return(0)'#13'    )'#13'   ),    '#13'      '#13'   if('#13'    Confirm('#13'     Concat('#13'      [No file named "], ExtractName(ExcelActiveX_GetFileName(GuiAtom)), [" could be found in ], '#13'      ExtractDir(strFullPath), [. New Excel workbook will be created in this directory.]'#13'     )'#13'    ), '#13'    ExcelActiveX_New(ExcelActiveX_GetFileName(GuiAtom), ExcelActiveX_GetVisible(GuiAtom), GuiAtom)'#13'   )'#13'  ),'#13'  ExcelActiveX_Open(FileName, ExcelActiveX_GetVisible(GuiAtom), GuiAtom)'#13' ),'#13' '#13' if('#13'  ExcelActiveX_IsConnected(GuiAtom),'#13'  Do('#13'   { ExcelActiveX may have changed the FileName attribute. }'#13'   GuiControl([Edit_File], GuiSet([Text], TextAtt([FileName], GuiAtom))),'#13'   GuiControl([btnConnect], GuiSet([Enabled], 0)),'#13'   GuiControl([btnDisconnect], GuiSet([Enabled], 1))'#13'  )'#13' )'#13#13')'#13#13#13))),
                EDControl(Button:
                  Caption = str('&Disconnect'),
                  Hint = str('Pushing this button will automatically apply the changes'),
                  Left = 108,
                  Name = str('btnDisconnect'),
                  TabOrder = 4,
                  Top = 99,
                  Events(
                    Click = str('Do('#13' '#13' ExcelActiveX_Disconnect(GuiAtom),'#13' '#13' if('#13'  ExcelActiveX_IsConnected(GuiAtom) = 0,'#13'  Do('#13'   GuiControl([btnConnect], GuiSet([Enabled], 1)),'#13'   GuiControl([btnDisconnect], GuiSet([Enabled], 0))'#13'  )'#13' )'#13' '#13')'#13#13#13))),
                EDControl(Label:
                  Caption = str('File name:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelFileName'),
                  Top = 32,
                  Width = 48),
                EDControl(Edit:
                  Height = 21,
                  Left = 132,
                  Name = str('Edit_File'),
                  TabOrder = 1,
                  Top = 26,
                  Width = 225),
                EDControl(Button:
                  Caption = str('&Browse...'),
                  Left = 280,
                  Name = str('Select_Btn'),
                  TabOrder = 2,
                  Top = 52,
                  Events(
                    Click = str('do('#13#13' var([strPath], vbString, getfileopen([*.xls],[Excel files (*.xls)|*.xls|All files (*.*)|*.*])), '#13' if('#13'  StringLength(strPath) > 0,'#13'  do('#13'   { if the path starts with ModDir, strip it off to get a relative path }'#13'   strPath := ExcelActiveX_MakePathRelativeToModDir(strPath),'#13'   GuiControl([Edit_File], GuiSet([Text], strPath))'#13'  ),'#13'  if('#13'   StringLength(GuiControl([Edit_File], GuiGet([Text]))),'#13'   msg([No valid file name has been selected. Try again!])'#13'  )'#13' )'#13' '#13')'#13))))),
            EDControl(GroupBox:
              Caption = str(''),
              Height = 64,
              Left = 8,
              Name = str('GroupBox22'),
              TabOrder = 1,
              Top = 8,
              Width = 369,
              Controls(
                EDControl(Label:
                  Caption = str('Atom name:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelAtomName'),
                  Top = 30,
                  Width = 56),
                EDControl(Edit:
                  Height = 21,
                  Left = 132,
                  Name = str('ebAtomName'),
                  TabOrder = 1,
                  Top = 26,
                  Width = 225))),
            EDControl(GroupBox:
              Caption = str('Miscellaneous'),
              Height = 64,
              Left = 8,
              Name = str('GroupBox222'),
              TabOrder = 4,
              Top = 328,
              Width = 369,
              Controls(
                EDControl(CheckBox:
                  Caption = str(''),
                  Left = 132,
                  Name = str('cbVisible'),
                  TabOrder = 1,
                  Top = 30,
                  Events(
                    Change = str('SetAtt([Visible], GuiGet([Checked]), GuiAtom)'#13))),
                EDControl(Label:
                  Caption = str('Excel visible at startup:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelExcelVisibleAtStartup'),
                  Top = 30,
                  Width = 108))),
            EDControl(GroupBox:
              Caption = str('Read\write function settings'),
              Height = 64,
              Left = 8,
              Name = str('GroupBox12'),
              TabOrder = 3,
              Top = 248,
              Width = 370,
              Controls(
                EDControl(ComboBox:
                  Color = -16777208,
                  Height = 21,
                  Hint = str('Enter the name of the sheet to read from or write to'),
                  Left = 132,
                  Name = str('Edit_DefaultSheet'),
                  TabOrder = 1,
                  Top = 25,
                  Width = 180,
                  Events(
                    DropDown = str('do('#13' '#13' GuiControl([Edit_DefaultSheet], GuiList([Items],[Clear])),'#13#13' if('#13'  ExcelActiveX_IsConnected(GuiAtom),'#13'  Do('#13'   var([oleWorkbook], vbOle, ExcelActiveX_GetRefWorkbook(GuiAtom)),'#13'   Repeat('#13'    Ole(oleWorkbook, [Worksheets.Count]),'#13'    GuiControl([Edit_DefaultSheet], GuiList([Items], [Add], Ole(oleWorkbook, Concat([WorkSheets(], String(Count), [).Name]))))'#13'   )'#13'  )'#13' )'#13' '#13')'#13))),
                EDControl(Label:
                  Caption = str('Name default sheet:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelNameDefaultSheet'),
                  Top = 30,
                  Width = 95))))),
        EDControl(SinglePage:
          Caption = str('Tables'),
          Name = str('SinglePage2'),
          PageIndex = 2,
          Controls(
            EDControl(GroupBox:
              Caption = str('Settings of the table'),
              Height = 496,
              Left = 8,
              Name = str('gbSheetProperties'),
              TabOrder = 2,
              Top = 106,
              Width = 370,
              Controls(
                EDControl(Button:
                  Caption = str('A&pply table and read/write settings'),
                  Left = 166,
                  Name = str('btnApplySheetSettings'),
                  TabOrder = 16,
                  Top = 456,
                  Width = 196,
                  Events(
                    Click = str('do('#13' var([activesheet], vbValue, 0),'#13' '#13' { there''s is a special case: when the user was asked to save the changes he made for a particular sheet by invoking the combobox control cbTableNumber.'#13'   Then the tablenumber value of the combobox already is changed when we end up here, so that''s why we use a special label for this that still contains'#13'   the previous value in the combobox.}'#13#13' activesheet := Value(GuiControl([stCurrentlyEditedSheet], GuiGet([Caption]))),'#13' '#13' if('#13'  Content(GuiAtom) > 0,'#13'  '#13'  Do('#13'   '#13'   { Apply changes to the table of the Excel atom on the right row, activesheet number }'#13'   '#13'   cell(activesheet, 1, GuiAtom) := GuiControl([Edit_P_1], GuiGet([Text])),'#13'   cell(activesheet, 2, GuiAtom) := GuiControl([Edit_P_2], GuiGet([Text])),'#13'   cell(activesheet, 3, GuiAtom) := Value(GuiControl([Edit_P_3], GuiGet([Text]))),'#13'   cell(activesheet, 4, GuiAtom) := Value(GuiControl([Edit_P_4], GuiGet([Text]))),'#13'   cell(activesheet, 5, GuiAtom) := Value(GuiControl([Edit_P_5], GuiGet([Text]))),'#13'   cell(activesheet, 6, GuiAtom) := Value(GuiControl([Edit_P_6], GuiGet([Text]))),'#13'   cell(activesheet, 7, GuiAtom) := Value(GuiControl([Edit_P_7], GuiGet([Text]))),'#13'   cell(activesheet, 8, GuiAtom) := Value(GuiControl([Edit_P_8], GuiGet([Text]))),'#13'   cell(activesheet, 9, GuiAtom) := GuiControl([Edit_P_9], GuiGet([Code])), '#13'   '#13'   cell(activesheet ,10, GuiAtom) := '#13'    if(GuiControl([RadiobtnReadfromExcel], GuiGet([Checked])),1,2),'#13'   cell(activesheet ,11, GuiAtom) := '#13'    if(GuiControl([RadiobtnOnReset], GuiGet([Checked])),1,2),'#13'    '#13'   var([atmTable], vbAtom, Rank(activesheet, GuiAtom)),'#13'    '#13'   Label([t-SheetName], atmTable)      := GuiControl([Edit_P_2], GuiGet([Text])),'#13'   Label([t-StartRowExcel], atmTable)  := Value(GuiControl([Edit_P_5], GuiGet([Text]))),'#13'   Label([t-StartColExcel], atmTable)  := Value(GuiControl([Edit_P_6], GuiGet([Text]))),'#13'   Label([t-NrOfRowsToCopy], atmTable) := Value(GuiControl([Edit_P_7], GuiGet([Text]))),'#13'   Label([t-NrOfColsToCopy], atmTable) := Value(GuiControl([Edit_P_8], GuiGet([Text]))),'#13'  '#13'   Label([t-ReadWriteTime], atmTable)  := GuiControl([Edit_P_9], GuiGet([Code])), '#13'  '#13'   Label([t-ReadOrWrite], atmTable)   := if(GuiControl([RadiobtnReadfromExcel], GuiGet([Checked])),1,2),'#13'   Label([t-ResetOrAtTime], atmTable) := if(GuiControl([RadiobtnOnReset], GuiGet([Checked])),1,2),'#13'  '#13'   Label([t-CopyRowHeader], atmTable) := GuiControl([CheckBoxCopyRowHeader], GuiGet([Checked])),'#13'   Label([t-CopyColumnHeader], atmTable) := GuiControl([CheckBoxCopyColumnHeader], GuiGet([Checked])),'#13'  '#13'   GuiControl([stChangesMade], GuiSet([Caption], [0])),'#13'   '#13'   { Change the table dimension according to the user input }'#13'   nRows(Rank(activesheet, GuiAtom)) := Value(GuiControl([Edit_P_3], GuiGet([Text]))),'#13'   nCols(Rank(activesheet, GuiAtom)) := Value(GuiControl([Edit_P_4], GuiGet([Text]))),'#13'   '#13'   { Changing the name of the table can have consequences for the aliases }'#13'   Table_ChangeName(GuiControl([Edit_P_1], GuiGet([Text])), Rank(activesheet, GuiAtom))'#13'  ),'#13'  '#13'  {else (if activesheet is <=0 ), then:}'#13'  Msg([No table selected to apply read and write settings.])'#13' )'#13'  '#13' '#13#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_1'),
                  TabOrder = 2,
                  Top = 68,
                  Width = 180,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_3'),
                  TabOrder = 3,
                  Top = 100,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_4'),
                  TabOrder = 4,
                  Top = 132,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_8'),
                  TabOrder = 10,
                  Top = 308,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_7'),
                  TabOrder = 9,
                  Top = 276,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_6'),
                  TabOrder = 8,
                  Top = 244,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Edit:
                  Height = 21,
                  Left = 140,
                  Name = str('Edit_P_5'),
                  TabOrder = 7,
                  Top = 212,
                  Width = 100,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(ComboBox:
                  Color = -16777208,
                  Height = 21,
                  Hint = str('Enter the name of the sheet to read from or write to'),
                  Left = 140,
                  Name = str('Edit_P_2'),
                  TabOrder = 6,
                  Top = 180,
                  Width = 180,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13),
                    DropDown = str('do('#13' var([ExcelWorkbook], vbOle, ExcelActiveX_GetRefWorkbook(GuiAtom)),'#13#13' GuiControl([Edit_P_2], GuiList([Items],[Clear])),'#13' if('#13'  OleExists(ExcelWorkbook),'#13'  Repeat('#13'   Ole(ExcelWorkbook, [Worksheets.Count]),'#13'   GuiControl([Edit_P_2], GuiList([Items], [Add], Ole(ExcelWorkbook, Concat([WorkSheets(], String(Count), [).Name]))))'#13'  )'#13' )'#13')'#13))),
                EDControl(Button:
                  Caption = str('&Show Table'),
                  Left = 286,
                  Name = str('btnShowTable'),
                  TabOrder = 5,
                  Top = 30,
                  Width = 76,
                  Events(
                    Click = str('EditTable(rank(Value(GuiControl([cbTableNumber], GuiGet([Text]))), GuiAtom))'#13))),
                EDControl(ComboBox:
                  Height = 21,
                  Left = 140,
                  Name = str('cbTableNumber'),
                  Style = DropDownList,
                  TabOrder = 1,
                  Top = 32,
                  Width = 140,
                  Events(
                    Change = str('do('#13' '#13' var([activesheet], vbValue, 0),'#13' '#13' activesheet := Value(GuiControl([cbTableNumber], GuiGet([text]))),'#13' '#13' { Check if the user applied the changes already. }'#13' if('#13'   Value(GuiControl([stChangesMade], GuiGet([Caption]))) = true,'#13'  if('#13'   confirm([The changes made for the edited table haven''t been saved yet. Save the changes?]) = true,'#13'   do('#13'    GuiControl([btnApplySheetSettings]),'#13'    GuiRun([Click])'#13'   )'#13'  )'#13' ),'#13' '#13' '#13' {fill all edit fields from the table}'#13' if('#13'  Content(GuiAtom) <> 0,'#13'  do('#13'   '#13'   var([atmTable], vbAtom, Rank(activesheet, GuiAtom)),'#13'   '#13'   GuiControl([Edit_P_1], GuiSet([Text], Name(atmTable))),                  { Atom Name of the table }'#13'   GuiControl([Edit_P_2], GuiSet([Text], Label([t-SheetName], atmTable))),  { Name of the ExcelSheet }'#13'   GuiControl([Edit_P_3], GuiSet([Text], String(nRows(atmTable)))),                 { Number of rows of the table }'#13'   GuiControl([Edit_P_4], GuiSet([Text], String(nCols(atmTable)))),                 { Number of columns of the table }'#13'   GuiControl([Edit_P_5], GuiSet([Text], Label([t-StartRowExcel], atmTable, 2))),'#13'   GuiControl([Edit_P_6], GuiSet([Text], Label([t-StartColExcel], atmTable, 2))),'#13'   GuiControl([Edit_P_7], GuiSet([Text], String(Label([t-NrOfRowsToCopy], atmTable)))),'#13'   GuiControl([Edit_P_8], GuiSet([Text], String(Label([t-NrOfColsToCopy], atmTable, 2)))),'#13'   GuiControl([Edit_P_9], GuiSet([Code], Label([t-ReadWriteTime], atmTable, 2))),'#13'  '#13'   '#13'   GuiControl([RadiobtnReadfromExcel], GuiSet([Checked], if(Label([t-ReadOrWrite], atmTable) = 1, 1, 0))),'#13'   GuiRun([Change]),'#13'   GuiControl([RadiobtnWritetoExcel], GuiSet([Checked], if(Label([t-ReadOrWrite], atmTable) = 2, 1, 0))),'#13'   GuiRun([Change]),'#13'  '#13'   GuiControl([RadiobtnOnReset], GuiSet([Checked], if(Label([t-ResetOrAtTime], atmTable) = 1, 1, 0))),'#13'   GuiRun([Change]),'#13'   GuiControl([RadiobtnSpecifiedTime], GuiSet([Checked], if(Label([t-ResetOrAtTime], atmTable) = 2, 1, 0))),'#13'   GuiRun([Change]),'#13'   '#13'   {CheckBoxCopyColumnHeader}'#13'   GuiControl([CheckBoxCopyRowHeader], GuiSet([Checked], Label([t-CopyRowHeader], atmTable))),'#13'   GuiControl([CheckBoxCopyColumnHeader], GuiSet([Checked], Label([t-CopyColumnHeader], atmTable)))'#13'   '#13'  )'#13' ),'#13#13' '#13' GuiControl([stChangesMade], GuiSet([Caption], [0])), '#13' GuiControl([stCurrentlyEditedSheet], GuiSet([Caption], String(activesheet)))'#13#13')'#13#13#13#13#13#13#13#13#13),
                    DropDown = str('do('#13' { Fill list where you can select a sheet number to edit with the right number of sheets }'#13' var([indexer], vbValue, 0),'#13#13' GuiList([Items], [Clear]),'#13' for('#13'  indexer := 1, indexer <= Content(GuiAtom), inc(indexer),'#13'  do('#13'   GuiList([Items], [Add], Concat(String(indexer), [: ], Name(Rank(indexer, GuiAtom))))'#13'  )'#13' ),'#13' '#13' GuiList([Items], GuiSet([ItemIndex], 1))'#13#13')'#13))),
                EDControl(CheckBox:
                  Caption = str('copy row header table'),
                  Left = 14,
                  Name = str('CheckBoxCopyRowHeader'),
                  TabOrder = 12,
                  Top = 416,
                  Width = 145,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(CheckBox:
                  Caption = str('copy column header table'),
                  Left = 166,
                  Name = str('CheckBoxCopyColumnHeader'),
                  TabOrder = 13,
                  Top = 416,
                  Width = 161,
                  Events(
                    Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                EDControl(Button:
                  Caption = str('Apply and Read/Write &Now'),
                  Left = 14,
                  Name = str('btnReadWrtieNow'),
                  TabOrder = 15,
                  Top = 456,
                  Width = 146,
                  Events(
                    Click = str('do('#13' GuiControl([btnApplySheetSettings]),'#13' GuiRun([Click]),'#13' '#13' var([activesheet], vbValue, 0),'#13' '#13' { there''s is a special case: when the user was asked to save the changes he made for a particular sheet by invoking the combobox control cbTableNumber.'#13'   Then the tablenumber value of the combobox already is changed when we end up here, so that''s why we use a special label for this that still contains'#13'   the previous value in the combobox.}'#13#13' activesheet := Value(GuiControl([stCurrentlyEditedSheet], GuiGet([Caption]))),'#13' '#13' var([atmTable], vbAtom, Rank(activesheet, GuiAtom)),'#13' '#13' ExcelActiveX_ReadWriteTable(atmTable, GuiAtom)'#13')'#13))),
                EDControl(Label:
                  Caption = str('Atom name of table:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelAtomNameOfTable'),
                  Top = 72,
                  Width = 94),
                EDControl(Label:
                  Caption = str('Number of rows:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelNumberOfRows'),
                  Top = 104,
                  Width = 77),
                EDControl(Label:
                  Caption = str('Number of columns:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelNumberOfColumns'),
                  Top = 136,
                  Width = 94),
                EDControl(Label:
                  Caption = str('Read/Write from sheet:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelRead/WriteFromSheet'),
                  Top = 184,
                  Width = 111),
                EDControl(Label:
                  Caption = str('Excel starting row:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelExcelStartingRow'),
                  Top = 216,
                  Width = 86),
                EDControl(Label:
                  Caption = str('Excel starting column:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelExcelStartingColumn'),
                  Top = 248,
                  Width = 103),
                EDControl(Label:
                  Caption = str('# Rows read/write:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('Label#RowsRead/Write'),
                  Top = 280,
                  Width = 91),
                EDControl(Label:
                  Caption = str('# Columns read/write:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('Label#ColumnsRead/Write'),
                  Top = 312,
                  Width = 104),
                EDControl(Label:
                  Caption = str('Edit table:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelEditTable'),
                  Top = 36,
                  Width = 47),
                EDControl(Panel:
                  BevelOuter = None,
                  Caption = str(''),
                  DoubleBuffered = True,
                  Height = 33,
                  Left = 6,
                  Name = str('PanelOnResetAtTime'),
                  TabOrder = 14,
                  Top = 370,
                  Width = 356,
                  Controls(
                    EDControl(RadioButton:
                      Caption = str('At specified time:'),
                      Left = 160,
                      Name = str('RadiobtnSpecifiedTime'),
                      TabOrder = 2,
                      TabStop = False,
                      Top = 8,
                      Width = 98,
                      Events(
                        Change = str('Do('#13' '#13' If('#13'  Content(GuiAtom) <> 0,'#13'  GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13' ),'#13' '#13' GuiControl([Edit_P_9], GuiSet([Enabled], GuiControl([RadiobtnSpecifiedTime], GuiGet([Checked])))),'#13' GuiControl([Edit_P_9], GuiSet([Visible], GuiControl([RadiobtnSpecifiedTime], GuiGet([Checked]))))'#13' '#13')'#13#13#13))),
                    EDControl(RadioButton:
                      Caption = str('On reset'),
                      Checked = True,
                      Left = 8,
                      Name = str('RadiobtnOnreset'),
                      TabOrder = 1,
                      Top = 8,
                      Width = 65,
                      Events(
                        Change = str('Do('#13' '#13' If('#13'  Content(GuiAtom) <> 0,'#13'  GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13' ),'#13#13' GuiControl([Edit_P_9], GuiSet([Enabled], Not(GuiControl([RadiobtnOnReset], GuiGet([Checked]))))),'#13' GuiControl([Edit_P_9], GuiSet([Visible], Not(GuiControl([RadiobtnOnReset], GuiGet([Checked])))))'#13' '#13')'#13#13#13#13))),
                    EDControl(ScriptEdit:
                      Active = False,
                      Enabled = False,
                      Left = 266,
                      Name = str('Edit_P_9'),
                      TabOrder = 3,
                      Top = 6,
                      Visible = False,
                      Width = 88,
                      Events(
                        Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))))),
                EDControl(Label:
                  Caption = str('0'),
                  Color = -16777208,
                  Height = 13,
                  Left = 28,
                  Name = str('stCurrentlyEditedSheet'),
                  Top = 18,
                  Visible = False,
                  Width = 6),
                EDControl(Panel:
                  BevelOuter = None,
                  Caption = str(''),
                  Height = 33,
                  Left = 6,
                  Name = str('PanelReadWrite'),
                  TabOrder = 11,
                  Top = 340,
                  Width = 356,
                  Controls(
                    EDControl(RadioButton:
                      Caption = str('Read from Excel sheet'),
                      Checked = True,
                      Left = 8,
                      Name = str('RadiobtnReadfromExcel'),
                      TabOrder = 1,
                      Top = 8,
                      Width = 137,
                      Events(
                        Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))),
                    EDControl(RadioButton:
                      Caption = str('Write to Excel sheet'),
                      Left = 160,
                      Name = str('RadiobtnWritetoExcel'),
                      TabOrder = 2,
                      Top = 8,
                      Width = 129,
                      Events(
                        Change = str('If('#13' Content(GuiAtom) <> 0,'#13' GuiControl([stChangesMade], GuiSet([Caption], [1]))'#13')'#13))))),
                EDControl(Label:
                  Caption = str('0'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('stChangesMade'),
                  Top = 18,
                  Visible = False,
                  Width = 6))),
            EDControl(GroupBox:
              Caption = str('General'),
              Height = 88,
              Left = 8,
              Name = str('gbSettings'),
              TabOrder = 1,
              Top = 8,
              Width = 369,
              Controls(
                EDControl(Label:
                  Caption = str('Number of tables:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelNumberOfTables'),
                  Top = 30,
                  Width = 83),
                EDControl(Label:
                  Caption = str('Show tables in Model:'),
                  Color = -16777208,
                  Height = 13,
                  Left = 12,
                  Name = str('LabelShowTablesInModel'),
                  Top = 62,
                  Width = 104),
                EDControl(Button:
                  Caption = str('-'),
                  Left = 282,
                  Name = str('Min_btn'),
                  TabOrder = 3,
                  Top = 24,
                  Width = 25,
                  Events(
                    Click = str('do('#13' var([valNumberOfTables], vbValue, 0),'#13' var([indexer], vbValue, 0),'#13' var([currentlyeditedsheet], vbValue, 0),'#13' var([atmTableToDelete], vbAtom),'#13' var([valIndexToDelete], vbValue),'#13' '#13' valNumberOfTables := Value(GuiControl([ebNumberOfTables], GuiGet([Text]))),'#13' currentlyeditedsheet := Value(GuiControl([stCurrentlyEditedSheet], GuiGet([Caption]))),'#13#13' if('#13'  valNumberOfTables = 0,'#13'  do('#13'   msg([No table to delete], 1),'#13'   return(-1)'#13'  )'#13' ),'#13' { Select a table atom to delete }'#13' If('#13'  Content(GuiAtom) = 1,'#13'  Do('#13'   valIndexToDelete = 1,'#13'   atmTableToDelete := Rank(1, GuiAtom)'#13'  ),'#13'  Do('#13'   if('#13'    SelectAtom(GuiAtom, Rank(currentlyeditedsheet, GuiAtom), [Atom to delete]),'#13'    atmTableToDelete := a,'#13'    return(-1)'#13'   ),'#13'   valIndexToDelete := IndexMatch(Content(GuiAtom), AtomId(atmTableToDelete), AtomId(Rank(Count, GuiAtom))),'#13'   if('#13'    valIndexToDelete = 0,'#13'    do('#13'     Msg([Please select a table within the Excel atom], 2),'#13'     return(-1)'#13'    )'#13'   )'#13'  )'#13' ),'#13' '#13' DeleteRow(valIndexToDelete, GuiAtom),'#13' '#13' dec(valNumberOfTables),'#13' if(valIndexToDelete < currentlyeditedsheet, dec(currentlyeditedsheet)), '#13' '#13' GuiControl([ebNumberOfTables], GuiSet([Text], String(valNumberOfTables))),'#13#13' GuiControl([cbTableNumber]),'#13' GuiList([Items], [Clear]),'#13' for('#13'  indexer := 1, indexer <= valNumberOfTables, inc(indexer),'#13'  do('#13'   GuiList([Items], [Add], String(indexer))'#13'  )'#13' ),'#13' '#13' SetTable(valNumberOfTables, 11, GuiAtom),'#13' DestroyAtom(atmTableToDelete),'#13' '#13' Att([NoTables], GuiAtom) := Value(GuiControl([ebNumberOfTables], GuiGet([Text]))),'#13#13' '#13' GuiControl([cbTableNumber], GuiSet([ItemIndex], min(currentlyeditedsheet, valNumberOfTables))),'#13' '#13' if('#13'  Content(GuiAtom) = 0,'#13'  Do('#13'   GuiControl([Edit_P_1], GuiSet([Text], [])),  { Atom Name of the table }'#13'   GuiControl([Edit_P_2], GuiSet([Text], [])),  { Name of the ExcelSheet }'#13'   GuiControl([Edit_P_3], GuiSet([Text], [])),  { Number of rows of the table }'#13'   GuiControl([Edit_P_4], GuiSet([Text], [])),  { Number of columns of the table }'#13'   GuiControl([Edit_P_5], GuiSet([Text], [])),'#13'   GuiControl([Edit_P_6], GuiSet([Text], [])),'#13'   GuiControl([Edit_P_7], GuiSet([Text], [])),'#13'   GuiControl([Edit_P_8], GuiSet([Text], [])),'#13'   GuiControl([Edit_P_9], GuiSet([Code], [])),'#13'   GuiControl([stChangesMade], GuiSet([Caption], [0]))'#13'  ), '#13'  GuiControl([cbTableNumber], GuiRun([Change]))'#13' )'#13' '#13')'#13))),
                EDControl(Button:
                  Caption = str('+'),
                  Hint = str('Create tables in the Excel atom to read or write to specified Excel sheets'),
                  Left = 250,
                  Name = str('Plus_btn'),
                  TabOrder = 2,
                  Top = 24,
                  Width = 25,
                  Events(
                    Click = str('do('#13' '#13' var([valNumberOfTables], vbValue, 0),'#13' var([currentlyeditedsheet], vbValue, 0),'#13' var([indexer], vbValue, 0),'#13' '#13' valNumberOfTables := Value(GuiControl([ebNumberOfTables], GuiGet([Text]))),'#13' currentlyeditedsheet := Value(GuiControl([stCurrentlyEditedSheet], GuiGet([Caption]))),'#13'  '#13' inc(valNumberOfTables),'#13' '#13' GuiControl([ebNumberOfTables], GuiSet([Text], String(valNumberOfTables))),'#13#13' GuiControl([cbTableNumber]),'#13' GuiRun([DropDown]),'#13' GuiSet([ItemIndex], currentlyeditedsheet),'#13' '#13' SetTable(valNumberOfTables, 11, GuiAtom),'#13#13' { Create Tables in ExcelAtom }'#13' CreateAtom('#13'  AtomByName([Table], Library),'#13'  GuiAtom,'#13'  Concat('#13'   StringReplace(Name(GuiAtom), [ ], [_], SR_REPLACE_ALL),'#13'   [_table],'#13'   String(valNumberOfTables)'#13'  )'#13' ),'#13' '#13' '#13' SetRank(valNumberOfTables, First(GuiAtom)),'#13' '#13' SetLoc(1, 2 + yLoc(Rank(IndexMax(Content(GuiAtom),yLoc(Rank(Count,GuiAtom))), GuiAtom)), 0, Last(GuiAtom)),'#13' nRows(Last(GuiAtom)) := 5,'#13' nCols(Last(GuiAtom)) := 5,'#13' '#13' ExcelActiveX_SetDefaultLabels(Last(GuiAtom)),'#13'  '#13' ExcelActiveX_SetTableHeaders(GuiAtom),'#13' '#13' GuiControl([cbTableNumber]),'#13' GuiRun([DropDown]),'#13' GuiRun([Change]),'#13'     '#13' Att([NoTables], GuiAtom) := Value(GuiControl([ebNumberOfTables], GuiGet([Text])))'#13')'#13))),
                EDControl(Edit:
                  Enabled = False,
                  Height = 21,
                  Left = 138,
                  Name = str('ebNumberOfTables'),
                  TabOrder = 1,
                  Top = 26,
                  Width = 100),
                EDControl(CheckBox:
                  Caption = str(''),
                  Checked = True,
                  Height = 21,
                  Left = 138,
                  Name = str('CheckBoxShowTables'),
                  TabOrder = 4,
                  Top = 59))))))),
    EDControl(Panel:
      Align = Bottom,
      Anchors = set(Left,Right,Bottom),
      BevelOuter = None,
      Caption = str(''),
      Height = 40,
      Left = 0,
      Name = str('Panel1'),
      TabOrder = 2,
      Top = 605,
      Width = 391,
      Controls(
        EDControl(Button:
          Caption = str('&Apply'),
          Left = 312,
          Name = str('btnApply'),
          TabOrder = 4,
          Top = 8,
          Events(
            Click = str('do('#13' {enter the File + Sheet name in the attributes}'#13' Name(GuiAtom) := GuiControl([ebAtomName], GuiGet([text])),'#13#13' TextAtt([FileName], GuiAtom) := GuiControl([Edit_File], GuiGet([Text])),'#13' TextAtt([SheetName], GuiAtom) := GuiControl([Edit_DefaultSheet], GuiGet([Text])),'#13' att([Visible], GuiAtom) := GuiControl([cbVisible], GuiGet([Checked])),'#13' SetSetting(saContents, GuiControl([CheckBoxShowTables], GuiGet([Checked])), GuiAtom)'#13')'#13#13#13))),
        EDControl(Button:
          Cancel = True,
          Caption = str('&Cancel'),
          Left = 230,
          Name = str('btnCancel'),
          TabOrder = 3,
          Top = 8,
          Events(
            Click = str('GuiDestroy '#13))),
        EDControl(Button:
          Caption = str('&Ok'),
          Default = True,
          Left = 144,
          Name = str('btnOk'),
          TabOrder = 2,
          Top = 8,
          Events(
            Click = str('do('#13' { Check if the user applied the changes already. }'#13' if('#13'  Value(GuiControl([stChangesMade], GuiGet([Caption]))) = true,'#13'  if('#13'   confirm([The changes made for the edited sheet haven''t been saved yet. Save the changes?]) = true,'#13'   do('#13'    GuiControl([btnApplySheetSettings]),'#13'    GuiRun([Click])'#13'   )'#13'  )'#13' ),'#13#13' GuiControl([btnApply]),'#13' GuiRun([Click]),'#13' GuiDestroy'#13')'#13))),
        EDControl(Button:
          Caption = str('&Help'),
          Left = 8,
          Name = str('btnHelp'),
          TabOrder = 1,
          Top = 8,
          Events(
            Click = str('Help(PDir([HELP\ED Help.hlp]), [ExcelActiveX])'#13)))))),
  Events(
    Show = str('do('#13' if('#13'  AtomExists(m(GuiAtom)),'#13'  GuiControl([ExcelActiveX], GuiSet([Caption], Concat(Name(m(GuiAtom)), [ - ], Name(GuiAtom)))),'#13'  GuiControl([ExcelActiveX], GuiSet([Caption], Concat([Baseclass - ], Name(GuiAtom))))'#13' ),'#13' '#13' '#13' {Update atom to new style: Labels are set on the table atoms}'#13' If('#13'  Content(GuiAtom) > 0,'#13'  if(Label([t-StartRowExcel], Rank(1,GuiAtom)) = 0, ExcelActiveX_UpgradeAtom(GuiAtom))'#13' ), '#13' '#13' GuiControl([CheckBoxShowTables], GuiSet([Checked], GetSetting(saContents, GuiAtom))),'#13' '#13' {Set ActivePage}'#13'    '#13' GuiControl([MultiPage1]), GuiSet([ActivePage],1),'#13#13' GuiControl([ebAtomName], GuiSet([Text], Name(GuiAtom))),'#13#13' GuiControl([Edit_File], GuiSet([Text], TextAtt([FileName], GuiAtom))),'#13' '#13' GuiControl([Edit_DefaultSheet], GuiSet([Text], TextAtt([SheetName], GuiAtom))), '#13#13' GuiControl([ebNumberOfTables], GuiSet([Text], String(Content(GuiAtom)))),'#13#13' GuiControl([cbVisible], GuiSet([Checked], Att([Visible], GuiAtom))),'#13' '#13' GuiControl([stChangesMade], GuiSet([Caption], [0])),'#13' '#13' GuiControl([cbTableNumber]),'#13' GuiRun([DropDown]),'#13' GuiRun([Change]),'#13' '#13' {Enable/disable connect/disconnect buttons }'#13' GuiControl([btnConnect], GuiSet([Enabled], not(ExcelActiveX_IsConnected(GuiAtom)))),'#13' GuiControl([btnDisconnect], GuiSet([Enabled], ExcelActiveX_IsConnected(GuiAtom))),'#13' '#13' Gui_PositionGuiAroundAtom(GuiControl([ExcelActiveX])),'#13' '#13' Gui([Update])'#13' '#13' { further initialization takes place in the onChange of the cbTableNumber combobox }'#13')'#13#13#13)))